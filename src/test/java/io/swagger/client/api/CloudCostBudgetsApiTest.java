/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Budget;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBudget;
import io.swagger.client.model.ResponseDTOBudgetData;
import io.swagger.client.model.ResponseDTOListBudget;
import io.swagger.client.model.ResponseDTOString;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CloudCostBudgetsApi
 */
@Ignore
public class CloudCostBudgetsApiTest {

    private final CloudCostBudgetsApi api = new CloudCostBudgetsApi();

    /**
     * Clone a budget
     *
     * Clone a Cloud Cost Budget using the given Budget ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloneBudgetTest() throws Exception {
        String accountIdentifier = null;
        String id = null;
        String cloneName = null;
        ResponseDTOString response = api.cloneBudget(accountIdentifier, id, cloneName);

        // TODO: test validations
    }
    /**
     * Create a Budget
     *
     * Create a Budget to set and receive alerts when your costs exceed (or are forecasted to exceed) your budget amount.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createBudgetTest() throws Exception {
        Budget body = null;
        String accountIdentifier = null;
        ResponseDTOString response = api.createBudget(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Delete a budget
     *
     * Delete a Cloud Cost Budget for the given Budget ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteBudgetTest() throws Exception {
        String accountIdentifier = null;
        String id = null;
        ResponseDTOString response = api.deleteBudget(accountIdentifier, id);

        // TODO: test validations
    }
    /**
     * Fetch Budget details
     *
     * Fetch details of a Cloud Cost Budget for the given Budget ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBudgetTest() throws Exception {
        String accountIdentifier = null;
        String id = null;
        ResponseDTOBudget response = api.getBudget(accountIdentifier, id);

        // TODO: test validations
    }
    /**
     * Fetch the cost details of a Budget
     *
     * Fetch the cost details of a Cloud Cost Budget for the given Budget ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCostDetailsTest() throws Exception {
        String accountIdentifier = null;
        String id = null;
        ResponseDTOBudgetData response = api.getCostDetails(accountIdentifier, id);

        // TODO: test validations
    }
    /**
     * List all the Budgets
     *
     * List all the Cloud Cost Budgets.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listBudgetsTest() throws Exception {
        String accountIdentifier = null;
        ResponseDTOListBudget response = api.listBudgets(accountIdentifier);

        // TODO: test validations
    }
    /**
     * List all the Budgets associated with a Perspective
     *
     * List all the Cloud Cost Budgets associated for the given Perspective ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listBudgetsForPerspectiveTest() throws Exception {
        String accountIdentifier = null;
        String perspectiveId = null;
        ResponseDTOListBudget response = api.listBudgetsForPerspective(accountIdentifier, perspectiveId);

        // TODO: test validations
    }
    /**
     * Update an existing budget
     *
     * Update an existing Cloud Cost Budget for the given Budget ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateBudgetTest() throws Exception {
        Budget body = null;
        String accountIdentifier = null;
        String id = null;
        ResponseDTOString response = api.updateBudget(body, accountIdentifier, id);

        // TODO: test validations
    }
}
