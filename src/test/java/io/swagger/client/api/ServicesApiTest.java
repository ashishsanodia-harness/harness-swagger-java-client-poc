/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOListServiceResponse;
import io.swagger.client.model.ResponseDTOPageResponseServiceResponse;
import io.swagger.client.model.ResponseDTOServiceResponse;
import io.swagger.client.model.ServiceRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ServicesApi
 */
@Ignore
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    /**
     * Create a Service
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createServiceV2Test() throws Exception {
        String accountIdentifier = null;
        ServiceRequest body = null;
        ResponseDTOServiceResponse response = api.createServiceV2(accountIdentifier, body);

        // TODO: test validations
    }
    /**
     * Create Services
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createServicesV2Test() throws Exception {
        String accountIdentifier = null;
        List<ServiceRequest> body = null;
        ResponseDTOPageResponseServiceResponse response = api.createServicesV2(accountIdentifier, body);

        // TODO: test validations
    }
    /**
     * Delete a Service by identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteServiceV2Test() throws Exception {
        String serviceIdentifier = null;
        String accountIdentifier = null;
        String ifMatch = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOBoolean response = api.deleteServiceV2(serviceIdentifier, accountIdentifier, ifMatch, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Gets Service Access list
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceAccessListTest() throws Exception {
        String accountIdentifier = null;
        Integer page = null;
        Integer size = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String searchTerm = null;
        List<String> serviceIdentifiers = null;
        List<String> sort = null;
        ResponseDTOListServiceResponse response = api.getServiceAccessList(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, serviceIdentifiers, sort);

        // TODO: test validations
    }
    /**
     * Gets Service list
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceListTest() throws Exception {
        String accountIdentifier = null;
        Integer page = null;
        Integer size = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String searchTerm = null;
        List<String> serviceIdentifiers = null;
        List<String> sort = null;
        ResponseDTOPageResponseServiceResponse response = api.getServiceList(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, serviceIdentifiers, sort);

        // TODO: test validations
    }
    /**
     * Gets a Service by identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getServiceV2Test() throws Exception {
        String serviceIdentifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        Boolean deleted = null;
        ResponseDTOServiceResponse response = api.getServiceV2(serviceIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, deleted);

        // TODO: test validations
    }
    /**
     * Update a Service by identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateServiceV2Test() throws Exception {
        String accountIdentifier = null;
        ServiceRequest body = null;
        String ifMatch = null;
        ResponseDTOServiceResponse response = api.updateServiceV2(accountIdentifier, body, ifMatch);

        // TODO: test validations
    }
    /**
     * Upsert a Service by identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void upsertServiceV2Test() throws Exception {
        String accountIdentifier = null;
        ServiceRequest body = null;
        String ifMatch = null;
        ResponseDTOServiceResponse response = api.upsertServiceV2(accountIdentifier, body, ifMatch);

        // TODO: test validations
    }
}
