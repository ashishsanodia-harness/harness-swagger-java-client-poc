/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOPageResponseSecretResponse;
import io.swagger.client.model.ResponseDTOSecretResponse;
import io.swagger.client.model.ResponseDTOSecretValidationResult;
import io.swagger.client.model.SecretRequestWrapper;
import io.swagger.client.model.SecretResourceFilter;
import io.swagger.client.model.SecretValidationMetaData;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for SecretsApi
 */
@Ignore
public class SecretsApiTest {

    private final SecretsApi api = new SecretsApi();

    /**
     * Deletes Secret by ID and Scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSecretV2Test() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOBoolean response = api.deleteSecretV2(identifier, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Get the Secret by ID and Scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSecretV2Test() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOSecretResponse response = api.getSecretV2(identifier, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Fetches the list of Secrets corresponding to the request&#x27;s filter criteria.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSecretsV2Test() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        List<String> identifiers = null;
        String type = null;
        String searchTerm = null;
        List<String> types = null;
        String sourceCategory = null;
        Boolean includeSecretsFromEverySubScope = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        ResponseDTOPageResponseSecretResponse response = api.listSecretsV2(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, type, searchTerm, types, sourceCategory, includeSecretsFromEverySubScope, pageIndex, pageSize);

        // TODO: test validations
    }
    /**
     * Fetches the list of Secrets corresponding to the request&#x27;s filter criteria.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSecretsV3Test() throws Exception {
        String accountIdentifier = null;
        SecretResourceFilter body = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        ResponseDTOPageResponseSecretResponse response = api.listSecretsV3(accountIdentifier, body, orgIdentifier, projectIdentifier, pageIndex, pageSize);

        // TODO: test validations
    }
    /**
     * Creates a Secret at given Scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postSecretTest() throws Exception {
        SecretRequestWrapper body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        Boolean privateSecret = null;
        ResponseDTOSecretResponse response = api.postSecret(body, accountIdentifier, orgIdentifier, projectIdentifier, privateSecret);

        // TODO: test validations
    }
    /**
     * Creates a Secret File
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postSecretFileV2Test() throws Exception {
        String accountIdentifier = null;
        Object file = null;
        String spec = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        Boolean privateSecret = null;
        ResponseDTOSecretResponse response = api.postSecretFileV2(accountIdentifier, file, spec, orgIdentifier, projectIdentifier, privateSecret);

        // TODO: test validations
    }
    /**
     * Creates a secret via YAML
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postSecretViaYamlTest() throws Exception {
        SecretRequestWrapper body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        Boolean privateSecret = null;
        ResponseDTOSecretResponse response = api.postSecretViaYaml(body, accountIdentifier, orgIdentifier, projectIdentifier, privateSecret);

        // TODO: test validations
    }
    /**
     * Updates the Secret by ID and Scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putSecretTest() throws Exception {
        String accountIdentifier = null;
        String identifier = null;
        SecretRequestWrapper body = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOSecretResponse response = api.putSecret(accountIdentifier, identifier, body, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Updates the Secret file by ID and Scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putSecretFileV2Test() throws Exception {
        String accountIdentifier = null;
        String identifier = null;
        Object file = null;
        String spec = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOSecretResponse response = api.putSecretFileV2(accountIdentifier, identifier, file, spec, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Updates the Secret by ID and Scope via YAML
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putSecretViaYamlTest() throws Exception {
        SecretRequestWrapper body = null;
        String accountIdentifier = null;
        String identifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOSecretResponse response = api.putSecretViaYaml(body, accountIdentifier, identifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Validates Secret with the provided ID and Scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void validateSecretTest() throws Exception {
        SecretValidationMetaData body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String identifier = null;
        ResponseDTOSecretValidationResult response = api.validateSecret(body, accountIdentifier, orgIdentifier, projectIdentifier, identifier);

        // TODO: test validations
    }
    /**
     * Checks whether the identifier is unique or not
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void validateSecretIdentifierIsUniqueTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOBoolean response = api.validateSecretIdentifierIsUnique(identifier, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
}
