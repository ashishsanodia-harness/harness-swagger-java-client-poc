/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOListServiceAccount;
import io.swagger.client.model.ResponseDTOPageResponseServiceAccountAggregate;
import io.swagger.client.model.ResponseDTOServiceAccount;
import io.swagger.client.model.ResponseDTOServiceAccountAggregate;
import io.swagger.client.model.ServiceAccount;
import io.swagger.client.model.SortOrder;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ServiceAccountApi
 */
@Ignore
public class ServiceAccountApiTest {

    private final ServiceAccountApi api = new ServiceAccountApi();

    /**
     * Creates a Service Account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createServiceAccountTest() throws Exception {
        ServiceAccount body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOServiceAccount response = api.createServiceAccount(body, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Deletes Service Account by ID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteServiceAccountTest() throws Exception {
        String accountIdentifier = null;
        String identifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOBoolean response = api.deleteServiceAccount(accountIdentifier, identifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Get the Service Account by accountIdentifier and Service Account ID and Scope.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAggregatedServiceAccountTest() throws Exception {
        String accountIdentifier = null;
        String identifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOServiceAccountAggregate response = api.getAggregatedServiceAccount(accountIdentifier, identifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Fetches the list of Aggregated Service Accounts corresponding to the request&#x27;s filter criteria.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listAggregatedServiceAccountsTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        List<String> identifiers = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        String searchTerm = null;
        ResponseDTOPageResponseServiceAccountAggregate response = api.listAggregatedServiceAccounts(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm);

        // TODO: test validations
    }
    /**
     * Fetches the list of Service Accounts corresponding to the request&#x27;s filter criteria.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listServiceAccountTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        List<String> identifiers = null;
        ResponseDTOListServiceAccount response = api.listServiceAccount(accountIdentifier, orgIdentifier, projectIdentifier, identifiers);

        // TODO: test validations
    }
    /**
     * Updates the Service Account.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateServiceAccountTest() throws Exception {
        ServiceAccount body = null;
        String accountIdentifier = null;
        String identifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOServiceAccount response = api.updateServiceAccount(body, accountIdentifier, identifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
}
