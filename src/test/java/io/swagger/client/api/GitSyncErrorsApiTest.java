/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOGitSyncErrorCount;
import io.swagger.client.model.ResponseDTOPageResponseGitSyncError;
import io.swagger.client.model.ResponseDTOPageResponseGitSyncErrorAggregateByCommit;
import io.swagger.client.model.SortOrder;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for GitSyncErrorsApi
 */
@Ignore
public class GitSyncErrorsApiTest {

    private final GitSyncErrorsApi api = new GitSyncErrorsApi();

    /**
     * Get Errors Count for the given scope, Repo and Branch
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGitSyncErrorsCountTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String searchTerm = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOGitSyncErrorCount response = api.getGitSyncErrorsCount(accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * Lists Git to Harness Errors by file or connectivity errors for the given scope, Repo and Branch
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listGitSyncErrorsTest() throws Exception {
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String searchTerm = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean gitToHarness = null;
        ResponseDTOPageResponseGitSyncError response = api.listGitSyncErrors(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, gitToHarness);

        // TODO: test validations
    }
    /**
     * Lists Git to Harness Errors for the given Commit Id
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listGitToHarnessErrorForCommitTest() throws Exception {
        String commitId = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOPageResponseGitSyncError response = api.listGitToHarnessErrorForCommit(commitId, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * Lists Git to Harness Errors grouped by Commits for the given scope, Repo and Branch
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listGitToHarnessErrorsGroupedByCommitsTest() throws Exception {
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String searchTerm = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Integer numberOfErrorsInSummary = null;
        ResponseDTOPageResponseGitSyncErrorAggregateByCommit response = api.listGitToHarnessErrorsGroupedByCommits(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, numberOfErrorsInSummary);

        // TODO: test validations
    }
}
