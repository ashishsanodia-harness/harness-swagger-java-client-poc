/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.GitEnabled;
import io.swagger.client.model.GitSyncConfig;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for GitSyncApi
 */
@Ignore
public class GitSyncApiTest {

    private final GitSyncApi api = new GitSyncApi();

    /**
     * Creates Git Sync Config in given scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createGitSyncConfigTest() throws Exception {
        GitSyncConfig body = null;
        String accountIdentifier = null;
        GitSyncConfig response = api.createGitSyncConfig(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Lists Git Sync Config for the given scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGitSyncConfigListTest() throws Exception {
        String projectIdentifier = null;
        String orgIdentifier = null;
        String accountIdentifier = null;
        List<GitSyncConfig> response = api.getGitSyncConfigList(projectIdentifier, orgIdentifier, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Check whether Git Sync is enabled for given scope or not
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void isGitSyncEnabledTest() throws Exception {
        String accountIdentifier = null;
        String projectIdentifier = null;
        String orgIdentifier = null;
        GitEnabled response = api.isGitSyncEnabled(accountIdentifier, projectIdentifier, orgIdentifier);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putGitExperienceTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        api.putGitExperience(accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Update existing Git Sync Config default root folder by Identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDefaultFolderTest() throws Exception {
        String identifier = null;
        String folderIdentifier = null;
        String projectId = null;
        String organizationId = null;
        String accountId = null;
        GitSyncConfig response = api.updateDefaultFolder(identifier, folderIdentifier, projectId, organizationId, accountId);

        // TODO: test validations
    }
    /**
     * Update existing Git Sync Config by Identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateGitSyncConfigTest() throws Exception {
        GitSyncConfig body = null;
        String accountIdentifier = null;
        GitSyncConfig response = api.updateGitSyncConfig(body, accountIdentifier);

        // TODO: test validations
    }
}
