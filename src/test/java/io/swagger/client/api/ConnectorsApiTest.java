/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.google.gson.Gson;
import io.swagger.client.ApiClient;
import io.swagger.client.Configuration;
import io.swagger.client.JSON;
import io.swagger.client.model.Connector;
import io.swagger.client.model.ConnectorFilterProperties;
import io.swagger.client.model.ConnectorResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.GithubConnector;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOConnectorCatalogueResponse;
import io.swagger.client.model.ResponseDTOConnectorResponse;
import io.swagger.client.model.ResponseDTOConnectorStatistics;
import io.swagger.client.model.ResponseDTOConnectorValidationResult;
import io.swagger.client.model.ResponseDTOFieldValues;
import io.swagger.client.model.ResponseDTOListConnectorResponse;
import io.swagger.client.model.ResponseDTOPageResponseConnectorResponse;
import io.swagger.client.model.ResponseDTOString;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ConnectorsApi
 */
@Ignore
public class ConnectorsApiTest {

    private ConnectorsApi api = new ConnectorsApi();

    @Before
    public void setup(){
        ApiClient defaultClient = Configuration.getDefaultApiClient();
        defaultClient.setBasePath("https://app.harness.io/gateway");
        defaultClient.setVerifyingSsl(false);
        defaultClient.addDefaultHeader("x-api-key", "<replace-with-your-api-key>");
    }
    /**
     * Creates a Connector
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createConnectorTest() throws Exception {
        Connector body = null;
        String accountIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        String rootFolder = null;
        String filePath = null;
        String commitMsg = null;
        Boolean isNewBranch = null;
        String baseBranch = null;
        ResponseDTOConnectorResponse response = api.createConnector(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch);

        // TODO: test validations
    }
    /**
     * Deletes Connector by ID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteConnectorTest() throws Exception {
        String accountIdentifier = null;
        String identifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        String rootFolder = null;
        String filePath = null;
        String commitMsg = null;
        String lastObjectId = null;
        ResponseDTOBoolean response = api.deleteConnector(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId);

        // TODO: test validations
    }
    /**
     * Get the allowed field values by Connector Type
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllAllowedFieldValuesTest() throws Exception {
        String connectorType = null;
        ResponseDTOFieldValues response = api.getAllAllowedFieldValues(connectorType);

        // TODO: test validations
    }
    /**
     * Get the Template URL of connector
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCEAwsTemplateTest() throws Exception {
        Boolean eventsEnabled = null;
        Boolean curEnabled = null;
        Boolean optimizationEnabled = null;
        ResponseDTOString response = api.getCEAwsTemplate(eventsEnabled, curEnabled, optimizationEnabled);

        // TODO: test validations
    }
    /**
     * Get the Connector by accountIdentifier and connectorIdentifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectorTest() throws Exception {
        String accountIdentifier = null;
        String identifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOConnectorResponse response = api.getConnector(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        System.out.println("connectorResponse = " + response.getData());
        System.out.println("connectorResponse type = " + response.getData().getConnector().getType());

    }
    /**
     * Gets the Connector catalogue by Account Identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectorCatalogueTest() throws Exception {
        String accountIdentifier = null;
        ResponseDTOConnectorCatalogueResponse response = api.getConnectorCatalogue(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Fetches the list of Connectors corresponding to the request&#x27;s filter criteria.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectorListTest() throws Exception {
        String accountIdentifier = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String searchTerm = null;
        String type = null;
        String category = null;
        String sourceCategory = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;

        ResponseDTOPageResponseConnectorResponse response = api.getConnectorList(accountIdentifier, pageIndex, pageSize, orgIdentifier, projectIdentifier, searchTerm, type, category, sourceCategory, branch, repoIdentifier, getDefaultFromOtherRepo);

        System.out.println("response = " + response);
        System.out.println("status = " + response.getStatus());
        List<ConnectorResponse> content = response.getData().getContent();
        System.out.println("data = " + content);

        for (ConnectorResponse connectorResponse: content) {
            System.out.println("connectorResponse type = " + connectorResponse.getConnector().getType());
        }
        // TODO: test validations
    }
    /**
     * Fetches the list of Connectors corresponding to the request&#x27;s filter criteria.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectorListV2Test() throws Exception {
        ConnectorFilterProperties body = null;
        String accountIdentifier = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        String searchTerm = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String filterIdentifier = null;
        Boolean includeAllConnectorsAvailableAtScope = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean getDistinctFromBranches = null;
        ResponseDTOPageResponseConnectorResponse response = api.getConnectorListV2(body, accountIdentifier, pageIndex, pageSize, searchTerm, orgIdentifier, projectIdentifier, filterIdentifier, includeAllConnectorsAvailableAtScope, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches);

        // TODO: test validations
    }
    /**
     * Gets the connector&#x27;s statistics by Account Identifier, Project Identifier and Organization Identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectorStatisticsTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOConnectorStatistics response = api.getConnectorStatistics(accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * Tests the connection of the Connector by ID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTestConnectionResultTest() throws Exception {
        String accountIdentifier = null;
        String identifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOConnectorValidationResult response = api.getTestConnectionResult(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * Tests the Git Repo connection
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTestGitRepoConnectionResultTest() throws Exception {
        String accountIdentifier = null;
        String identifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String repoURL = null;
        ResponseDTOConnectorValidationResult response = api.getTestGitRepoConnectionResult(accountIdentifier, identifier, orgIdentifier, projectIdentifier, repoURL);

        // TODO: test validations
    }
    /**
     * Get the list of connectors by FQN satisfying the criteria (if any) in the request
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listConnectorByFQNTest() throws Exception {
        List<String> body = null;
        String accountIdentifier = null;
        ResponseDTOListConnectorResponse response = api.listConnectorByFQN(body, accountIdentifier);

        // TODO: test validations
    }
    /**
     * Updates the Connector
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateConnectorTest() throws Exception {
        Connector body = null;
        String accountIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        String rootFolder = null;
        String filePath = null;
        String commitMsg = null;
        String lastObjectId = null;
        String baseBranch = null;
        ResponseDTOConnectorResponse response = api.updateConnector(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch);

        // TODO: test validations
    }
    /**
     * Validate the Connector by Account Identifier and Connector Identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void validateTheIdentifierIsUniqueTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String identifier = null;
        ResponseDTOBoolean response = api.validateTheIdentifierIsUnique(accountIdentifier, orgIdentifier, projectIdentifier, identifier);

        // TODO: test validations
    }
}
