/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ACLAggregateFilter;
import io.swagger.client.model.AddUsersDTO;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.PasswordChange;
import io.swagger.client.model.ResponseDTOActiveProjectsCount;
import io.swagger.client.model.ResponseDTOAddUsersResponse;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOListProject;
import io.swagger.client.model.ResponseDTOPageResponseProject;
import io.swagger.client.model.ResponseDTOPageResponseUserAggregate;
import io.swagger.client.model.ResponseDTOPageResponseUserMetadata;
import io.swagger.client.model.ResponseDTOPasswordChangeResponse;
import io.swagger.client.model.ResponseDTOTwoFactorAuthSettingsInfo;
import io.swagger.client.model.ResponseDTOUserAggregate;
import io.swagger.client.model.ResponseDTOUserInfo;
import io.swagger.client.model.SortOrder;
import io.swagger.client.model.TwoFactorAuthSettingsInfo;
import io.swagger.client.model.UserFilter;
import io.swagger.client.model.UserInfo;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Add user(s) to given scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addUsersTest() throws Exception {
        AddUsersDTO body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOAddUsersResponse response = api.addUsers(body, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Updates the User password
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void changeUserPasswordTest() throws Exception {
        PasswordChange body = null;
        ResponseDTOPasswordChangeResponse response = api.changeUserPassword(body);

        // TODO: test validations
    }
    /**
     * Boolean status whether the user is last admin at scope or not
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkIfLastAdminTest() throws Exception {
        String accountIdentifier = null;
        String userId = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOBoolean response = api.checkIfLastAdmin(accountIdentifier, userId, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Disables two-factor-auth for an user in an account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void disableTTwoFactorAuthTest() throws Exception {
        String routingId = null;
        ResponseDTOUserInfo response = api.disableTTwoFactorAuth(routingId);

        // TODO: test validations
    }
    /**
     * Enables two-factor-auth for an user in an account
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void enableTwoFactorAuthTest() throws Exception {
        TwoFactorAuthSettingsInfo body = null;
        String routingId = null;
        ResponseDTOUserInfo response = api.enableTwoFactorAuth(body, routingId);

        // TODO: test validations
    }
    /**
     * Count of projects that are accessible to a user filtered by CreatedAt time
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccessibleProjectsCountTest() throws Exception {
        String accountIdentifier = null;
        String userId = null;
        Long startTime = null;
        Long endTime = null;
        ResponseDTOActiveProjectsCount response = api.getAccessibleProjectsCount(accountIdentifier, userId, startTime, endTime);

        // TODO: test validations
    }
    /**
     * Returns the user metadata along with rolesAssignments by userId and scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAggregatedUserTest() throws Exception {
        String userId = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOUserAggregate response = api.getAggregatedUser(userId, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * List of all the user&#x27;s metadata along with rolesAssignments who have access to given scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAggregatedUsersTest() throws Exception {
        String accountIdentifier = null;
        ACLAggregateFilter body = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String searchTerm = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        ResponseDTOPageResponseUserAggregate response = api.getAggregatedUsers(accountIdentifier, body, orgIdentifier, projectIdentifier, searchTerm, pageIndex, pageSize, sortOrders);

        // TODO: test validations
    }
    /**
     * List of current gen users with the given Account Identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCurrentGenUsersTest() throws Exception {
        String accountIdentifier = null;
        String searchString = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        ResponseDTOPageResponseUserMetadata response = api.getCurrentGenUsers(accountIdentifier, searchString, pageIndex, pageSize, sortOrders);

        // TODO: test validations
    }
    /**
     * Gets current logged in User information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserInfoTest() throws Exception {
        String accountIdentifier = null;
        ResponseDTOUserInfo response = api.getCurrentUserInfo(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Gets two factor authentication settings information of the current logged in user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTwoFactorAuthSettingsTest() throws Exception {
        String authMechanism = null;
        ResponseDTOTwoFactorAuthSettingsInfo response = api.getTwoFactorAuthSettings(authMechanism);

        // TODO: test validations
    }
    /**
     * list of project(s) of current user in the passed account Id in form of List
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserAllProjectsInfoTest() throws Exception {
        String accountId = null;
        String userId = null;
        ResponseDTOListProject response = api.getUserAllProjectsInfo(accountId, userId);

        // TODO: test validations
    }
    /**
     * Retrieves the list of projects of the current user corresponding to the specified Account Identifier.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserProjectInfoTest() throws Exception {
        String accountId = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        ResponseDTOPageResponseProject response = api.getUserProjectInfo(accountId, pageIndex, pageSize, sortOrders);

        // TODO: test validations
    }
    /**
     * List of user&#x27;s Metadata for a given scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws Exception {
        String accountIdentifier = null;
        UserFilter body = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        ResponseDTOPageResponseUserMetadata response = api.getUsers(accountIdentifier, body, orgIdentifier, projectIdentifier, pageIndex, pageSize, sortOrders);

        // TODO: test validations
    }
    /**
     * Remove user as the collaborator from the scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeUserTest() throws Exception {
        String userId = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOBoolean response = api.removeUser(userId, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * unlock user in a given scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unlockUserTest() throws Exception {
        String userId = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOUserInfo response = api.unlockUser(userId, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Updates the User information
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateUserInfoTest() throws Exception {
        UserInfo body = null;
        ResponseDTOUserInfo response = api.updateUserInfo(body);

        // TODO: test validations
    }
}
