/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTONGTriggerDetailsResponseDTO;
import io.swagger.client.model.ResponseDTONGTriggerResponse;
import io.swagger.client.model.ResponseDTOPageResponseNGTriggerDetailsResponseDTO;
import io.swagger.client.model.RestResponseString;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for TriggersApi
 */
@Ignore
public class TriggersApiTest {

    private final TriggersApi api = new TriggersApi();

    /**
     * Creates Trigger for triggering target pipeline identifier.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTriggerTest() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String targetIdentifier = null;
        ResponseDTONGTriggerResponse response = api.createTrigger(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier);

        // TODO: test validations
    }
    /**
     * Deletes Trigger by identifier.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTriggerTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String targetIdentifier = null;
        String triggerIdentifier = null;
        String ifMatch = null;
        ResponseDTOBoolean response = api.deleteTrigger(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch);

        // TODO: test validations
    }
    /**
     * Generates random webhook token for new triggers.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void generateWebhookTokenTest() throws Exception {
        RestResponseString response = api.generateWebhookToken();

        // TODO: test validations
    }
    /**
     * Gets the paginated list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListForTargetTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String targetIdentifier = null;
        String filter = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        String searchTerm = null;
        ResponseDTOPageResponseNGTriggerDetailsResponseDTO response = api.getListForTarget(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, filter, page, size, sort, searchTerm);

        // TODO: test validations
    }
    /**
     * Gets the trigger by accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier and triggerIdentifier.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTriggerTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String targetIdentifier = null;
        String triggerIdentifier = null;
        ResponseDTONGTriggerResponse response = api.getTrigger(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier);

        // TODO: test validations
    }
    /**
     * Gets the list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTriggerDetailsTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String triggerIdentifier = null;
        String targetIdentifier = null;
        ResponseDTONGTriggerDetailsResponseDTO response = api.getTriggerDetails(accountIdentifier, orgIdentifier, projectIdentifier, triggerIdentifier, targetIdentifier);

        // TODO: test validations
    }
    /**
     * Updates trigger for pipeline with target pipeline identifier.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTriggerTest() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String targetIdentifier = null;
        String triggerIdentifier = null;
        String ifMatch = null;
        ResponseDTONGTriggerResponse response = api.updateTrigger(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch);

        // TODO: test validations
    }
    /**
     * Activates or deactivate trigger for pipeline with target pipeline identifier.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTriggerStatusTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String targetIdentifier = null;
        String triggerIdentifier = null;
        Boolean status = null;
        ResponseDTOBoolean response = api.updateTriggerStatus(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, status);

        // TODO: test validations
    }
}
