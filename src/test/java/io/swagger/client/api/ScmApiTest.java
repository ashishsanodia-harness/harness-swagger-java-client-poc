/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.GitPRCreateRequest;
import io.swagger.client.model.ResponseDTOGitFileContent;
import io.swagger.client.model.ResponseDTOListString;
import io.swagger.client.model.ResponseDTOPRDetails;
import io.swagger.client.model.ResponseDTOSaasGit;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ScmApi
 */
@Ignore
public class ScmApiTest {

    private final ScmApi api = new ScmApi();

    /**
     * creates a Pull Request
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPRTest() throws Exception {
        GitPRCreateRequest body = null;
        ResponseDTOPRDetails response = api.createPR(body);

        // TODO: test validations
    }
    /**
     * Gets Git File Content
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFileContentTest() throws Exception {
        String yamlGitConfigIdentifier = null;
        String accountIdentifier = null;
        String filePath = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String branch = null;
        String commitId = null;
        ResponseDTOGitFileContent response = api.getFileContent(yamlGitConfigIdentifier, accountIdentifier, filePath, orgIdentifier, projectIdentifier, branch, commitId);

        // TODO: test validations
    }
    /**
     * Lists Branches of given Repo by referenced Connector Identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListOfBranchesByConnectorTest() throws Exception {
        String connectorIdentifierRef = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String repoURL = null;
        Integer page = null;
        Integer size = null;
        String searchTerm = null;
        ResponseDTOListString response = api.getListOfBranchesByConnector(connectorIdentifierRef, accountIdentifier, orgIdentifier, projectIdentifier, repoURL, page, size, searchTerm);

        // TODO: test validations
    }
    /**
     * Lists Branches by given Git Sync Config Id
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListOfBranchesByGitConfigTest() throws Exception {
        String yamlGitConfigIdentifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        Integer page = null;
        Integer size = null;
        String searchTerm = null;
        ResponseDTOListString response = api.getListOfBranchesByGitConfig(yamlGitConfigIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, page, size, searchTerm);

        // TODO: test validations
    }
    /**
     * Checks if Saas is possible for given Repo Url
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void isSaasGitTest() throws Exception {
        String repoURL = null;
        ResponseDTOSaasGit response = api.isSaasGit(repoURL);

        // TODO: test validations
    }
}
