/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.MergeInputSetRequest;
import io.swagger.client.model.ResponseDTOInterruptResponse;
import io.swagger.client.model.ResponseDTOListStageExecutionResponse;
import io.swagger.client.model.ResponseDTOPlanExecutionResponse;
import io.swagger.client.model.ResponseDTOPreFlightDTO;
import io.swagger.client.model.ResponseDTORetryHistoryResponse;
import io.swagger.client.model.ResponseDTORetryInfo;
import io.swagger.client.model.ResponseDTORetryLatestExecutionResponse;
import io.swagger.client.model.ResponseDTOString;
import io.swagger.client.model.RunStageRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ExecuteApi
 */
@Ignore
public class ExecuteApiTest {

    private final ExecuteApi api = new ExecuteApi();

    /**
     * Get Preflight Checks Response for a Preflight Id
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPreFlightCheckResponseTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String preflightCheckId = null;
        String body = null;
        ResponseDTOPreFlightDTO response = api.getPreFlightCheckResponse(accountIdentifier, orgIdentifier, projectIdentifier, preflightCheckId, body);

        // TODO: test validations
    }
    /**
     * Get retry stages for failed pipeline
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRetryStagesTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String planExecutionId = null;
        String pipelineIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTORetryInfo response = api.getRetryStages(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * Get list of Stages to select for Stage executions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getStagesExecutionListTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOListStageExecutionResponse response = api.getStagesExecutionList(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * Handles Ignore,Abort,MarkAsSuccess,Retry on post manual intervention for a given execution with the given planExecutionId
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void handleManualInterventionInterruptTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String interruptType = null;
        String planExecutionId = null;
        String nodeExecutionId = null;
        ResponseDTOInterruptResponse response = api.handleManualInterventionInterrupt(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId);

        // TODO: test validations
    }
    /**
     * Handles the interrupt for a given stage in a pipeline
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void handleStageInterruptTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String interruptType = null;
        String planExecutionId = null;
        String nodeExecutionId = null;
        ResponseDTOInterruptResponse response = api.handleStageInterrupt(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId);

        // TODO: test validations
    }
    /**
     * Latest ExecutionId from Retry Executions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void latestExecutionIdTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String planExecutionId = null;
        ResponseDTORetryLatestExecutionResponse response = api.latestExecutionId(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId);

        // TODO: test validations
    }
    /**
     * Execute given Stages of a Pipeline
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postExecuteStagesTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        String identifier = null;
        RunStageRequest body = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean useFQNIfError = null;
        ResponseDTOPlanExecutionResponse response = api.postExecuteStages(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);

        // TODO: test validations
    }
    /**
     * Execute a pipeline with input set references list
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPipelineExecuteWithInputSetListTest() throws Exception {
        MergeInputSetRequest body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        String identifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean useFQNIfError = null;
        ResponseDTOPlanExecutionResponse response = api.postPipelineExecuteWithInputSetList(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);

        // TODO: test validations
    }
    /**
     * Execute a pipeline with inputSet pipeline yaml
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPipelineExecuteWithInputSetYamlTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        String identifier = null;
        String body = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean useFQNIfError = null;
        ResponseDTOPlanExecutionResponse response = api.postPipelineExecuteWithInputSetYaml(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);

        // TODO: test validations
    }
    /**
     * Execute a pipeline with inputSet pipeline yaml V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPipelineExecuteWithInputSetYamlv2Test() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        String identifier = null;
        String body = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean useFQNIfError = null;
        ResponseDTOPlanExecutionResponse response = api.postPipelineExecuteWithInputSetYamlv2(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);

        // TODO: test validations
    }
    /**
     * Re-run given Stages of a Pipeline
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postReExecuteStagesTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        String identifier = null;
        String originalExecutionId = null;
        RunStageRequest body = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean useFQNIfError = null;
        ResponseDTOPlanExecutionResponse response = api.postReExecuteStages(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, originalExecutionId, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);

        // TODO: test validations
    }
    /**
     * Execute an Interrupt on an execution
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putHandleInterruptTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String interruptType = null;
        String planExecutionId = null;
        ResponseDTOInterruptResponse response = api.putHandleInterrupt(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId);

        // TODO: test validations
    }
    /**
     * Re Execute a pipeline with inputSet pipeline yaml
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rePostPipelineExecuteWithInputSetYamlTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        String originalExecutionId = null;
        String identifier = null;
        String body = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean useFQNIfError = null;
        ResponseDTOPlanExecutionResponse response = api.rePostPipelineExecuteWithInputSetYaml(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);

        // TODO: test validations
    }
    /**
     * Re Execute a pipeline with InputSet Pipeline YAML Version 2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rePostPipelineExecuteWithInputSetYamlV2Test() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        String originalExecutionId = null;
        String identifier = null;
        String body = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean useFQNIfError = null;
        ResponseDTOPlanExecutionResponse response = api.rePostPipelineExecuteWithInputSetYamlV2(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);

        // TODO: test validations
    }
    /**
     * Rerun a pipeline with given inputSet identifiers
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rerunPipelineWithInputSetIdentifierListTest() throws Exception {
        MergeInputSetRequest body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        Boolean useFQNIfError = null;
        String originalExecutionId = null;
        String identifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOPlanExecutionResponse response = api.rerunPipelineWithInputSetIdentifierList(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, useFQNIfError, originalExecutionId, identifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * Retry History for a given execution
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retryHistoryTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String planExecutionId = null;
        ResponseDTORetryHistoryResponse response = api.retryHistory(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId);

        // TODO: test validations
    }
    /**
     * Retry a executed pipeline with inputSet pipeline yaml
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retryPipelineTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String moduleType = null;
        String planExecutionId = null;
        List<String> retryStages = null;
        String identifier = null;
        String body = null;
        Boolean runAllStages = null;
        ResponseDTOPlanExecutionResponse response = api.retryPipeline(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, planExecutionId, retryStages, identifier, body, runAllStages);

        // TODO: test validations
    }
    /**
     * Start Preflight Checks for a Pipeline
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void startPreFlightCheckTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String body = null;
        String pipelineIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOString response = api.startPreFlightCheck(accountIdentifier, orgIdentifier, projectIdentifier, body, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
}
