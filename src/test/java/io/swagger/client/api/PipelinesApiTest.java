/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.FilterProperties;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOExecutionNode;
import io.swagger.client.model.ResponseDTOPMSPipelineResponse;
import io.swagger.client.model.ResponseDTOPMSPipelineSummaryResponse;
import io.swagger.client.model.ResponseDTOPagePMSPipelineSummaryResponse;
import io.swagger.client.model.ResponseDTOPipelineExpandedJson;
import io.swagger.client.model.ResponseDTOPipelineSaveResponse;
import io.swagger.client.model.ResponseDTOStepCategory;
import io.swagger.client.model.ResponseDTOString;
import io.swagger.client.model.ResponseDTOVariableMergeServiceResponse;
import io.swagger.client.model.StepPalleteFilterWrapper;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PipelinesApi
 */
@Ignore
public class PipelinesApiTest {

    private final PipelinesApi api = new PipelinesApi();

    /**
     * Get all the Variables which can be used as expression in the Pipeline.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createVariablesTest() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOVariableMergeServiceResponse response = api.createVariables(body, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Deletes a Pipeline
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePipelineTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String ifMatch = null;
        String branch = null;
        String repoIdentifier = null;
        String rootFolder = null;
        String filePath = null;
        String commitMsg = null;
        String lastObjectId = null;
        ResponseDTOBoolean response = api.deletePipeline(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId);

        // TODO: test validations
    }
    /**
     * Get the Execution Node by Execution Id
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getExecutionNodeTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String nodeExecutionId = null;
        ResponseDTOExecutionNode response = api.getExecutionNode(accountIdentifier, orgIdentifier, projectIdentifier, nodeExecutionId);

        // TODO: test validations
    }
    /**
     * Gets Pipeline JSON with extra info for some fields
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getExpandedPipelineJSONTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOPipelineExpandedJson response = api.getExpandedPipelineJSON(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNotificationSchemaTest() throws Exception {
        api.getNotificationSchema();

        // TODO: test validations
    }
    /**
     * Gets a Pipeline by identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOPMSPipelineResponse response = api.getPipeline(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * List of pipelines
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineListTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        FilterProperties body = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        String searchTerm = null;
        String module = null;
        String filterIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        Boolean getDistinctFromBranches = null;
        ResponseDTOPagePMSPipelineSummaryResponse response = api.getPipelineList(accountIdentifier, orgIdentifier, projectIdentifier, body, page, size, sort, searchTerm, module, filterIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches);

        // TODO: test validations
    }
    /**
     * Gets pipeline summary by pipeline identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineSummaryTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        Boolean getDefaultFromOtherRepo = null;
        ResponseDTOPMSPipelineSummaryResponse response = api.getPipelineSummary(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPmsStepNodesTest() throws Exception {
        api.getPmsStepNodes();

        // TODO: test validations
    }
    /**
     * Gets all the Steps for given Category
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getStepsTest() throws Exception {
        String category = null;
        String module = null;
        String accountId = null;
        ResponseDTOStepCategory response = api.getSteps(category, module, accountId);

        // TODO: test validations
    }
    /**
     * Gets all the Steps for given Category (V2 Version)
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getStepsV2Test() throws Exception {
        StepPalleteFilterWrapper body = null;
        String accountId = null;
        ResponseDTOStepCategory response = api.getStepsV2(body, accountId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTemplateStepNodeTest() throws Exception {
        api.getTemplateStepNode();

        // TODO: test validations
    }
    /**
     * Create a Pipeline
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPipelineTest() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        String rootFolder = null;
        String filePath = null;
        String commitMsg = null;
        Boolean isNewBranch = null;
        String baseBranch = null;
        ResponseDTOString response = api.postPipeline(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch);

        // TODO: test validations
    }
    /**
     * Create a Pipeline API (V2 Version)
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPipelineV2Test() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String branch = null;
        String repoIdentifier = null;
        String rootFolder = null;
        String filePath = null;
        String commitMsg = null;
        Boolean isNewBranch = null;
        String baseBranch = null;
        ResponseDTOPipelineSaveResponse response = api.postPipelineV2(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch);

        // TODO: test validations
    }
    /**
     * Refresh the feature flag cache
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void refreshFFCacheTest() throws Exception {
        String accountIdentifier = null;
        ResponseDTOBoolean response = api.refreshFFCache(accountIdentifier);

        // TODO: test validations
    }
    /**
     * Update a Pipeline by identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePipelineTest() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String ifMatch = null;
        String branch = null;
        String repoIdentifier = null;
        String rootFolder = null;
        String filePath = null;
        String commitMsg = null;
        String lastObjectId = null;
        String baseBranch = null;
        ResponseDTOString response = api.updatePipeline(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch);

        // TODO: test validations
    }
    /**
     * Updates a Pipeline by identifier (V2 Version)
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePipelineV2Test() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String ifMatch = null;
        String branch = null;
        String repoIdentifier = null;
        String rootFolder = null;
        String filePath = null;
        String commitMsg = null;
        String lastObjectId = null;
        String baseBranch = null;
        ResponseDTOPipelineSaveResponse response = api.updatePipelineV2(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch);

        // TODO: test validations
    }
}
