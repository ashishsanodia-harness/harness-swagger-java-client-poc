/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.AccessDeniedError;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOListRoleAssignmentResponse;
import io.swagger.client.model.ResponseDTOPageResponseRoleAssignmentResponse;
import io.swagger.client.model.ResponseDTORoleAssignmentAggregateResponse;
import io.swagger.client.model.ResponseDTORoleAssignmentResponse;
import io.swagger.client.model.ResponseDTORoleAssignmentValidationResponse;
import io.swagger.client.model.RoleAssignment;
import io.swagger.client.model.RoleAssignmentCreateRequest;
import io.swagger.client.model.RoleAssignmentFilter;
import io.swagger.client.model.RoleAssignmentValidationRequest;
import io.swagger.client.model.SortOrder;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for RoleAssignmentsApi
 */
@Ignore
public class RoleAssignmentsApiTest {

    private final RoleAssignmentsApi api = new RoleAssignmentsApi();

    /**
     * Delete an existing role assignment by identifier
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRoleAssignmentTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTORoleAssignmentResponse response = api.deleteRoleAssignment(identifier, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * List role assignments in the scope according to the given filter
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFilteredRoleAssignmentListTest() throws Exception {
        RoleAssignmentFilter body = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOPageResponseRoleAssignmentResponse response = api.getFilteredRoleAssignmentList(body, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * List role assignments in the scope according to the given filter with added metadata
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRoleAssignmentAggregateListTest() throws Exception {
        RoleAssignmentFilter body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTORoleAssignmentAggregateResponse response = api.getRoleAssignmentAggregateList(body, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * List role assignments in the given scope
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRoleAssignmentListTest() throws Exception {
        Integer pageIndex = null;
        Integer pageSize = null;
        List<SortOrder> sortOrders = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOPageResponseRoleAssignmentResponse response = api.getRoleAssignmentList(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Creates role assignment within the specified scope.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postRoleAssignmentTest() throws Exception {
        RoleAssignment body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTORoleAssignmentResponse response = api.postRoleAssignment(body, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Create multiple role assignments in a scope. Returns all successfully created role assignments. Ignores failures and duplicates.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postRoleAssignmentsTest() throws Exception {
        RoleAssignmentCreateRequest body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOListRoleAssignmentResponse response = api.postRoleAssignments(body, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Update existing role assignment by identifier and scope. Only changing the disabled/enabled state is allowed.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putRoleAssignmentTest() throws Exception {
        RoleAssignment body = null;
        String identifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTORoleAssignmentResponse response = api.putRoleAssignment(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Check whether a proposed role assignment is valid.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void validateRoleAssignmentTest() throws Exception {
        RoleAssignmentValidationRequest body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTORoleAssignmentValidationResponse response = api.validateRoleAssignment(body, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
}
