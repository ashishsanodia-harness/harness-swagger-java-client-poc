/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTODashboardPipelineExecution;
import io.swagger.client.model.ResponseDTODashboardPipelineHealth;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PipelinesDashboardApi
 */
@Ignore
public class PipelinesDashboardApiTest {

    private final PipelinesDashboardApi api = new PipelinesDashboardApi();

    /**
     * Fetches Pipeline Executions details for a given Interval and will be presented in day wise format
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineDashboardExecutionTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String moduleInfo = null;
        Long startTime = null;
        Long endTime = null;
        ResponseDTODashboardPipelineExecution response = api.getPipelineDashboardExecution(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime);

        // TODO: test validations
    }
    /**
     * Fetches Pipeline Executions details for a given Interval and will be presented in day wise format
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineExecutionTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String moduleInfo = null;
        Long startTime = null;
        Long endTime = null;
        ResponseDTODashboardPipelineExecution response = api.getPipelineExecution(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime);

        // TODO: test validations
    }
    /**
     * Fetches Pipeline Health data for a given Interval and will be presented in day wise format 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelinedHealthTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String moduleInfo = null;
        Long startTime = null;
        Long endTime = null;
        ResponseDTODashboardPipelineHealth response = api.getPipelinedHealth(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime);

        // TODO: test validations
    }
    /**
     * Fetches Pipeline Health data for a given Interval and will be presented in day wise format
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelinedHealth1Test() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String moduleInfo = null;
        Long startTime = null;
        Long endTime = null;
        ResponseDTODashboardPipelineHealth response = api.getPipelinedHealth1(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime);

        // TODO: test validations
    }
}
