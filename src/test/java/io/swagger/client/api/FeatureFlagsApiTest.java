/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CfError;
import io.swagger.client.model.Feature;
import io.swagger.client.model.Features;
import io.swagger.client.model.GitSyncPatchOperation;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for FeatureFlagsApi
 */
@Ignore
public class FeatureFlagsApiTest {

    private final FeatureFlagsApi api = new FeatureFlagsApi();

    /**
     * Creates a Feature Flag
     *
     * Creates a Feature Flag in the Project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createFeatureFlagTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        Object body = null;
        api.createFeatureFlag(accountIdentifier, orgIdentifier, body);

        // TODO: test validations
    }
    /**
     * Delete a Feature Flag
     *
     * Delete Feature Flag for the given identifier and account ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteFeatureFlagTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String commitMsg = null;
        api.deleteFeatureFlag(identifier, accountIdentifier, orgIdentifier, projectIdentifier, commitMsg);

        // TODO: test validations
    }
    /**
     * Returns all Feature Flags for the project
     *
     * Returns all the Feature Flag details for the given project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllFeaturesTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String environmentIdentifier = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        String sortOrder = null;
        String sortByField = null;
        String name = null;
        String identifier = null;
        Boolean archived = null;
        String kind = null;
        String targetIdentifier = null;
        Boolean metrics = null;
        Features response = api.getAllFeatures(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier, archived, kind, targetIdentifier, metrics);

        // TODO: test validations
    }
    /**
     * Returns a Feature Flag
     *
     * Returns details such as Variation name, identifier etc for the given Feature Flag
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFeatureFlagTest() throws Exception {
        String identifier = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String environmentIdentifier = null;
        Feature response = api.getFeatureFlag(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier);

        // TODO: test validations
    }
    /**
     * Updates a Feature Flag
     *
     * This operation is used to modify a Feature Flag.  The request body can include one or more instructions that can modify flag attributes such as the state (off|on), the variations that are returned and serving rules. For example if you want to turn a flag off you can use this opeartion and send the setFeatureFlagState  {   \&quot;kind\&quot;: \&quot;setFeatureFlagState\&quot;,   \&quot;parameters\&quot;: {     \&quot;state\&quot;: \&quot;off\&quot;   } } 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchFeatureTest() throws Exception {
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String identifier = null;
        GitSyncPatchOperation body = null;
        String environmentIdentifier = null;
        Feature response = api.patchFeature(accountIdentifier, orgIdentifier, projectIdentifier, identifier, body, environmentIdentifier);

        // TODO: test validations
    }
}
