/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOListBitbucketPRAction;
import io.swagger.client.model.ResponseDTOListBitbucketTriggerEvent;
import io.swagger.client.model.ResponseDTOListGithubIssueCommentAction;
import io.swagger.client.model.ResponseDTOListGithubPRAction;
import io.swagger.client.model.ResponseDTOListGithubTriggerEvent;
import io.swagger.client.model.ResponseDTOListGitlabPRAction;
import io.swagger.client.model.ResponseDTOListGitlabTriggerEvent;
import io.swagger.client.model.ResponseDTOListWebhookAction;
import io.swagger.client.model.ResponseDTOListWebhookTriggerType;
import io.swagger.client.model.ResponseDTOMapStringMapStringListString;
import io.swagger.client.model.ResponseDTOMapWebhookSourceRepoListWebhookEvent;
import io.swagger.client.model.ResponseDTOString;
import io.swagger.client.model.ResponseDTOWebhookEventProcessingDetails;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for WebhookTriggersApi
 */
@Ignore
public class WebhookTriggersApiTest {

    private final WebhookTriggersApi api = new WebhookTriggersApi();

    /**
     * Gets webhook event processing details for input eventId.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void fetchWebhookDetailsTest() throws Exception {
        String accountIdentifier = null;
        String eventId = null;
        ResponseDTOWebhookEventProcessingDetails response = api.fetchWebhookDetails(accountIdentifier, eventId);

        // TODO: test validations
    }
    /**
     * Get all supported actions for event type and source.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getActionsListTest() throws Exception {
        String sourceRepo = null;
        String event = null;
        ResponseDTOListWebhookAction response = api.getActionsList(sourceRepo, event);

        // TODO: test validations
    }
    /**
     * Gets all supported Bitbucket PR event actions.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBitbucketPRActionsTest() throws Exception {
        ResponseDTOListBitbucketPRAction response = api.getBitbucketPRActions();

        // TODO: test validations
    }
    /**
     * Gets all supported Bitbucket trigger events.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBitbucketTriggerEventsTest() throws Exception {
        ResponseDTOListBitbucketTriggerEvent response = api.getBitbucketTriggerEvents();

        // TODO: test validations
    }
    /**
     * Gets trigger git actions for each supported event.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGitTriggerEventDetailsTest() throws Exception {
        ResponseDTOMapStringMapStringListString response = api.getGitTriggerEventDetails();

        // TODO: test validations
    }
    /**
     * Gets all supported Github Issue comment event actions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGithubIssueCommentActionsTest() throws Exception {
        ResponseDTOListGithubIssueCommentAction response = api.getGithubIssueCommentActions();

        // TODO: test validations
    }
    /**
     * Gets all supported Github PR event actions
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGithubPRActionsTest() throws Exception {
        ResponseDTOListGithubPRAction response = api.getGithubPRActions();

        // TODO: test validations
    }
    /**
     * Gets all supported Github trigger events.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGithubTriggerEventsTest() throws Exception {
        ResponseDTOListGithubTriggerEvent response = api.getGithubTriggerEvents();

        // TODO: test validations
    }
    /**
     * Gets all supported GitLab PR event actions.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGitlabPRActionsTest() throws Exception {
        ResponseDTOListGitlabPRAction response = api.getGitlabPRActions();

        // TODO: test validations
    }
    /**
     * Gets all supported Gitlab trigger events.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGitlabTriggerEventsTest() throws Exception {
        ResponseDTOListGitlabTriggerEvent response = api.getGitlabTriggerEvents();

        // TODO: test validations
    }
    /**
     * Gets source repo types with all supported events.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSourceReposTest() throws Exception {
        ResponseDTOMapWebhookSourceRepoListWebhookEvent response = api.getSourceRepos();

        // TODO: test validations
    }
    /**
     * Gets all supported scm webhook type.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getWebhookTriggerTypesTest() throws Exception {
        ResponseDTOListWebhookTriggerType response = api.getWebhookTriggerTypes();

        // TODO: test validations
    }
    /**
     * Handles event payload for webhook triggers.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pipelineprocessWebhookEventTest() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        ResponseDTOString response = api.pipelineprocessWebhookEvent(body, accountIdentifier, orgIdentifier, projectIdentifier);

        // TODO: test validations
    }
    /**
     * Handles event payload for custom webhook triggers.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void processCustomWebhookEventTest() throws Exception {
        String body = null;
        String accountIdentifier = null;
        String orgIdentifier = null;
        String projectIdentifier = null;
        String pipelineIdentifier = null;
        String triggerIdentifier = null;
        ResponseDTOString response = api.processCustomWebhookEvent(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, triggerIdentifier);

        // TODO: test validations
    }
}
