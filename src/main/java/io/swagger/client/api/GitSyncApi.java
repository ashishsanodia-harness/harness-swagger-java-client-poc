/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.GitEnabled;
import io.swagger.client.model.GitSyncConfig;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GitSyncApi {
    private ApiClient apiClient;

    public GitSyncApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GitSyncApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createGitSyncConfig
     * @param body Details of Git Sync Config (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGitSyncConfigCall(GitSyncConfig body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml", "text/html", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGitSyncConfigValidateBeforeCall(GitSyncConfig body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createGitSyncConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = createGitSyncConfigCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates Git Sync Config in given scope
     * 
     * @param body Details of Git Sync Config (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @return GitSyncConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GitSyncConfig createGitSyncConfig(GitSyncConfig body, String accountIdentifier) throws ApiException {
        ApiResponse<GitSyncConfig> resp = createGitSyncConfigWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Creates Git Sync Config in given scope
     * 
     * @param body Details of Git Sync Config (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @return ApiResponse&lt;GitSyncConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GitSyncConfig> createGitSyncConfigWithHttpInfo(GitSyncConfig body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createGitSyncConfigValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<GitSyncConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Git Sync Config in given scope (asynchronously)
     * 
     * @param body Details of Git Sync Config (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGitSyncConfigAsync(GitSyncConfig body, String accountIdentifier, final ApiCallback<GitSyncConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGitSyncConfigValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GitSyncConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGitSyncConfigList
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGitSyncConfigListCall(String projectIdentifier, String orgIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGitSyncConfigListValidateBeforeCall(String projectIdentifier, String orgIdentifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getGitSyncConfigListCall(projectIdentifier, orgIdentifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists Git Sync Config for the given scope
     * 
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @return List&lt;GitSyncConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GitSyncConfig> getGitSyncConfigList(String projectIdentifier, String orgIdentifier, String accountIdentifier) throws ApiException {
        ApiResponse<List<GitSyncConfig>> resp = getGitSyncConfigListWithHttpInfo(projectIdentifier, orgIdentifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Lists Git Sync Config for the given scope
     * 
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @return ApiResponse&lt;List&lt;GitSyncConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GitSyncConfig>> getGitSyncConfigListWithHttpInfo(String projectIdentifier, String orgIdentifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getGitSyncConfigListValidateBeforeCall(projectIdentifier, orgIdentifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<GitSyncConfig>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists Git Sync Config for the given scope (asynchronously)
     * 
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGitSyncConfigListAsync(String projectIdentifier, String orgIdentifier, String accountIdentifier, final ApiCallback<List<GitSyncConfig>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGitSyncConfigListValidateBeforeCall(projectIdentifier, orgIdentifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GitSyncConfig>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for isGitSyncEnabled
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call isGitSyncEnabledCall(String accountIdentifier, String projectIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync/git-sync-enabled";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call isGitSyncEnabledValidateBeforeCall(String accountIdentifier, String projectIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = isGitSyncEnabledCall(accountIdentifier, projectIdentifier, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check whether Git Sync is enabled for given scope or not
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @return GitEnabled
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GitEnabled isGitSyncEnabled(String accountIdentifier, String projectIdentifier, String orgIdentifier) throws ApiException {
        ApiResponse<GitEnabled> resp = isGitSyncEnabledWithHttpInfo(accountIdentifier, projectIdentifier, orgIdentifier);
        return resp.getData();
    }

    /**
     * Check whether Git Sync is enabled for given scope or not
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @return ApiResponse&lt;GitEnabled&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GitEnabled> isGitSyncEnabledWithHttpInfo(String accountIdentifier, String projectIdentifier, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = isGitSyncEnabledValidateBeforeCall(accountIdentifier, projectIdentifier, orgIdentifier, null, null);
        Type localVarReturnType = new TypeToken<GitEnabled>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check whether Git Sync is enabled for given scope or not (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call isGitSyncEnabledAsync(String accountIdentifier, String projectIdentifier, String orgIdentifier, final ApiCallback<GitEnabled> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = isGitSyncEnabledValidateBeforeCall(accountIdentifier, projectIdentifier, orgIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GitEnabled>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGitExperience
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGitExperienceCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync/disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGitExperienceValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = putGitExperienceCall(accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putGitExperience(String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        putGitExperienceWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier);
    }

    /**
     * 
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putGitExperienceWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = putGitExperienceValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGitExperienceAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGitExperienceValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateDefaultFolder
     * @param identifier Git Sync Config Id (required)
     * @param folderIdentifier Folder Id (required)
     * @param projectId Project Identifier for the Entity (optional)
     * @param organizationId Organization Identifier for the Entity (optional)
     * @param accountId Account Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDefaultFolderCall(String identifier, String folderIdentifier, String projectId, String organizationId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync/{identifier}/folder/{folderIdentifier}/default"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "folderIdentifier" + "\\}", apiClient.escapeString(folderIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectId", projectId));
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organizationId", organizationId));
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDefaultFolderValidateBeforeCall(String identifier, String folderIdentifier, String projectId, String organizationId, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateDefaultFolder(Async)");
        }
        // verify the required parameter 'folderIdentifier' is set
        if (folderIdentifier == null) {
            throw new ApiException("Missing the required parameter 'folderIdentifier' when calling updateDefaultFolder(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDefaultFolderCall(identifier, folderIdentifier, projectId, organizationId, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update existing Git Sync Config default root folder by Identifier
     * 
     * @param identifier Git Sync Config Id (required)
     * @param folderIdentifier Folder Id (required)
     * @param projectId Project Identifier for the Entity (optional)
     * @param organizationId Organization Identifier for the Entity (optional)
     * @param accountId Account Identifier for the Entity (optional)
     * @return GitSyncConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GitSyncConfig updateDefaultFolder(String identifier, String folderIdentifier, String projectId, String organizationId, String accountId) throws ApiException {
        ApiResponse<GitSyncConfig> resp = updateDefaultFolderWithHttpInfo(identifier, folderIdentifier, projectId, organizationId, accountId);
        return resp.getData();
    }

    /**
     * Update existing Git Sync Config default root folder by Identifier
     * 
     * @param identifier Git Sync Config Id (required)
     * @param folderIdentifier Folder Id (required)
     * @param projectId Project Identifier for the Entity (optional)
     * @param organizationId Organization Identifier for the Entity (optional)
     * @param accountId Account Identifier for the Entity (optional)
     * @return ApiResponse&lt;GitSyncConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GitSyncConfig> updateDefaultFolderWithHttpInfo(String identifier, String folderIdentifier, String projectId, String organizationId, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = updateDefaultFolderValidateBeforeCall(identifier, folderIdentifier, projectId, organizationId, accountId, null, null);
        Type localVarReturnType = new TypeToken<GitSyncConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update existing Git Sync Config default root folder by Identifier (asynchronously)
     * 
     * @param identifier Git Sync Config Id (required)
     * @param folderIdentifier Folder Id (required)
     * @param projectId Project Identifier for the Entity (optional)
     * @param organizationId Organization Identifier for the Entity (optional)
     * @param accountId Account Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDefaultFolderAsync(String identifier, String folderIdentifier, String projectId, String organizationId, String accountId, final ApiCallback<GitSyncConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDefaultFolderValidateBeforeCall(identifier, folderIdentifier, projectId, organizationId, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GitSyncConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGitSyncConfig
     * @param body Details of Git Sync Config (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGitSyncConfigCall(GitSyncConfig body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml", "text/html", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGitSyncConfigValidateBeforeCall(GitSyncConfig body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateGitSyncConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = updateGitSyncConfigCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update existing Git Sync Config by Identifier
     * 
     * @param body Details of Git Sync Config (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @return GitSyncConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GitSyncConfig updateGitSyncConfig(GitSyncConfig body, String accountIdentifier) throws ApiException {
        ApiResponse<GitSyncConfig> resp = updateGitSyncConfigWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update existing Git Sync Config by Identifier
     * 
     * @param body Details of Git Sync Config (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @return ApiResponse&lt;GitSyncConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GitSyncConfig> updateGitSyncConfigWithHttpInfo(GitSyncConfig body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = updateGitSyncConfigValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<GitSyncConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update existing Git Sync Config by Identifier (asynchronously)
     * 
     * @param body Details of Git Sync Config (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGitSyncConfigAsync(GitSyncConfig body, String accountIdentifier, final ApiCallback<GitSyncConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGitSyncConfigValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GitSyncConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
