/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CfError;
import io.swagger.client.model.CfPatchOperation;
import io.swagger.client.model.FlagBasicInfos;
import io.swagger.client.model.Segment;
import io.swagger.client.model.SegmentFlag;
import io.swagger.client.model.Segments;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TargetGroupsApi {
    private ApiClient apiClient;

    public TargetGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TargetGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSegment
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSegmentCall(Object body, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSegmentValidateBeforeCall(Object body, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSegment(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createSegment(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling createSegment(Async)");
        }
        
        com.squareup.okhttp.Call call = createSegmentCall(body, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Target Group
     * Creates a Target Group in the given Project
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createSegment(Object body, String accountIdentifier, String orgIdentifier) throws ApiException {
        createSegmentWithHttpInfo(body, accountIdentifier, orgIdentifier);
    }

    /**
     * Creates a Target Group
     * Creates a Target Group in the given Project
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createSegmentWithHttpInfo(Object body, String accountIdentifier, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createSegmentValidateBeforeCall(body, accountIdentifier, orgIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a Target Group (asynchronously)
     * Creates a Target Group in the given Project
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSegmentAsync(Object body, String accountIdentifier, String orgIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSegmentValidateBeforeCall(body, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSegment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSegmentCall(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/segments/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSegmentValidateBeforeCall(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteSegment(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling deleteSegment(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteSegment(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling deleteSegment(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling deleteSegment(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSegmentCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Target Group
     * Deletes a Target Group for the given ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSegment(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        deleteSegmentWithHttpInfo(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier);
    }

    /**
     * Deletes a Target Group
     * Deletes a Target Group for the given ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSegmentWithHttpInfo(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteSegmentValidateBeforeCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Target Group (asynchronously)
     * Deletes a Target Group for the given ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSegmentAsync(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSegmentValidateBeforeCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllSegments
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param name Name of the field (optional)
     * @param identifier Identifier of the field (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllSegmentsCall(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (sortByField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortByField", sortByField));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (identifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("identifier", identifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSegmentsValidateBeforeCall(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAllSegments(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getAllSegments(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getAllSegments(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getAllSegments(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllSegmentsCall(accountIdentifier, orgIdentifier, environmentIdentifier, projectIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all Target Groups
     * Returns Target Group details for the given account
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param name Name of the field (optional)
     * @param identifier Identifier of the field (optional)
     * @return Segments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Segments getAllSegments(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier) throws ApiException {
        ApiResponse<Segments> resp = getAllSegmentsWithHttpInfo(accountIdentifier, orgIdentifier, environmentIdentifier, projectIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier);
        return resp.getData();
    }

    /**
     * Returns all Target Groups
     * Returns Target Group details for the given account
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param name Name of the field (optional)
     * @param identifier Identifier of the field (optional)
     * @return ApiResponse&lt;Segments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Segments> getAllSegmentsWithHttpInfo(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier) throws ApiException {
        com.squareup.okhttp.Call call = getAllSegmentsValidateBeforeCall(accountIdentifier, orgIdentifier, environmentIdentifier, projectIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier, null, null);
        Type localVarReturnType = new TypeToken<Segments>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all Target Groups (asynchronously)
     * Returns Target Group details for the given account
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param name Name of the field (optional)
     * @param identifier Identifier of the field (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSegmentsAsync(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier, final ApiCallback<Segments> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSegmentsValidateBeforeCall(accountIdentifier, orgIdentifier, environmentIdentifier, projectIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Segments>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAvailableFlagsForSegment
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param flagNameIdentifier Identifier of the feature flag (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAvailableFlagsForSegmentCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String flagNameIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/segments/{identifier}/available_flags"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (sortByField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortByField", sortByField));
        if (flagNameIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flagNameIdentifier", flagNameIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAvailableFlagsForSegmentValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String flagNameIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getAvailableFlagsForSegment(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAvailableFlagsForSegment(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getAvailableFlagsForSegment(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getAvailableFlagsForSegment(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getAvailableFlagsForSegment(Async)");
        }
        
        com.squareup.okhttp.Call call = getAvailableFlagsForSegmentCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, flagNameIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns Feature Flags that are available to be added to the given Target Group
     * Returns the list of Feature Flags that the Target Group can be added to.  This list will exclude any Feature Flag that the Target Group is already part of.
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param flagNameIdentifier Identifier of the feature flag (optional)
     * @return FlagBasicInfos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlagBasicInfos getAvailableFlagsForSegment(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String flagNameIdentifier) throws ApiException {
        ApiResponse<FlagBasicInfos> resp = getAvailableFlagsForSegmentWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, flagNameIdentifier);
        return resp.getData();
    }

    /**
     * Returns Feature Flags that are available to be added to the given Target Group
     * Returns the list of Feature Flags that the Target Group can be added to.  This list will exclude any Feature Flag that the Target Group is already part of.
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param flagNameIdentifier Identifier of the feature flag (optional)
     * @return ApiResponse&lt;FlagBasicInfos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlagBasicInfos> getAvailableFlagsForSegmentWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String flagNameIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAvailableFlagsForSegmentValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, flagNameIdentifier, null, null);
        Type localVarReturnType = new TypeToken<FlagBasicInfos>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns Feature Flags that are available to be added to the given Target Group (asynchronously)
     * Returns the list of Feature Flags that the Target Group can be added to.  This list will exclude any Feature Flag that the Target Group is already part of.
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param flagNameIdentifier Identifier of the feature flag (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAvailableFlagsForSegmentAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String flagNameIdentifier, final ApiCallback<FlagBasicInfos> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAvailableFlagsForSegmentValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, flagNameIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlagBasicInfos>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSegment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSegmentCall(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/segments/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSegmentValidateBeforeCall(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getSegment(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getSegment(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getSegment(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getSegment(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getSegment(Async)");
        }
        
        com.squareup.okhttp.Call call = getSegmentCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns Target Group details for the given identifier
     * Returns Target Group details for the given ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return Segment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Segment getSegment(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        ApiResponse<Segment> resp = getSegmentWithHttpInfo(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier);
        return resp.getData();
    }

    /**
     * Returns Target Group details for the given identifier
     * Returns Target Group details for the given ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return ApiResponse&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Segment> getSegmentWithHttpInfo(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getSegmentValidateBeforeCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns Target Group details for the given identifier (asynchronously)
     * Returns Target Group details for the given ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSegmentAsync(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ApiCallback<Segment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSegmentValidateBeforeCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSegmentFlags
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSegmentFlagsCall(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/segments/{identifier}/flags"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSegmentFlagsValidateBeforeCall(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getSegmentFlags(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getSegmentFlags(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getSegmentFlags(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getSegmentFlags(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getSegmentFlags(Async)");
        }
        
        com.squareup.okhttp.Call call = getSegmentFlagsCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns Feature Flags in a Target Group
     * Returns the details of a Feature Flag in a Target Group for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return List&lt;SegmentFlag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SegmentFlag> getSegmentFlags(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        ApiResponse<List<SegmentFlag>> resp = getSegmentFlagsWithHttpInfo(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier);
        return resp.getData();
    }

    /**
     * Returns Feature Flags in a Target Group
     * Returns the details of a Feature Flag in a Target Group for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return ApiResponse&lt;List&lt;SegmentFlag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SegmentFlag>> getSegmentFlagsWithHttpInfo(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getSegmentFlagsValidateBeforeCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, null, null);
        Type localVarReturnType = new TypeToken<List<SegmentFlag>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns Feature Flags in a Target Group (asynchronously)
     * Returns the details of a Feature Flag in a Target Group for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSegmentFlagsAsync(String accountIdentifier, String orgIdentifier, String identifier, String projectIdentifier, String environmentIdentifier, final ApiCallback<List<SegmentFlag>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSegmentFlagsValidateBeforeCall(accountIdentifier, orgIdentifier, identifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SegmentFlag>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchSegment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchSegmentCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/segments/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchSegmentValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling patchSegment(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling patchSegment(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling patchSegment(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling patchSegment(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling patchSegment(Async)");
        }
        
        com.squareup.okhttp.Call call = patchSegmentCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Target Group
     * Updates a Target Group for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @return Segment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Segment patchSegment(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body) throws ApiException {
        ApiResponse<Segment> resp = patchSegmentWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, body);
        return resp.getData();
    }

    /**
     * Updates a Target Group
     * Updates a Target Group for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Segment> patchSegmentWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body) throws ApiException {
        com.squareup.okhttp.Call call = patchSegmentValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, body, null, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Target Group (asynchronously)
     * Updates a Target Group for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchSegmentAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body, final ApiCallback<Segment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchSegmentValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
