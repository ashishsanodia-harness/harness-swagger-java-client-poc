/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ProjectRequest;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOPageResponseProjectResponse;
import io.swagger.client.model.ResponseDTOProjectResponse;
import io.swagger.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient apiClient;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteProject
     * @param identifier Project Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch Version number of Project (optional)
     * @param orgIdentifier This is the Organization Identifier for the Project. By default, the Default Organization&#x27;s Identifier is considered. (optional, default to default)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProjectCall(String identifier, String accountIdentifier, String ifMatch, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/projects/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProjectValidateBeforeCall(String identifier, String accountIdentifier, String ifMatch, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteProject(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteProject(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteProjectCall(identifier, accountIdentifier, ifMatch, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes the Project corresponding to the specified Project ID.
     * 
     * @param identifier Project Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch Version number of Project (optional)
     * @param orgIdentifier This is the Organization Identifier for the Project. By default, the Default Organization&#x27;s Identifier is considered. (optional, default to default)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deleteProject(String identifier, String accountIdentifier, String ifMatch, String orgIdentifier) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deleteProjectWithHttpInfo(identifier, accountIdentifier, ifMatch, orgIdentifier);
        return resp.getData();
    }

    /**
     * Deletes the Project corresponding to the specified Project ID.
     * 
     * @param identifier Project Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch Version number of Project (optional)
     * @param orgIdentifier This is the Organization Identifier for the Project. By default, the Default Organization&#x27;s Identifier is considered. (optional, default to default)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deleteProjectWithHttpInfo(String identifier, String accountIdentifier, String ifMatch, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteProjectValidateBeforeCall(identifier, accountIdentifier, ifMatch, orgIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the Project corresponding to the specified Project ID. (asynchronously)
     * 
     * @param identifier Project Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch Version number of Project (optional)
     * @param orgIdentifier This is the Organization Identifier for the Project. By default, the Default Organization&#x27;s Identifier is considered. (optional, default to default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProjectAsync(String identifier, String accountIdentifier, String ifMatch, String orgIdentifier, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProjectValidateBeforeCall(identifier, accountIdentifier, ifMatch, orgIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProject
     * @param identifier Project Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization identifier for the project. If left empty, Default Organization is assumed (optional, default to default)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectCall(String identifier, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/projects/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getProject(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getProject(Async)");
        }
        
        com.squareup.okhttp.Call call = getProjectCall(identifier, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Project by ID
     * 
     * @param identifier Project Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization identifier for the project. If left empty, Default Organization is assumed (optional, default to default)
     * @return ResponseDTOProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOProjectResponse getProject(String identifier, String accountIdentifier, String orgIdentifier) throws ApiException {
        ApiResponse<ResponseDTOProjectResponse> resp = getProjectWithHttpInfo(identifier, accountIdentifier, orgIdentifier);
        return resp.getData();
    }

    /**
     * Gets a Project by ID
     * 
     * @param identifier Project Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization identifier for the project. If left empty, Default Organization is assumed (optional, default to default)
     * @return ApiResponse&lt;ResponseDTOProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOProjectResponse> getProjectWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getProjectValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOProjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Project by ID (asynchronously)
     * 
     * @param identifier Project Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization identifier for the project. If left empty, Default Organization is assumed (optional, default to default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectAsync(String identifier, String accountIdentifier, String orgIdentifier, final ApiCallback<ResponseDTOProjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOProjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectList
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param hasModule This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter (optional, default to true)
     * @param identifiers This is the list of Project IDs. Details specific to these IDs would be fetched. (optional)
     * @param moduleType Filter Projects by module type (optional)
     * @param searchTerm This would be used to filter Projects. Any Project having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectListCall(String accountIdentifier, String orgIdentifier, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (hasModule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hasModule", hasModule));
        if (identifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "identifiers", identifiers));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectListValidateBeforeCall(String accountIdentifier, String orgIdentifier, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getProjectList(Async)");
        }
        
        com.squareup.okhttp.Call call = getProjectListCall(accountIdentifier, orgIdentifier, hasModule, identifiers, moduleType, searchTerm, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List user&#x27;s project
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param hasModule This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter (optional, default to true)
     * @param identifiers This is the list of Project IDs. Details specific to these IDs would be fetched. (optional)
     * @param moduleType Filter Projects by module type (optional)
     * @param searchTerm This would be used to filter Projects. Any Project having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ResponseDTOPageResponseProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseProjectResponse getProjectList(String accountIdentifier, String orgIdentifier, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        ApiResponse<ResponseDTOPageResponseProjectResponse> resp = getProjectListWithHttpInfo(accountIdentifier, orgIdentifier, hasModule, identifiers, moduleType, searchTerm, pageIndex, pageSize, sortOrders);
        return resp.getData();
    }

    /**
     * List user&#x27;s project
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param hasModule This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter (optional, default to true)
     * @param identifiers This is the list of Project IDs. Details specific to these IDs would be fetched. (optional)
     * @param moduleType Filter Projects by module type (optional)
     * @param searchTerm This would be used to filter Projects. Any Project having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseProjectResponse> getProjectListWithHttpInfo(String accountIdentifier, String orgIdentifier, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        com.squareup.okhttp.Call call = getProjectListValidateBeforeCall(accountIdentifier, orgIdentifier, hasModule, identifiers, moduleType, searchTerm, pageIndex, pageSize, sortOrders, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseProjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List user&#x27;s project (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param hasModule This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter (optional, default to true)
     * @param identifiers This is the list of Project IDs. Details specific to these IDs would be fetched. (optional)
     * @param moduleType Filter Projects by module type (optional)
     * @param searchTerm This would be used to filter Projects. Any Project having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectListAsync(String accountIdentifier, String orgIdentifier, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ApiCallback<ResponseDTOPageResponseProjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectListValidateBeforeCall(accountIdentifier, orgIdentifier, hasModule, identifiers, moduleType, searchTerm, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseProjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectListWithMultiOrgFilter
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifiers List of Organization Identifiers for the Entities (optional)
     * @param hasModule This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter (optional, default to true)
     * @param identifiers This is the list of Project Identifiers. Details specific to these IDs would be fetched. (optional)
     * @param moduleType Filter Projects by module type (optional)
     * @param searchTerm Filter Projects by searching for this word in Name, Id, and Tag (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectListWithMultiOrgFilterCall(String accountIdentifier, List<String> orgIdentifiers, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/projects/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "orgIdentifiers", orgIdentifiers));
        if (hasModule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hasModule", hasModule));
        if (identifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "identifiers", identifiers));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectListWithMultiOrgFilterValidateBeforeCall(String accountIdentifier, List<String> orgIdentifiers, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getProjectListWithMultiOrgFilter(Async)");
        }
        
        com.squareup.okhttp.Call call = getProjectListWithMultiOrgFilterCall(accountIdentifier, orgIdentifiers, hasModule, identifiers, moduleType, searchTerm, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List user&#x27;s project with support to filter by multiple organizations
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifiers List of Organization Identifiers for the Entities (optional)
     * @param hasModule This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter (optional, default to true)
     * @param identifiers This is the list of Project Identifiers. Details specific to these IDs would be fetched. (optional)
     * @param moduleType Filter Projects by module type (optional)
     * @param searchTerm Filter Projects by searching for this word in Name, Id, and Tag (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ResponseDTOPageResponseProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseProjectResponse getProjectListWithMultiOrgFilter(String accountIdentifier, List<String> orgIdentifiers, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        ApiResponse<ResponseDTOPageResponseProjectResponse> resp = getProjectListWithMultiOrgFilterWithHttpInfo(accountIdentifier, orgIdentifiers, hasModule, identifiers, moduleType, searchTerm, pageIndex, pageSize, sortOrders);
        return resp.getData();
    }

    /**
     * List user&#x27;s project with support to filter by multiple organizations
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifiers List of Organization Identifiers for the Entities (optional)
     * @param hasModule This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter (optional, default to true)
     * @param identifiers This is the list of Project Identifiers. Details specific to these IDs would be fetched. (optional)
     * @param moduleType Filter Projects by module type (optional)
     * @param searchTerm Filter Projects by searching for this word in Name, Id, and Tag (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseProjectResponse> getProjectListWithMultiOrgFilterWithHttpInfo(String accountIdentifier, List<String> orgIdentifiers, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        com.squareup.okhttp.Call call = getProjectListWithMultiOrgFilterValidateBeforeCall(accountIdentifier, orgIdentifiers, hasModule, identifiers, moduleType, searchTerm, pageIndex, pageSize, sortOrders, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseProjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List user&#x27;s project with support to filter by multiple organizations (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifiers List of Organization Identifiers for the Entities (optional)
     * @param hasModule This boolean specifies whether to Filter Projects which has the Module of type passed in the module type parameter or to Filter Projects which does not has the Module of type passed in the module type parameter (optional, default to true)
     * @param identifiers This is the list of Project Identifiers. Details specific to these IDs would be fetched. (optional)
     * @param moduleType Filter Projects by module type (optional)
     * @param searchTerm Filter Projects by searching for this word in Name, Id, and Tag (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectListWithMultiOrgFilterAsync(String accountIdentifier, List<String> orgIdentifiers, Boolean hasModule, List<String> identifiers, String moduleType, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ApiCallback<ResponseDTOPageResponseProjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectListWithMultiOrgFilterValidateBeforeCall(accountIdentifier, orgIdentifiers, hasModule, identifiers, moduleType, searchTerm, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseProjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postProject
     * @param body Details of the Project to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization identifier for the Project. If left empty, the Project is created under Default Organization (optional, default to default)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postProjectCall(ProjectRequest body, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postProjectValidateBeforeCall(ProjectRequest body, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postProject(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postProject(Async)");
        }
        
        com.squareup.okhttp.Call call = postProjectCall(body, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Project
     * 
     * @param body Details of the Project to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization identifier for the Project. If left empty, the Project is created under Default Organization (optional, default to default)
     * @return ResponseDTOProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOProjectResponse postProject(ProjectRequest body, String accountIdentifier, String orgIdentifier) throws ApiException {
        ApiResponse<ResponseDTOProjectResponse> resp = postProjectWithHttpInfo(body, accountIdentifier, orgIdentifier);
        return resp.getData();
    }

    /**
     * Creates a Project
     * 
     * @param body Details of the Project to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization identifier for the Project. If left empty, the Project is created under Default Organization (optional, default to default)
     * @return ApiResponse&lt;ResponseDTOProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOProjectResponse> postProjectWithHttpInfo(ProjectRequest body, String accountIdentifier, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postProjectValidateBeforeCall(body, accountIdentifier, orgIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOProjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Project (asynchronously)
     * 
     * @param body Details of the Project to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization identifier for the Project. If left empty, the Project is created under Default Organization (optional, default to default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postProjectAsync(ProjectRequest body, String accountIdentifier, String orgIdentifier, final ApiCallback<ResponseDTOProjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postProjectValidateBeforeCall(body, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOProjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putProject
     * @param body This is the updated Project. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Project Identifier for the Entity (required)
     * @param ifMatch Version number of Project (optional)
     * @param orgIdentifier Organization identifier for the Project. If left empty, Default Organization is assumed (optional, default to default)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putProjectCall(ProjectRequest body, String accountIdentifier, String identifier, String ifMatch, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/projects/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putProjectValidateBeforeCall(ProjectRequest body, String accountIdentifier, String identifier, String ifMatch, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putProject(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling putProject(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling putProject(Async)");
        }
        
        com.squareup.okhttp.Call call = putProjectCall(body, accountIdentifier, identifier, ifMatch, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Project by ID
     * 
     * @param body This is the updated Project. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Project Identifier for the Entity (required)
     * @param ifMatch Version number of Project (optional)
     * @param orgIdentifier Organization identifier for the Project. If left empty, Default Organization is assumed (optional, default to default)
     * @return ResponseDTOProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOProjectResponse putProject(ProjectRequest body, String accountIdentifier, String identifier, String ifMatch, String orgIdentifier) throws ApiException {
        ApiResponse<ResponseDTOProjectResponse> resp = putProjectWithHttpInfo(body, accountIdentifier, identifier, ifMatch, orgIdentifier);
        return resp.getData();
    }

    /**
     * Update Project by ID
     * 
     * @param body This is the updated Project. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Project Identifier for the Entity (required)
     * @param ifMatch Version number of Project (optional)
     * @param orgIdentifier Organization identifier for the Project. If left empty, Default Organization is assumed (optional, default to default)
     * @return ApiResponse&lt;ResponseDTOProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOProjectResponse> putProjectWithHttpInfo(ProjectRequest body, String accountIdentifier, String identifier, String ifMatch, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = putProjectValidateBeforeCall(body, accountIdentifier, identifier, ifMatch, orgIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOProjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Project by ID (asynchronously)
     * 
     * @param body This is the updated Project. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Project Identifier for the Entity (required)
     * @param ifMatch Version number of Project (optional)
     * @param orgIdentifier Organization identifier for the Project. If left empty, Default Organization is assumed (optional, default to default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putProjectAsync(ProjectRequest body, String accountIdentifier, String identifier, String ifMatch, String orgIdentifier, final ApiCallback<ResponseDTOProjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putProjectValidateBeforeCall(body, accountIdentifier, identifier, ifMatch, orgIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOProjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
