/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CEView;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOCEView;
import io.swagger.client.model.ResponseDTODouble;
import io.swagger.client.model.ResponseDTOString;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudCostPerspectivesApi {
    private ApiClient apiClient;

    public CloudCostPerspectivesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudCostPerspectivesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPerspective
     * @param body Request body containing Perspective&#x27;s CEView object (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param clone Set the clone parameter as true to clone a Perspective. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPerspectiveCall(CEView body, String accountIdentifier, Boolean clone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ccm/api/perspective";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (clone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clone", clone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPerspectiveValidateBeforeCall(CEView body, String accountIdentifier, Boolean clone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPerspective(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createPerspective(Async)");
        }
        // verify the required parameter 'clone' is set
        if (clone == null) {
            throw new ApiException("Missing the required parameter 'clone' when calling createPerspective(Async)");
        }
        
        com.squareup.okhttp.Call call = createPerspectiveCall(body, accountIdentifier, clone, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Perspective
     * Create a Perspective. You can set the clone parameter as true to clone a Perspective.
     * @param body Request body containing Perspective&#x27;s CEView object (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param clone Set the clone parameter as true to clone a Perspective. (required)
     * @return ResponseDTOCEView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOCEView createPerspective(CEView body, String accountIdentifier, Boolean clone) throws ApiException {
        ApiResponse<ResponseDTOCEView> resp = createPerspectiveWithHttpInfo(body, accountIdentifier, clone);
        return resp.getData();
    }

    /**
     * Create a Perspective
     * Create a Perspective. You can set the clone parameter as true to clone a Perspective.
     * @param body Request body containing Perspective&#x27;s CEView object (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param clone Set the clone parameter as true to clone a Perspective. (required)
     * @return ApiResponse&lt;ResponseDTOCEView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOCEView> createPerspectiveWithHttpInfo(CEView body, String accountIdentifier, Boolean clone) throws ApiException {
        com.squareup.okhttp.Call call = createPerspectiveValidateBeforeCall(body, accountIdentifier, clone, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOCEView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Perspective (asynchronously)
     * Create a Perspective. You can set the clone parameter as true to clone a Perspective.
     * @param body Request body containing Perspective&#x27;s CEView object (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param clone Set the clone parameter as true to clone a Perspective. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPerspectiveAsync(CEView body, String accountIdentifier, Boolean clone, final ApiCallback<ResponseDTOCEView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPerspectiveValidateBeforeCall(body, accountIdentifier, clone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOCEView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePerspective
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePerspectiveCall(String accountIdentifier, String perspectiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ccm/api/perspective";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (perspectiveId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("perspectiveId", perspectiveId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePerspectiveValidateBeforeCall(String accountIdentifier, String perspectiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deletePerspective(Async)");
        }
        // verify the required parameter 'perspectiveId' is set
        if (perspectiveId == null) {
            throw new ApiException("Missing the required parameter 'perspectiveId' when calling deletePerspective(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePerspectiveCall(accountIdentifier, perspectiveId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Perspective
     * Delete a Perspective for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @return ResponseDTOString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOString deletePerspective(String accountIdentifier, String perspectiveId) throws ApiException {
        ApiResponse<ResponseDTOString> resp = deletePerspectiveWithHttpInfo(accountIdentifier, perspectiveId);
        return resp.getData();
    }

    /**
     * Delete a Perspective
     * Delete a Perspective for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @return ApiResponse&lt;ResponseDTOString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOString> deletePerspectiveWithHttpInfo(String accountIdentifier, String perspectiveId) throws ApiException {
        com.squareup.okhttp.Call call = deletePerspectiveValidateBeforeCall(accountIdentifier, perspectiveId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Perspective (asynchronously)
     * Delete a Perspective for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePerspectiveAsync(String accountIdentifier, String perspectiveId, final ApiCallback<ResponseDTOString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePerspectiveValidateBeforeCall(accountIdentifier, perspectiveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getForecastCostForPeriod
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId The Perspective identifier for which we want the forecast cost (required)
     * @param startTime The Start time (timestamp in millis) for the period (required)
     * @param period The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the forecast cost (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getForecastCostForPeriodCall(String accountIdentifier, String perspectiveId, Long startTime, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ccm/api/perspective/forecastCostForPeriod";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (perspectiveId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("perspectiveId", perspectiveId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getForecastCostForPeriodValidateBeforeCall(String accountIdentifier, String perspectiveId, Long startTime, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getForecastCostForPeriod(Async)");
        }
        // verify the required parameter 'perspectiveId' is set
        if (perspectiveId == null) {
            throw new ApiException("Missing the required parameter 'perspectiveId' when calling getForecastCostForPeriod(Async)");
        }
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getForecastCostForPeriod(Async)");
        }
        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getForecastCostForPeriod(Async)");
        }
        
        com.squareup.okhttp.Call call = getForecastCostForPeriodCall(accountIdentifier, perspectiveId, startTime, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the forecasted cost of a Perspective for given period
     * Get the forecasted cost of a Perspective for next period
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId The Perspective identifier for which we want the forecast cost (required)
     * @param startTime The Start time (timestamp in millis) for the period (required)
     * @param period The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the forecast cost (required)
     * @return ResponseDTODouble
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTODouble getForecastCostForPeriod(String accountIdentifier, String perspectiveId, Long startTime, String period) throws ApiException {
        ApiResponse<ResponseDTODouble> resp = getForecastCostForPeriodWithHttpInfo(accountIdentifier, perspectiveId, startTime, period);
        return resp.getData();
    }

    /**
     * Get the forecasted cost of a Perspective for given period
     * Get the forecasted cost of a Perspective for next period
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId The Perspective identifier for which we want the forecast cost (required)
     * @param startTime The Start time (timestamp in millis) for the period (required)
     * @param period The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the forecast cost (required)
     * @return ApiResponse&lt;ResponseDTODouble&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTODouble> getForecastCostForPeriodWithHttpInfo(String accountIdentifier, String perspectiveId, Long startTime, String period) throws ApiException {
        com.squareup.okhttp.Call call = getForecastCostForPeriodValidateBeforeCall(accountIdentifier, perspectiveId, startTime, period, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTODouble>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the forecasted cost of a Perspective for given period (asynchronously)
     * Get the forecasted cost of a Perspective for next period
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId The Perspective identifier for which we want the forecast cost (required)
     * @param startTime The Start time (timestamp in millis) for the period (required)
     * @param period The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the forecast cost (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getForecastCostForPeriodAsync(String accountIdentifier, String perspectiveId, Long startTime, String period, final ApiCallback<ResponseDTODouble> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getForecastCostForPeriodValidateBeforeCall(accountIdentifier, perspectiveId, startTime, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTODouble>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getForecastCostV2
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getForecastCostV2Call(String accountIdentifier, String perspectiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ccm/api/perspective/forecastCost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (perspectiveId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("perspectiveId", perspectiveId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getForecastCostV2ValidateBeforeCall(String accountIdentifier, String perspectiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getForecastCostV2(Async)");
        }
        // verify the required parameter 'perspectiveId' is set
        if (perspectiveId == null) {
            throw new ApiException("Missing the required parameter 'perspectiveId' when calling getForecastCostV2(Async)");
        }
        
        com.squareup.okhttp.Call call = getForecastCostV2Call(accountIdentifier, perspectiveId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch forecasted cost details of a Perspective
     * Fetch forecasted cost details of a Perspective for the next 30 days for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @return ResponseDTODouble
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTODouble getForecastCostV2(String accountIdentifier, String perspectiveId) throws ApiException {
        ApiResponse<ResponseDTODouble> resp = getForecastCostV2WithHttpInfo(accountIdentifier, perspectiveId);
        return resp.getData();
    }

    /**
     * Fetch forecasted cost details of a Perspective
     * Fetch forecasted cost details of a Perspective for the next 30 days for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @return ApiResponse&lt;ResponseDTODouble&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTODouble> getForecastCostV2WithHttpInfo(String accountIdentifier, String perspectiveId) throws ApiException {
        com.squareup.okhttp.Call call = getForecastCostV2ValidateBeforeCall(accountIdentifier, perspectiveId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTODouble>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch forecasted cost details of a Perspective (asynchronously)
     * Fetch forecasted cost details of a Perspective for the next 30 days for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getForecastCostV2Async(String accountIdentifier, String perspectiveId, final ApiCallback<ResponseDTODouble> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getForecastCostV2ValidateBeforeCall(accountIdentifier, perspectiveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTODouble>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastMonthCostV2
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastMonthCostV2Call(String accountIdentifier, String perspectiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ccm/api/perspective/lastMonthCost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (perspectiveId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("perspectiveId", perspectiveId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastMonthCostV2ValidateBeforeCall(String accountIdentifier, String perspectiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getLastMonthCostV2(Async)");
        }
        // verify the required parameter 'perspectiveId' is set
        if (perspectiveId == null) {
            throw new ApiException("Missing the required parameter 'perspectiveId' when calling getLastMonthCostV2(Async)");
        }
        
        com.squareup.okhttp.Call call = getLastMonthCostV2Call(accountIdentifier, perspectiveId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch cost details of a Perspective for the previous month
     * Fetch cost details of a Perspective for the previous month for the given  Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @return ResponseDTODouble
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTODouble getLastMonthCostV2(String accountIdentifier, String perspectiveId) throws ApiException {
        ApiResponse<ResponseDTODouble> resp = getLastMonthCostV2WithHttpInfo(accountIdentifier, perspectiveId);
        return resp.getData();
    }

    /**
     * Fetch cost details of a Perspective for the previous month
     * Fetch cost details of a Perspective for the previous month for the given  Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @return ApiResponse&lt;ResponseDTODouble&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTODouble> getLastMonthCostV2WithHttpInfo(String accountIdentifier, String perspectiveId) throws ApiException {
        com.squareup.okhttp.Call call = getLastMonthCostV2ValidateBeforeCall(accountIdentifier, perspectiveId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTODouble>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch cost details of a Perspective for the previous month (asynchronously)
     * Fetch cost details of a Perspective for the previous month for the given  Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastMonthCostV2Async(String accountIdentifier, String perspectiveId, final ApiCallback<ResponseDTODouble> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastMonthCostV2ValidateBeforeCall(accountIdentifier, perspectiveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTODouble>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastPeriodCost
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId The Perspective identifier for which we want the cost (required)
     * @param startTime The Start time (timestamp in millis) for the period (required)
     * @param period The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the cost (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastPeriodCostCall(String accountIdentifier, String perspectiveId, Long startTime, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ccm/api/perspective/lastPeriodCost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (perspectiveId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("perspectiveId", perspectiveId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastPeriodCostValidateBeforeCall(String accountIdentifier, String perspectiveId, Long startTime, String period, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getLastPeriodCost(Async)");
        }
        // verify the required parameter 'perspectiveId' is set
        if (perspectiveId == null) {
            throw new ApiException("Missing the required parameter 'perspectiveId' when calling getLastPeriodCost(Async)");
        }
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getLastPeriodCost(Async)");
        }
        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling getLastPeriodCost(Async)");
        }
        
        com.squareup.okhttp.Call call = getLastPeriodCostCall(accountIdentifier, perspectiveId, startTime, period, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the last period cost for a Perspective
     * Get last period cost for a Perspective
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId The Perspective identifier for which we want the cost (required)
     * @param startTime The Start time (timestamp in millis) for the period (required)
     * @param period The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the cost (required)
     * @return ResponseDTODouble
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTODouble getLastPeriodCost(String accountIdentifier, String perspectiveId, Long startTime, String period) throws ApiException {
        ApiResponse<ResponseDTODouble> resp = getLastPeriodCostWithHttpInfo(accountIdentifier, perspectiveId, startTime, period);
        return resp.getData();
    }

    /**
     * Get the last period cost for a Perspective
     * Get last period cost for a Perspective
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId The Perspective identifier for which we want the cost (required)
     * @param startTime The Start time (timestamp in millis) for the period (required)
     * @param period The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the cost (required)
     * @return ApiResponse&lt;ResponseDTODouble&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTODouble> getLastPeriodCostWithHttpInfo(String accountIdentifier, String perspectiveId, Long startTime, String period) throws ApiException {
        com.squareup.okhttp.Call call = getLastPeriodCostValidateBeforeCall(accountIdentifier, perspectiveId, startTime, period, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTODouble>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the last period cost for a Perspective (asynchronously)
     * Get last period cost for a Perspective
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId The Perspective identifier for which we want the cost (required)
     * @param startTime The Start time (timestamp in millis) for the period (required)
     * @param period The period (DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY) for which we want the cost (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastPeriodCostAsync(String accountIdentifier, String perspectiveId, Long startTime, String period, final ApiCallback<ResponseDTODouble> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastPeriodCostValidateBeforeCall(accountIdentifier, perspectiveId, startTime, period, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTODouble>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPerspective
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPerspectiveCall(String accountIdentifier, String perspectiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ccm/api/perspective";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (perspectiveId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("perspectiveId", perspectiveId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPerspectiveValidateBeforeCall(String accountIdentifier, String perspectiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPerspective(Async)");
        }
        // verify the required parameter 'perspectiveId' is set
        if (perspectiveId == null) {
            throw new ApiException("Missing the required parameter 'perspectiveId' when calling getPerspective(Async)");
        }
        
        com.squareup.okhttp.Call call = getPerspectiveCall(accountIdentifier, perspectiveId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch details of a Perspective
     * Fetch details of a Perspective for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @return ResponseDTOCEView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOCEView getPerspective(String accountIdentifier, String perspectiveId) throws ApiException {
        ApiResponse<ResponseDTOCEView> resp = getPerspectiveWithHttpInfo(accountIdentifier, perspectiveId);
        return resp.getData();
    }

    /**
     * Fetch details of a Perspective
     * Fetch details of a Perspective for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @return ApiResponse&lt;ResponseDTOCEView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOCEView> getPerspectiveWithHttpInfo(String accountIdentifier, String perspectiveId) throws ApiException {
        com.squareup.okhttp.Call call = getPerspectiveValidateBeforeCall(accountIdentifier, perspectiveId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOCEView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch details of a Perspective (asynchronously)
     * Fetch details of a Perspective for the given Perspective ID.
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param perspectiveId Unique identifier for the Perspective (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPerspectiveAsync(String accountIdentifier, String perspectiveId, final ApiCallback<ResponseDTOCEView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPerspectiveValidateBeforeCall(accountIdentifier, perspectiveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOCEView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePerspective
     * @param body Perspective&#x27;s CEView object (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePerspectiveCall(CEView body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ccm/api/perspective";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePerspectiveValidateBeforeCall(CEView body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePerspective(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updatePerspective(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePerspectiveCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Perspective
     * Update a Perspective. It accepts a CEView object and upserts it using the uuid mentioned in the definition.
     * @param body Perspective&#x27;s CEView object (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOCEView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOCEView updatePerspective(CEView body, String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOCEView> resp = updatePerspectiveWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Update a Perspective
     * Update a Perspective. It accepts a CEView object and upserts it using the uuid mentioned in the definition.
     * @param body Perspective&#x27;s CEView object (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOCEView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOCEView> updatePerspectiveWithHttpInfo(CEView body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = updatePerspectiveValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOCEView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Perspective (asynchronously)
     * Update a Perspective. It accepts a CEView object and upserts it using the uuid mentioned in the definition.
     * @param body Perspective&#x27;s CEView object (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePerspectiveAsync(CEView body, String accountIdentifier, final ApiCallback<ResponseDTOCEView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePerspectiveValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOCEView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
