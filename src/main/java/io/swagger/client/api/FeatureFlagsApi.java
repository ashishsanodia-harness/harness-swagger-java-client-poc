/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CfError;
import io.swagger.client.model.Feature;
import io.swagger.client.model.Features;
import io.swagger.client.model.GitSyncPatchOperation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeatureFlagsApi {
    private ApiClient apiClient;

    public FeatureFlagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeatureFlagsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createFeatureFlag
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFeatureFlagCall(String accountIdentifier, String orgIdentifier, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFeatureFlagValidateBeforeCall(String accountIdentifier, String orgIdentifier, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createFeatureFlag(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling createFeatureFlag(Async)");
        }
        
        com.squareup.okhttp.Call call = createFeatureFlagCall(accountIdentifier, orgIdentifier, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Feature Flag
     * Creates a Feature Flag in the Project
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createFeatureFlag(String accountIdentifier, String orgIdentifier, Object body) throws ApiException {
        createFeatureFlagWithHttpInfo(accountIdentifier, orgIdentifier, body);
    }

    /**
     * Creates a Feature Flag
     * Creates a Feature Flag in the Project
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createFeatureFlagWithHttpInfo(String accountIdentifier, String orgIdentifier, Object body) throws ApiException {
        com.squareup.okhttp.Call call = createFeatureFlagValidateBeforeCall(accountIdentifier, orgIdentifier, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a Feature Flag (asynchronously)
     * Creates a Feature Flag in the Project
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFeatureFlagAsync(String accountIdentifier, String orgIdentifier, Object body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFeatureFlagValidateBeforeCall(accountIdentifier, orgIdentifier, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFeatureFlag
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param commitMsg Git commit message (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureFlagCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String commitMsg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/features/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFeatureFlagValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String commitMsg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteFeatureFlag(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteFeatureFlag(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling deleteFeatureFlag(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling deleteFeatureFlag(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFeatureFlagCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, commitMsg, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Feature Flag
     * Delete Feature Flag for the given identifier and account ID
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param commitMsg Git commit message (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFeatureFlag(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String commitMsg) throws ApiException {
        deleteFeatureFlagWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier, commitMsg);
    }

    /**
     * Delete a Feature Flag
     * Delete Feature Flag for the given identifier and account ID
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param commitMsg Git commit message (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFeatureFlagWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String commitMsg) throws ApiException {
        com.squareup.okhttp.Call call = deleteFeatureFlagValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, commitMsg, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Feature Flag (asynchronously)
     * Delete Feature Flag for the given identifier and account ID
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param commitMsg Git commit message (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFeatureFlagAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String commitMsg, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFeatureFlagValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, commitMsg, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllFeatures
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment (optional)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param name Name of the field (optional)
     * @param identifier Identifier of the field (optional)
     * @param archived Status of the feature flag (optional)
     * @param kind Kind of the feature flag (optional)
     * @param targetIdentifier Identifier of a target (optional)
     * @param metrics Parameter to indicate if metrics data is requested in response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllFeaturesCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier, Boolean archived, String kind, String targetIdentifier, Boolean metrics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (sortByField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortByField", sortByField));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (identifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("identifier", identifier));
        if (archived != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("archived", archived));
        if (kind != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kind", kind));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));
        if (metrics != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metrics", metrics));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllFeaturesValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier, Boolean archived, String kind, String targetIdentifier, Boolean metrics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAllFeatures(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getAllFeatures(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getAllFeatures(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllFeaturesCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier, archived, kind, targetIdentifier, metrics, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all Feature Flags for the project
     * Returns all the Feature Flag details for the given project
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment (optional)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param name Name of the field (optional)
     * @param identifier Identifier of the field (optional)
     * @param archived Status of the feature flag (optional)
     * @param kind Kind of the feature flag (optional)
     * @param targetIdentifier Identifier of a target (optional)
     * @param metrics Parameter to indicate if metrics data is requested in response (optional)
     * @return Features
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Features getAllFeatures(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier, Boolean archived, String kind, String targetIdentifier, Boolean metrics) throws ApiException {
        ApiResponse<Features> resp = getAllFeaturesWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier, archived, kind, targetIdentifier, metrics);
        return resp.getData();
    }

    /**
     * Returns all Feature Flags for the project
     * Returns all the Feature Flag details for the given project
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment (optional)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param name Name of the field (optional)
     * @param identifier Identifier of the field (optional)
     * @param archived Status of the feature flag (optional)
     * @param kind Kind of the feature flag (optional)
     * @param targetIdentifier Identifier of a target (optional)
     * @param metrics Parameter to indicate if metrics data is requested in response (optional)
     * @return ApiResponse&lt;Features&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Features> getAllFeaturesWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier, Boolean archived, String kind, String targetIdentifier, Boolean metrics) throws ApiException {
        com.squareup.okhttp.Call call = getAllFeaturesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier, archived, kind, targetIdentifier, metrics, null, null);
        Type localVarReturnType = new TypeToken<Features>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all Feature Flags for the project (asynchronously)
     * Returns all the Feature Flag details for the given project
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment (optional)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param name Name of the field (optional)
     * @param identifier Identifier of the field (optional)
     * @param archived Status of the feature flag (optional)
     * @param kind Kind of the feature flag (optional)
     * @param targetIdentifier Identifier of a target (optional)
     * @param metrics Parameter to indicate if metrics data is requested in response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllFeaturesAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String name, String identifier, Boolean archived, String kind, String targetIdentifier, Boolean metrics, final ApiCallback<Features> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllFeaturesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, name, identifier, archived, kind, targetIdentifier, metrics, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Features>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureFlag
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureFlagCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/features/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureFlagValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getFeatureFlag(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getFeatureFlag(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getFeatureFlag(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getFeatureFlag(Async)");
        }
        
        com.squareup.okhttp.Call call = getFeatureFlagCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a Feature Flag
     * Returns details such as Variation name, identifier etc for the given Feature Flag
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment (optional)
     * @return Feature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Feature getFeatureFlag(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        ApiResponse<Feature> resp = getFeatureFlagWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier);
        return resp.getData();
    }

    /**
     * Returns a Feature Flag
     * Returns details such as Variation name, identifier etc for the given Feature Flag
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment (optional)
     * @return ApiResponse&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Feature> getFeatureFlagWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureFlagValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a Feature Flag (asynchronously)
     * Returns details such as Variation name, identifier etc for the given Feature Flag
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureFlagAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ApiCallback<Feature> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureFlagValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchFeature
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param environmentIdentifier Environment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchFeatureCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier, GitSyncPatchOperation body, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/features/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchFeatureValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier, GitSyncPatchOperation body, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling patchFeature(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling patchFeature(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling patchFeature(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling patchFeature(Async)");
        }
        
        com.squareup.okhttp.Call call = patchFeatureCall(accountIdentifier, orgIdentifier, projectIdentifier, identifier, body, environmentIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Feature Flag
     * This operation is used to modify a Feature Flag.  The request body can include one or more instructions that can modify flag attributes such as the state (off|on), the variations that are returned and serving rules. For example if you want to turn a flag off you can use this opeartion and send the setFeatureFlagState  {   \&quot;kind\&quot;: \&quot;setFeatureFlagState\&quot;,   \&quot;parameters\&quot;: {     \&quot;state\&quot;: \&quot;off\&quot;   } } 
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param environmentIdentifier Environment (optional)
     * @return Feature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Feature patchFeature(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier, GitSyncPatchOperation body, String environmentIdentifier) throws ApiException {
        ApiResponse<Feature> resp = patchFeatureWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, identifier, body, environmentIdentifier);
        return resp.getData();
    }

    /**
     * Updates a Feature Flag
     * This operation is used to modify a Feature Flag.  The request body can include one or more instructions that can modify flag attributes such as the state (off|on), the variations that are returned and serving rules. For example if you want to turn a flag off you can use this opeartion and send the setFeatureFlagState  {   \&quot;kind\&quot;: \&quot;setFeatureFlagState\&quot;,   \&quot;parameters\&quot;: {     \&quot;state\&quot;: \&quot;off\&quot;   } } 
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param environmentIdentifier Environment (optional)
     * @return ApiResponse&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Feature> patchFeatureWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier, GitSyncPatchOperation body, String environmentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = patchFeatureValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, identifier, body, environmentIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Feature Flag (asynchronously)
     * This operation is used to modify a Feature Flag.  The request body can include one or more instructions that can modify flag attributes such as the state (off|on), the variations that are returned and serving rules. For example if you want to turn a flag off you can use this opeartion and send the setFeatureFlagState  {   \&quot;kind\&quot;: \&quot;setFeatureFlagState\&quot;,   \&quot;parameters\&quot;: {     \&quot;state\&quot;: \&quot;off\&quot;   } } 
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param environmentIdentifier Environment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchFeatureAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier, GitSyncPatchOperation body, String environmentIdentifier, final ApiCallback<Feature> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchFeatureValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, identifier, body, environmentIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
