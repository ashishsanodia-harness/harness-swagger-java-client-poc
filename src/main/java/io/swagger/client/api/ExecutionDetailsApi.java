/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.FilterProperties;
import io.swagger.client.model.ResponseDTOInputSetTemplateResponse;
import io.swagger.client.model.ResponseDTOPagePipelineExecutionSummary;
import io.swagger.client.model.ResponseDTOPipelineExecutionDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExecutionDetailsApi {
    private ApiClient apiClient;

    public ExecutionDetailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExecutionDetailsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getExecutionDetail
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Execution details (required)
     * @param stageNodeId Stage Node Identifier to get execution stats. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExecutionDetailCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String stageNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/execution/{planExecutionId}"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (stageNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stageNodeId", stageNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExecutionDetailValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String stageNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getExecutionDetail(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getExecutionDetail(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getExecutionDetail(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling getExecutionDetail(Async)");
        }
        
        com.squareup.okhttp.Call call = getExecutionDetailCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, stageNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Pipeline Execution details for given PlanExecution Id
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Execution details (required)
     * @param stageNodeId Stage Node Identifier to get execution stats. (optional)
     * @return ResponseDTOPipelineExecutionDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPipelineExecutionDetail getExecutionDetail(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String stageNodeId) throws ApiException {
        ApiResponse<ResponseDTOPipelineExecutionDetail> resp = getExecutionDetailWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, stageNodeId);
        return resp.getData();
    }

    /**
     * Get the Pipeline Execution details for given PlanExecution Id
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Execution details (required)
     * @param stageNodeId Stage Node Identifier to get execution stats. (optional)
     * @return ApiResponse&lt;ResponseDTOPipelineExecutionDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPipelineExecutionDetail> getExecutionDetailWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String stageNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getExecutionDetailValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, stageNodeId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPipelineExecutionDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Pipeline Execution details for given PlanExecution Id (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Execution details (required)
     * @param stageNodeId Stage Node Identifier to get execution stats. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExecutionDetailAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String stageNodeId, final ApiCallback<ResponseDTOPipelineExecutionDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExecutionDetailValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, stageNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPipelineExecutionDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInputsetYaml
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Input Set YAML (required)
     * @param resolveExpressions  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInputsetYamlCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/execution/{planExecutionId}/inputset"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (resolveExpressions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolveExpressions", resolveExpressions));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInputsetYamlValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getInputsetYaml(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getInputsetYaml(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getInputsetYaml(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling getInputsetYaml(Async)");
        }
        
        com.squareup.okhttp.Call call = getInputsetYamlCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, resolveExpressions, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Input Set YAML used for given Plan Execution
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Input Set YAML (required)
     * @param resolveExpressions  (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getInputsetYaml(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions) throws ApiException {
        ApiResponse<String> resp = getInputsetYamlWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, resolveExpressions);
        return resp.getData();
    }

    /**
     * Get the Input Set YAML used for given Plan Execution
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Input Set YAML (required)
     * @param resolveExpressions  (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getInputsetYamlWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions) throws ApiException {
        com.squareup.okhttp.Call call = getInputsetYamlValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, resolveExpressions, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Input Set YAML used for given Plan Execution (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Input Set YAML (required)
     * @param resolveExpressions  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInputsetYamlAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInputsetYamlValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, resolveExpressions, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInputsetYamlV2
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Input Set YAML (required)
     * @param resolveExpressions  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInputsetYamlV2Call(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/execution/{planExecutionId}/inputsetV2"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (resolveExpressions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolveExpressions", resolveExpressions));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInputsetYamlV2ValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getInputsetYamlV2(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getInputsetYamlV2(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getInputsetYamlV2(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling getInputsetYamlV2(Async)");
        }
        
        com.squareup.okhttp.Call call = getInputsetYamlV2Call(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, resolveExpressions, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Input Set YAML used for given Plan Execution
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Input Set YAML (required)
     * @param resolveExpressions  (optional, default to false)
     * @return ResponseDTOInputSetTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInputSetTemplateResponse getInputsetYamlV2(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions) throws ApiException {
        ApiResponse<ResponseDTOInputSetTemplateResponse> resp = getInputsetYamlV2WithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, resolveExpressions);
        return resp.getData();
    }

    /**
     * Get the Input Set YAML used for given Plan Execution
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Input Set YAML (required)
     * @param resolveExpressions  (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOInputSetTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInputSetTemplateResponse> getInputsetYamlV2WithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions) throws ApiException {
        com.squareup.okhttp.Call call = getInputsetYamlV2ValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, resolveExpressions, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetTemplateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Input Set YAML used for given Plan Execution (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId Plan Execution Id for which we want to get the Input Set YAML (required)
     * @param resolveExpressions  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInputsetYamlV2Async(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, Boolean resolveExpressions, final ApiCallback<ResponseDTOInputSetTemplateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInputsetYamlV2ValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, resolveExpressions, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetTemplateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListOfExecutions
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body  (optional)
     * @param searchTerm Search term to filter out pipelines based on pipeline name, identifier, tags. (optional)
     * @param pipelineIdentifier Pipeline Identifier filter if exact pipelines needs to be filtered. (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 10)
     * @param sort Sort criteria for the elements. (optional)
     * @param filterIdentifier  (optional)
     * @param module  (optional)
     * @param status  (optional)
     * @param myDeployments  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListOfExecutionsCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, String searchTerm, String pipelineIdentifier, Integer page, Integer size, List<String> sort, String filterIdentifier, String module, List<String> status, Boolean myDeployments, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/execution/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
        if (filterIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filterIdentifier", filterIdentifier));
        if (module != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("module", module));
        if (status != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
        if (myDeployments != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("myDeployments", myDeployments));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListOfExecutionsValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, String searchTerm, String pipelineIdentifier, Integer page, Integer size, List<String> sort, String filterIdentifier, String module, List<String> status, Boolean myDeployments, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getListOfExecutions(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getListOfExecutions(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getListOfExecutions(Async)");
        }
        
        com.squareup.okhttp.Call call = getListOfExecutionsCall(accountIdentifier, orgIdentifier, projectIdentifier, body, searchTerm, pipelineIdentifier, page, size, sort, filterIdentifier, module, status, myDeployments, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets list of Executions of Pipelines for specific filters.
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body  (optional)
     * @param searchTerm Search term to filter out pipelines based on pipeline name, identifier, tags. (optional)
     * @param pipelineIdentifier Pipeline Identifier filter if exact pipelines needs to be filtered. (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 10)
     * @param sort Sort criteria for the elements. (optional)
     * @param filterIdentifier  (optional)
     * @param module  (optional)
     * @param status  (optional)
     * @param myDeployments  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOPagePipelineExecutionSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPagePipelineExecutionSummary getListOfExecutions(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, String searchTerm, String pipelineIdentifier, Integer page, Integer size, List<String> sort, String filterIdentifier, String module, List<String> status, Boolean myDeployments, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOPagePipelineExecutionSummary> resp = getListOfExecutionsWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, body, searchTerm, pipelineIdentifier, page, size, sort, filterIdentifier, module, status, myDeployments, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Gets list of Executions of Pipelines for specific filters.
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body  (optional)
     * @param searchTerm Search term to filter out pipelines based on pipeline name, identifier, tags. (optional)
     * @param pipelineIdentifier Pipeline Identifier filter if exact pipelines needs to be filtered. (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 10)
     * @param sort Sort criteria for the elements. (optional)
     * @param filterIdentifier  (optional)
     * @param module  (optional)
     * @param status  (optional)
     * @param myDeployments  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOPagePipelineExecutionSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPagePipelineExecutionSummary> getListOfExecutionsWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, String searchTerm, String pipelineIdentifier, Integer page, Integer size, List<String> sort, String filterIdentifier, String module, List<String> status, Boolean myDeployments, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getListOfExecutionsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, body, searchTerm, pipelineIdentifier, page, size, sort, filterIdentifier, module, status, myDeployments, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPagePipelineExecutionSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets list of Executions of Pipelines for specific filters. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body  (optional)
     * @param searchTerm Search term to filter out pipelines based on pipeline name, identifier, tags. (optional)
     * @param pipelineIdentifier Pipeline Identifier filter if exact pipelines needs to be filtered. (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 10)
     * @param sort Sort criteria for the elements. (optional)
     * @param filterIdentifier  (optional)
     * @param module  (optional)
     * @param status  (optional)
     * @param myDeployments  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListOfExecutionsAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, String searchTerm, String pipelineIdentifier, Integer page, Integer size, List<String> sort, String filterIdentifier, String module, List<String> status, Boolean myDeployments, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOPagePipelineExecutionSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListOfExecutionsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, body, searchTerm, pipelineIdentifier, page, size, sort, filterIdentifier, module, status, myDeployments, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPagePipelineExecutionSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
