/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOListServiceAccount;
import io.swagger.client.model.ResponseDTOPageResponseServiceAccountAggregate;
import io.swagger.client.model.ResponseDTOServiceAccount;
import io.swagger.client.model.ResponseDTOServiceAccountAggregate;
import io.swagger.client.model.ServiceAccount;
import io.swagger.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceAccountApi {
    private ApiClient apiClient;

    public ServiceAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceAccountApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createServiceAccount
     * @param body Details required to create Service Account (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createServiceAccountCall(ServiceAccount body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/serviceaccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createServiceAccountValidateBeforeCall(ServiceAccount body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createServiceAccount(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createServiceAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = createServiceAccountCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Service Account
     * 
     * @param body Details required to create Service Account (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOServiceAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOServiceAccount createServiceAccount(ServiceAccount body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOServiceAccount> resp = createServiceAccountWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Creates a Service Account
     * 
     * @param body Details required to create Service Account (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOServiceAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOServiceAccount> createServiceAccountWithHttpInfo(ServiceAccount body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createServiceAccountValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOServiceAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Service Account (asynchronously)
     * 
     * @param body Details required to create Service Account (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createServiceAccountAsync(ServiceAccount body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOServiceAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createServiceAccountValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOServiceAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteServiceAccount
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteServiceAccountCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/serviceaccount/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteServiceAccountValidateBeforeCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteServiceAccount(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteServiceAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteServiceAccountCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes Service Account by ID
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deleteServiceAccount(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deleteServiceAccountWithHttpInfo(accountIdentifier, identifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Deletes Service Account by ID
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deleteServiceAccountWithHttpInfo(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteServiceAccountValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes Service Account by ID (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteServiceAccountAsync(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteServiceAccountValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregatedServiceAccount
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account IDr (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregatedServiceAccountCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/serviceaccount/aggregate/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregatedServiceAccountValidateBeforeCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAggregatedServiceAccount(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getAggregatedServiceAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = getAggregatedServiceAccountCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Service Account by accountIdentifier and Service Account ID and Scope.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account IDr (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOServiceAccountAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOServiceAccountAggregate getAggregatedServiceAccount(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOServiceAccountAggregate> resp = getAggregatedServiceAccountWithHttpInfo(accountIdentifier, identifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Get the Service Account by accountIdentifier and Service Account ID and Scope.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account IDr (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOServiceAccountAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOServiceAccountAggregate> getAggregatedServiceAccountWithHttpInfo(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAggregatedServiceAccountValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOServiceAccountAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Service Account by accountIdentifier and Service Account ID and Scope. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account IDr (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregatedServiceAccountAsync(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOServiceAccountAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregatedServiceAccountValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOServiceAccountAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAggregatedServiceAccounts
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of Service Account IDs. Details specific to these IDs would be fetched. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param searchTerm This would be used to filter Service Accounts. Any Service Account having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAggregatedServiceAccountsCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/serviceaccount/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (identifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "identifiers", identifiers));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAggregatedServiceAccountsValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling listAggregatedServiceAccounts(Async)");
        }
        
        com.squareup.okhttp.Call call = listAggregatedServiceAccountsCall(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches the list of Aggregated Service Accounts corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of Service Account IDs. Details specific to these IDs would be fetched. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param searchTerm This would be used to filter Service Accounts. Any Service Account having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @return ResponseDTOPageResponseServiceAccountAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseServiceAccountAggregate listAggregatedServiceAccounts(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm) throws ApiException {
        ApiResponse<ResponseDTOPageResponseServiceAccountAggregate> resp = listAggregatedServiceAccountsWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm);
        return resp.getData();
    }

    /**
     * Fetches the list of Aggregated Service Accounts corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of Service Account IDs. Details specific to these IDs would be fetched. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param searchTerm This would be used to filter Service Accounts. Any Service Account having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseServiceAccountAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseServiceAccountAggregate> listAggregatedServiceAccountsWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm) throws ApiException {
        com.squareup.okhttp.Call call = listAggregatedServiceAccountsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseServiceAccountAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches the list of Aggregated Service Accounts corresponding to the request&#x27;s filter criteria. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of Service Account IDs. Details specific to these IDs would be fetched. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param searchTerm This would be used to filter Service Accounts. Any Service Account having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAggregatedServiceAccountsAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm, final ApiCallback<ResponseDTOPageResponseServiceAccountAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAggregatedServiceAccountsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseServiceAccountAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServiceAccount
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of Service Account IDs. Details specific to these IDs would be fetched. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServiceAccountCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/serviceaccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (identifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "identifiers", identifiers));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServiceAccountValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling listServiceAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = listServiceAccountCall(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches the list of Service Accounts corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of Service Account IDs. Details specific to these IDs would be fetched. (optional)
     * @return ResponseDTOListServiceAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListServiceAccount listServiceAccount(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers) throws ApiException {
        ApiResponse<ResponseDTOListServiceAccount> resp = listServiceAccountWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, identifiers);
        return resp.getData();
    }

    /**
     * Fetches the list of Service Accounts corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of Service Account IDs. Details specific to these IDs would be fetched. (optional)
     * @return ApiResponse&lt;ResponseDTOListServiceAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListServiceAccount> listServiceAccountWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers) throws ApiException {
        com.squareup.okhttp.Call call = listServiceAccountValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListServiceAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches the list of Service Accounts corresponding to the request&#x27;s filter criteria. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of Service Account IDs. Details specific to these IDs would be fetched. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServiceAccountAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, final ApiCallback<ResponseDTOListServiceAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServiceAccountValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, identifiers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListServiceAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateServiceAccount
     * @param body Details of the updated Service Account (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateServiceAccountCall(ServiceAccount body, String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/serviceaccount/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateServiceAccountValidateBeforeCall(ServiceAccount body, String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateServiceAccount(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateServiceAccount(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateServiceAccount(Async)");
        }
        
        com.squareup.okhttp.Call call = updateServiceAccountCall(body, accountIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the Service Account.
     * 
     * @param body Details of the updated Service Account (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOServiceAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOServiceAccount updateServiceAccount(ServiceAccount body, String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOServiceAccount> resp = updateServiceAccountWithHttpInfo(body, accountIdentifier, identifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Updates the Service Account.
     * 
     * @param body Details of the updated Service Account (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOServiceAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOServiceAccount> updateServiceAccountWithHttpInfo(ServiceAccount body, String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = updateServiceAccountValidateBeforeCall(body, accountIdentifier, identifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOServiceAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the Service Account. (asynchronously)
     * 
     * @param body Details of the updated Service Account (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Service Account ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateServiceAccountAsync(ServiceAccount body, String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOServiceAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateServiceAccountValidateBeforeCall(body, accountIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOServiceAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
