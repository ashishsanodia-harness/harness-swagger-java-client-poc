/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiKeys;
import io.swagger.client.model.CfApiKey;
import io.swagger.client.model.CfError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiKeysApi {
    private ApiClient apiClient;

    public ApiKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiKeysApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAPIKey
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addAPIKeyCall(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/apikey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addAPIKeyValidateBeforeCall(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling addAPIKey(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling addAPIKey(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling addAPIKey(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling addAPIKey(Async)");
        }
        
        com.squareup.okhttp.Call call = addAPIKeyCall(accountIdentifier, orgIdentifier, environmentIdentifier, projectIdentifier, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates an API key for the given Environment
     * Creates an API key for the given Environment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param body  (optional)
     * @return CfApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CfApiKey addAPIKey(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Object body) throws ApiException {
        ApiResponse<CfApiKey> resp = addAPIKeyWithHttpInfo(accountIdentifier, orgIdentifier, environmentIdentifier, projectIdentifier, body);
        return resp.getData();
    }

    /**
     * Creates an API key for the given Environment
     * Creates an API key for the given Environment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param body  (optional)
     * @return ApiResponse&lt;CfApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CfApiKey> addAPIKeyWithHttpInfo(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Object body) throws ApiException {
        com.squareup.okhttp.Call call = addAPIKeyValidateBeforeCall(accountIdentifier, orgIdentifier, environmentIdentifier, projectIdentifier, body, null, null);
        Type localVarReturnType = new TypeToken<CfApiKey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an API key for the given Environment (asynchronously)
     * Creates an API key for the given Environment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAPIKeyAsync(String accountIdentifier, String orgIdentifier, String environmentIdentifier, String projectIdentifier, Object body, final ApiCallback<CfApiKey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addAPIKeyValidateBeforeCall(accountIdentifier, orgIdentifier, environmentIdentifier, projectIdentifier, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CfApiKey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteApiKey
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteApiKeyCall(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/apikey/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteApiKeyValidateBeforeCall(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteApiKey(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling deleteApiKey(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling deleteApiKey(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteApiKey(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling deleteApiKey(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteApiKeyCall(identifier, projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes an API Key
     * Deletes an API key for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteApiKey(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier) throws ApiException {
        deleteApiKeyWithHttpInfo(identifier, projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier);
    }

    /**
     * Deletes an API Key
     * Deletes an API key for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteApiKeyWithHttpInfo(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteApiKeyValidateBeforeCall(identifier, projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an API Key (asynchronously)
     * Deletes an API key for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteApiKeyAsync(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteApiKeyValidateBeforeCall(identifier, projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAPIKey
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAPIKeyCall(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/apikey/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAPIKeyValidateBeforeCall(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getAPIKey(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getAPIKey(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getAPIKey(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAPIKey(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getAPIKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getAPIKeyCall(identifier, projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns API keys
     * Returns all the API Keys for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @return CfApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CfApiKey getAPIKey(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier) throws ApiException {
        ApiResponse<CfApiKey> resp = getAPIKeyWithHttpInfo(identifier, projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier);
        return resp.getData();
    }

    /**
     * Returns API keys
     * Returns all the API Keys for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @return ApiResponse&lt;CfApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CfApiKey> getAPIKeyWithHttpInfo(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAPIKeyValidateBeforeCall(identifier, projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, null, null);
        Type localVarReturnType = new TypeToken<CfApiKey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns API keys (asynchronously)
     * Returns all the API Keys for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAPIKeyAsync(String identifier, String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, final ApiCallback<CfApiKey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAPIKeyValidateBeforeCall(identifier, projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CfApiKey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAPIKeys
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAPIKeysCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/apikey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAPIKeysValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAllAPIKeys(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getAllAPIKeys(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getAllAPIKeys(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getAllAPIKeys(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllAPIKeysCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns API Keys for an Environment
     * Returns all the API Keys for an Environment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @return ApiKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiKeys getAllAPIKeys(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<ApiKeys> resp = getAllAPIKeysWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Returns API Keys for an Environment
     * Returns all the API Keys for an Environment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @return ApiResponse&lt;ApiKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiKeys> getAllAPIKeysWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getAllAPIKeysValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<ApiKeys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns API Keys for an Environment (asynchronously)
     * Returns all the API Keys for an Environment
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAPIKeysAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, final ApiCallback<ApiKeys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAPIKeysValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiKeys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAPIKey
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAPIKeyCall(String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, String identifier, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/apikey/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAPIKeyValidateBeforeCall(String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, String identifier, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling updateAPIKey(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling updateAPIKey(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateAPIKey(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling updateAPIKey(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateAPIKey(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAPIKeyCall(projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, identifier, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates an API Key
     * Updates an API key for the given identifier
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAPIKey(String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, String identifier, Object body) throws ApiException {
        updateAPIKeyWithHttpInfo(projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, identifier, body);
    }

    /**
     * Updates an API Key
     * Updates an API key for the given identifier
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAPIKeyWithHttpInfo(String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, String identifier, Object body) throws ApiException {
        com.squareup.okhttp.Call call = updateAPIKeyValidateBeforeCall(projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, identifier, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates an API Key (asynchronously)
     * Updates an API key for the given identifier
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAPIKeyAsync(String projectIdentifier, String environmentIdentifier, String accountIdentifier, String orgIdentifier, String identifier, Object body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAPIKeyValidateBeforeCall(projectIdentifier, environmentIdentifier, accountIdentifier, orgIdentifier, identifier, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
