/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.FormDataContentDisposition;
import io.swagger.client.model.OAuthSettings;
import io.swagger.client.model.RestResponseAuthenticationSettingsResponse;
import io.swagger.client.model.RestResponseBoolean;
import io.swagger.client.model.RestResponseLoginTypeResponse;
import io.swagger.client.model.RestResponsePasswordStrengthPolicy;
import io.swagger.client.model.RestResponseSSOConfig;
import io.swagger.client.model.TwoFactorAdminOverrideSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationSettingsApi {
    private ApiClient apiClient;

    public AuthenticationSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationSettingsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteSamlMetaData
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSamlMetaDataCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/delete-saml-metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSamlMetaDataValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteSamlMetaData(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteSamlMetaDataCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes SAML meta data by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return RestResponseSSOConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseSSOConfig deleteSamlMetaData(String accountIdentifier) throws ApiException {
        ApiResponse<RestResponseSSOConfig> resp = deleteSamlMetaDataWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Deletes SAML meta data by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;RestResponseSSOConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseSSOConfig> deleteSamlMetaDataWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteSamlMetaDataValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RestResponseSSOConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes SAML meta data by accountIdentifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSamlMetaDataAsync(String accountIdentifier, final ApiCallback<RestResponseSSOConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSamlMetaDataValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseSSOConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthenticationSettings
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthenticationSettingsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthenticationSettingsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAuthenticationSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getAuthenticationSettingsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the authentication settings by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return RestResponseAuthenticationSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseAuthenticationSettingsResponse getAuthenticationSettings(String accountIdentifier) throws ApiException {
        ApiResponse<RestResponseAuthenticationSettingsResponse> resp = getAuthenticationSettingsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Get the authentication settings by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;RestResponseAuthenticationSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseAuthenticationSettingsResponse> getAuthenticationSettingsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAuthenticationSettingsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RestResponseAuthenticationSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the authentication settings by accountIdentifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthenticationSettingsAsync(String accountIdentifier, final ApiCallback<RestResponseAuthenticationSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthenticationSettingsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseAuthenticationSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPasswordStrengthSettings
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPasswordStrengthSettingsCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/login-settings/password-strength";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPasswordStrengthSettingsValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPasswordStrengthSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getPasswordStrengthSettingsCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the password strength settings by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return RestResponsePasswordStrengthPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponsePasswordStrengthPolicy getPasswordStrengthSettings(String accountIdentifier) throws ApiException {
        ApiResponse<RestResponsePasswordStrengthPolicy> resp = getPasswordStrengthSettingsWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Get the password strength settings by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;RestResponsePasswordStrengthPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponsePasswordStrengthPolicy> getPasswordStrengthSettingsWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getPasswordStrengthSettingsValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RestResponsePasswordStrengthPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the password strength settings by accountIdentifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPasswordStrengthSettingsAsync(String accountIdentifier, final ApiCallback<RestResponsePasswordStrengthPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPasswordStrengthSettingsValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponsePasswordStrengthPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSamlLoginTest
     * @param accountId Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSamlLoginTestCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/saml-login-test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSamlLoginTestValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getSamlLoginTest(Async)");
        }
        
        com.squareup.okhttp.Call call = getSamlLoginTestCall(accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the SAML login test by accountId
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @return RestResponseLoginTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseLoginTypeResponse getSamlLoginTest(String accountId) throws ApiException {
        ApiResponse<RestResponseLoginTypeResponse> resp = getSamlLoginTestWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get the SAML login test by accountId
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @return ApiResponse&lt;RestResponseLoginTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseLoginTypeResponse> getSamlLoginTestWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getSamlLoginTestValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<RestResponseLoginTypeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the SAML login test by accountId (asynchronously)
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSamlLoginTestAsync(String accountId, final ApiCallback<RestResponseLoginTypeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSamlLoginTestValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseLoginTypeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeOauthMechanism
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeOauthMechanismCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/oauth/remove-mechanism";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeOauthMechanismValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling removeOauthMechanism(Async)");
        }
        
        com.squareup.okhttp.Call call = removeOauthMechanismCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes OAuth mechanism by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return RestResponseBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseBoolean removeOauthMechanism(String accountIdentifier) throws ApiException {
        ApiResponse<RestResponseBoolean> resp = removeOauthMechanismWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Deletes OAuth mechanism by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;RestResponseBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseBoolean> removeOauthMechanismWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = removeOauthMechanismValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes OAuth mechanism by accountIdentifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeOauthMechanismAsync(String accountIdentifier, final ApiCallback<RestResponseBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeOauthMechanismValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setTwoFactorAuthAtAccountLevel
     * @param body Boolean that specify whether or not to override two factor enabled setting (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setTwoFactorAuthAtAccountLevelCall(TwoFactorAdminOverrideSettings body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/two-factor-admin-override-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setTwoFactorAuthAtAccountLevelValidateBeforeCall(TwoFactorAdminOverrideSettings body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setTwoFactorAuthAtAccountLevel(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling setTwoFactorAuthAtAccountLevel(Async)");
        }
        
        com.squareup.okhttp.Call call = setTwoFactorAuthAtAccountLevelCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set two factor auth at account lever by accountIdentifier
     * 
     * @param body Boolean that specify whether or not to override two factor enabled setting (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return RestResponseBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseBoolean setTwoFactorAuthAtAccountLevel(TwoFactorAdminOverrideSettings body, String accountIdentifier) throws ApiException {
        ApiResponse<RestResponseBoolean> resp = setTwoFactorAuthAtAccountLevelWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Set two factor auth at account lever by accountIdentifier
     * 
     * @param body Boolean that specify whether or not to override two factor enabled setting (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;RestResponseBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseBoolean> setTwoFactorAuthAtAccountLevelWithHttpInfo(TwoFactorAdminOverrideSettings body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = setTwoFactorAuthAtAccountLevelValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set two factor auth at account lever by accountIdentifier (asynchronously)
     * 
     * @param body Boolean that specify whether or not to override two factor enabled setting (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setTwoFactorAuthAtAccountLevelAsync(TwoFactorAdminOverrideSettings body, String accountIdentifier, final ApiCallback<RestResponseBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setTwoFactorAuthAtAccountLevelValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAuthMechanism
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param authenticationMechanism Type of Authentication Mechanism SSO or NON_SSO (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAuthMechanismCall(String accountIdentifier, String authenticationMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/update-auth-mechanism";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (authenticationMechanism != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authenticationMechanism", authenticationMechanism));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAuthMechanismValidateBeforeCall(String accountIdentifier, String authenticationMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateAuthMechanism(Async)");
        }
        
        com.squareup.okhttp.Call call = updateAuthMechanismCall(accountIdentifier, authenticationMechanism, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the Auth mechanism by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param authenticationMechanism Type of Authentication Mechanism SSO or NON_SSO (optional)
     * @return RestResponseBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseBoolean updateAuthMechanism(String accountIdentifier, String authenticationMechanism) throws ApiException {
        ApiResponse<RestResponseBoolean> resp = updateAuthMechanismWithHttpInfo(accountIdentifier, authenticationMechanism);
        return resp.getData();
    }

    /**
     * Updates the Auth mechanism by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param authenticationMechanism Type of Authentication Mechanism SSO or NON_SSO (optional)
     * @return ApiResponse&lt;RestResponseBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseBoolean> updateAuthMechanismWithHttpInfo(String accountIdentifier, String authenticationMechanism) throws ApiException {
        com.squareup.okhttp.Call call = updateAuthMechanismValidateBeforeCall(accountIdentifier, authenticationMechanism, null, null);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the Auth mechanism by accountIdentifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param authenticationMechanism Type of Authentication Mechanism SSO or NON_SSO (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAuthMechanismAsync(String accountIdentifier, String authenticationMechanism, final ApiCallback<RestResponseBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAuthMechanismValidateBeforeCall(accountIdentifier, authenticationMechanism, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOauthProviders
     * @param body This is the updated OAuthSettings. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOauthProvidersCall(OAuthSettings body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/oauth/update-providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOauthProvidersValidateBeforeCall(OAuthSettings body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOauthProviders(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateOauthProviders(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOauthProvidersCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the Oauth providers by accountIdentifier
     * 
     * @param body This is the updated OAuthSettings. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return RestResponseBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseBoolean updateOauthProviders(OAuthSettings body, String accountIdentifier) throws ApiException {
        ApiResponse<RestResponseBoolean> resp = updateOauthProvidersWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Updates the Oauth providers by accountIdentifier
     * 
     * @param body This is the updated OAuthSettings. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;RestResponseBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseBoolean> updateOauthProvidersWithHttpInfo(OAuthSettings body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = updateOauthProvidersValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the Oauth providers by accountIdentifier (asynchronously)
     * 
     * @param body This is the updated OAuthSettings. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOauthProvidersAsync(OAuthSettings body, String accountIdentifier, final ApiCallback<RestResponseBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOauthProvidersValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSamlMetaData
     * @param accountId Account Identifier for the Entity (required)
     * @param file  (optional)
     * @param fileMetadata  (optional)
     * @param displayName  (optional)
     * @param groupMembershipAttr  (optional)
     * @param authorizationEnabled  (optional)
     * @param logoutUrl  (optional)
     * @param entityIdentifier  (optional)
     * @param samlProviderType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSamlMetaDataCall(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/saml-metadata-upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (fileMetadata != null)
        localVarFormParams.put("fileMetadata", fileMetadata);
        if (displayName != null)
        localVarFormParams.put("displayName", displayName);
        if (groupMembershipAttr != null)
        localVarFormParams.put("groupMembershipAttr", groupMembershipAttr);
        if (authorizationEnabled != null)
        localVarFormParams.put("authorizationEnabled", authorizationEnabled);
        if (logoutUrl != null)
        localVarFormParams.put("logoutUrl", logoutUrl);
        if (entityIdentifier != null)
        localVarFormParams.put("entityIdentifier", entityIdentifier);
        if (samlProviderType != null)
        localVarFormParams.put("samlProviderType", samlProviderType);
        if (clientId != null)
        localVarFormParams.put("clientId", clientId);
        if (clientSecret != null)
        localVarFormParams.put("clientSecret", clientSecret);

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSamlMetaDataValidateBeforeCall(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateSamlMetaData(Async)");
        }
        
        com.squareup.okhttp.Call call = updateSamlMetaDataCall(accountId, file, fileMetadata, displayName, groupMembershipAttr, authorizationEnabled, logoutUrl, entityIdentifier, samlProviderType, clientId, clientSecret, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the SAML metadata by accountId
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @param file  (optional)
     * @param fileMetadata  (optional)
     * @param displayName  (optional)
     * @param groupMembershipAttr  (optional)
     * @param authorizationEnabled  (optional)
     * @param logoutUrl  (optional)
     * @param entityIdentifier  (optional)
     * @param samlProviderType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return RestResponseSSOConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseSSOConfig updateSamlMetaData(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret) throws ApiException {
        ApiResponse<RestResponseSSOConfig> resp = updateSamlMetaDataWithHttpInfo(accountId, file, fileMetadata, displayName, groupMembershipAttr, authorizationEnabled, logoutUrl, entityIdentifier, samlProviderType, clientId, clientSecret);
        return resp.getData();
    }

    /**
     * Updates the SAML metadata by accountId
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @param file  (optional)
     * @param fileMetadata  (optional)
     * @param displayName  (optional)
     * @param groupMembershipAttr  (optional)
     * @param authorizationEnabled  (optional)
     * @param logoutUrl  (optional)
     * @param entityIdentifier  (optional)
     * @param samlProviderType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return ApiResponse&lt;RestResponseSSOConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseSSOConfig> updateSamlMetaDataWithHttpInfo(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret) throws ApiException {
        com.squareup.okhttp.Call call = updateSamlMetaDataValidateBeforeCall(accountId, file, fileMetadata, displayName, groupMembershipAttr, authorizationEnabled, logoutUrl, entityIdentifier, samlProviderType, clientId, clientSecret, null, null);
        Type localVarReturnType = new TypeToken<RestResponseSSOConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the SAML metadata by accountId (asynchronously)
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @param file  (optional)
     * @param fileMetadata  (optional)
     * @param displayName  (optional)
     * @param groupMembershipAttr  (optional)
     * @param authorizationEnabled  (optional)
     * @param logoutUrl  (optional)
     * @param entityIdentifier  (optional)
     * @param samlProviderType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSamlMetaDataAsync(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret, final ApiCallback<RestResponseSSOConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSamlMetaDataValidateBeforeCall(accountId, file, fileMetadata, displayName, groupMembershipAttr, authorizationEnabled, logoutUrl, entityIdentifier, samlProviderType, clientId, clientSecret, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseSSOConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateWhitelistedDomains
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Set of whitelisted domains and IPs for the account (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWhitelistedDomainsCall(String accountIdentifier, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/whitelisted-domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWhitelistedDomainsValidateBeforeCall(String accountIdentifier, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateWhitelistedDomains(Async)");
        }
        
        com.squareup.okhttp.Call call = updateWhitelistedDomainsCall(accountIdentifier, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the Whitelisted domains by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Set of whitelisted domains and IPs for the account (optional)
     * @return RestResponseBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseBoolean updateWhitelistedDomains(String accountIdentifier, List<String> body) throws ApiException {
        ApiResponse<RestResponseBoolean> resp = updateWhitelistedDomainsWithHttpInfo(accountIdentifier, body);
        return resp.getData();
    }

    /**
     * Updates the Whitelisted domains by accountIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Set of whitelisted domains and IPs for the account (optional)
     * @return ApiResponse&lt;RestResponseBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseBoolean> updateWhitelistedDomainsWithHttpInfo(String accountIdentifier, List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = updateWhitelistedDomainsValidateBeforeCall(accountIdentifier, body, null, null);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the Whitelisted domains by accountIdentifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Set of whitelisted domains and IPs for the account (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWhitelistedDomainsAsync(String accountIdentifier, List<String> body, final ApiCallback<RestResponseBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWhitelistedDomainsValidateBeforeCall(accountIdentifier, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadSamlMetaData
     * @param accountId Account Identifier for the Entity (required)
     * @param file  (optional)
     * @param fileMetadata  (optional)
     * @param displayName  (optional)
     * @param groupMembershipAttr  (optional)
     * @param authorizationEnabled  (optional)
     * @param logoutUrl  (optional)
     * @param entityIdentifier  (optional)
     * @param samlProviderType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadSamlMetaDataCall(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/authentication-settings/saml-metadata-upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (fileMetadata != null)
        localVarFormParams.put("fileMetadata", fileMetadata);
        if (displayName != null)
        localVarFormParams.put("displayName", displayName);
        if (groupMembershipAttr != null)
        localVarFormParams.put("groupMembershipAttr", groupMembershipAttr);
        if (authorizationEnabled != null)
        localVarFormParams.put("authorizationEnabled", authorizationEnabled);
        if (logoutUrl != null)
        localVarFormParams.put("logoutUrl", logoutUrl);
        if (entityIdentifier != null)
        localVarFormParams.put("entityIdentifier", entityIdentifier);
        if (samlProviderType != null)
        localVarFormParams.put("samlProviderType", samlProviderType);
        if (clientId != null)
        localVarFormParams.put("clientId", clientId);
        if (clientSecret != null)
        localVarFormParams.put("clientSecret", clientSecret);

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadSamlMetaDataValidateBeforeCall(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling uploadSamlMetaData(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadSamlMetaDataCall(accountId, file, fileMetadata, displayName, groupMembershipAttr, authorizationEnabled, logoutUrl, entityIdentifier, samlProviderType, clientId, clientSecret, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Uploads the SAML metadata by accountId
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @param file  (optional)
     * @param fileMetadata  (optional)
     * @param displayName  (optional)
     * @param groupMembershipAttr  (optional)
     * @param authorizationEnabled  (optional)
     * @param logoutUrl  (optional)
     * @param entityIdentifier  (optional)
     * @param samlProviderType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return RestResponseSSOConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseSSOConfig uploadSamlMetaData(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret) throws ApiException {
        ApiResponse<RestResponseSSOConfig> resp = uploadSamlMetaDataWithHttpInfo(accountId, file, fileMetadata, displayName, groupMembershipAttr, authorizationEnabled, logoutUrl, entityIdentifier, samlProviderType, clientId, clientSecret);
        return resp.getData();
    }

    /**
     * Uploads the SAML metadata by accountId
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @param file  (optional)
     * @param fileMetadata  (optional)
     * @param displayName  (optional)
     * @param groupMembershipAttr  (optional)
     * @param authorizationEnabled  (optional)
     * @param logoutUrl  (optional)
     * @param entityIdentifier  (optional)
     * @param samlProviderType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return ApiResponse&lt;RestResponseSSOConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseSSOConfig> uploadSamlMetaDataWithHttpInfo(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret) throws ApiException {
        com.squareup.okhttp.Call call = uploadSamlMetaDataValidateBeforeCall(accountId, file, fileMetadata, displayName, groupMembershipAttr, authorizationEnabled, logoutUrl, entityIdentifier, samlProviderType, clientId, clientSecret, null, null);
        Type localVarReturnType = new TypeToken<RestResponseSSOConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Uploads the SAML metadata by accountId (asynchronously)
     * 
     * @param accountId Account Identifier for the Entity (required)
     * @param file  (optional)
     * @param fileMetadata  (optional)
     * @param displayName  (optional)
     * @param groupMembershipAttr  (optional)
     * @param authorizationEnabled  (optional)
     * @param logoutUrl  (optional)
     * @param entityIdentifier  (optional)
     * @param samlProviderType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadSamlMetaDataAsync(String accountId, Object file, FormDataContentDisposition fileMetadata, String displayName, String groupMembershipAttr, Boolean authorizationEnabled, String logoutUrl, String entityIdentifier, String samlProviderType, String clientId, String clientSecret, final ApiCallback<RestResponseSSOConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadSamlMetaDataValidateBeforeCall(accountId, file, fileMetadata, displayName, groupMembershipAttr, authorizationEnabled, logoutUrl, entityIdentifier, samlProviderType, clientId, clientSecret, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseSSOConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
