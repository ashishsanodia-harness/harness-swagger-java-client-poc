/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Connector;
import io.swagger.client.model.ConnectorFilterProperties;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOConnectorCatalogueResponse;
import io.swagger.client.model.ResponseDTOConnectorResponse;
import io.swagger.client.model.ResponseDTOConnectorStatistics;
import io.swagger.client.model.ResponseDTOConnectorValidationResult;
import io.swagger.client.model.ResponseDTOFieldValues;
import io.swagger.client.model.ResponseDTOListConnectorResponse;
import io.swagger.client.model.ResponseDTOPageResponseConnectorResponse;
import io.swagger.client.model.ResponseDTOString;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectorsApi {
    private ApiClient apiClient;

    public ConnectorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectorsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createConnector
     * @param body Details of the Connector to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createConnectorCall(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (isNewBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isNewBranch", isNewBranch));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml", "text/html", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createConnectorValidateBeforeCall(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createConnector(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createConnector(Async)");
        }
        
        com.squareup.okhttp.Call call = createConnectorCall(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Connector
     * 
     * @param body Details of the Connector to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOConnectorResponse createConnector(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOConnectorResponse> resp = createConnectorWithHttpInfo(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch);
        return resp.getData();
    }

    /**
     * Creates a Connector
     * 
     * @param body Details of the Connector to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOConnectorResponse> createConnectorWithHttpInfo(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = createConnectorValidateBeforeCall(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Connector (asynchronously)
     * 
     * @param body Details of the Connector to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createConnectorAsync(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ApiCallback<ResponseDTOConnectorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createConnectorValidateBeforeCall(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteConnector
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteConnectorCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (lastObjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastObjectId", lastObjectId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConnectorValidateBeforeCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteConnector(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteConnector(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteConnectorCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes Connector by ID
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deleteConnector(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deleteConnectorWithHttpInfo(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId);
        return resp.getData();
    }

    /**
     * Deletes Connector by ID
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deleteConnectorWithHttpInfo(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteConnectorValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes Connector by ID (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteConnectorAsync(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConnectorValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAllowedFieldValues
     * @param connectorType Connector type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAllowedFieldValuesCall(String connectorType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/fieldValues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (connectorType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("connectorType", connectorType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAllowedFieldValuesValidateBeforeCall(String connectorType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling getAllAllowedFieldValues(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllAllowedFieldValuesCall(connectorType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the allowed field values by Connector Type
     * 
     * @param connectorType Connector type (required)
     * @return ResponseDTOFieldValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOFieldValues getAllAllowedFieldValues(String connectorType) throws ApiException {
        ApiResponse<ResponseDTOFieldValues> resp = getAllAllowedFieldValuesWithHttpInfo(connectorType);
        return resp.getData();
    }

    /**
     * Get the allowed field values by Connector Type
     * 
     * @param connectorType Connector type (required)
     * @return ApiResponse&lt;ResponseDTOFieldValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOFieldValues> getAllAllowedFieldValuesWithHttpInfo(String connectorType) throws ApiException {
        com.squareup.okhttp.Call call = getAllAllowedFieldValuesValidateBeforeCall(connectorType, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOFieldValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the allowed field values by Connector Type (asynchronously)
     * 
     * @param connectorType Connector type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAllowedFieldValuesAsync(String connectorType, final ApiCallback<ResponseDTOFieldValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAllowedFieldValuesValidateBeforeCall(connectorType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOFieldValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCEAwsTemplate
     * @param eventsEnabled Specify whether or not to enable events (optional)
     * @param curEnabled Specify whether or not to enable CUR (optional)
     * @param optimizationEnabled Specify whether or not to enable optimization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCEAwsTemplateCall(Boolean eventsEnabled, Boolean curEnabled, Boolean optimizationEnabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/getceawstemplateurl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventsEnabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eventsEnabled", eventsEnabled));
        if (curEnabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("curEnabled", curEnabled));
        if (optimizationEnabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("optimizationEnabled", optimizationEnabled));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCEAwsTemplateValidateBeforeCall(Boolean eventsEnabled, Boolean curEnabled, Boolean optimizationEnabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCEAwsTemplateCall(eventsEnabled, curEnabled, optimizationEnabled, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Template URL of connector
     * 
     * @param eventsEnabled Specify whether or not to enable events (optional)
     * @param curEnabled Specify whether or not to enable CUR (optional)
     * @param optimizationEnabled Specify whether or not to enable optimization (optional)
     * @return ResponseDTOString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOString getCEAwsTemplate(Boolean eventsEnabled, Boolean curEnabled, Boolean optimizationEnabled) throws ApiException {
        ApiResponse<ResponseDTOString> resp = getCEAwsTemplateWithHttpInfo(eventsEnabled, curEnabled, optimizationEnabled);
        return resp.getData();
    }

    /**
     * Get the Template URL of connector
     * 
     * @param eventsEnabled Specify whether or not to enable events (optional)
     * @param curEnabled Specify whether or not to enable CUR (optional)
     * @param optimizationEnabled Specify whether or not to enable optimization (optional)
     * @return ApiResponse&lt;ResponseDTOString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOString> getCEAwsTemplateWithHttpInfo(Boolean eventsEnabled, Boolean curEnabled, Boolean optimizationEnabled) throws ApiException {
        com.squareup.okhttp.Call call = getCEAwsTemplateValidateBeforeCall(eventsEnabled, curEnabled, optimizationEnabled, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Template URL of connector (asynchronously)
     * 
     * @param eventsEnabled Specify whether or not to enable events (optional)
     * @param curEnabled Specify whether or not to enable CUR (optional)
     * @param optimizationEnabled Specify whether or not to enable optimization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCEAwsTemplateAsync(Boolean eventsEnabled, Boolean curEnabled, Boolean optimizationEnabled, final ApiCallback<ResponseDTOString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCEAwsTemplateValidateBeforeCall(eventsEnabled, curEnabled, optimizationEnabled, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnector
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector Identifier (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectorCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectorValidateBeforeCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getConnector(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getConnector(Async)");
        }
        
        com.squareup.okhttp.Call call = getConnectorCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Connector by accountIdentifier and connectorIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector Identifier (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOConnectorResponse getConnector(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOConnectorResponse> resp = getConnectorWithHttpInfo(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Get the Connector by accountIdentifier and connectorIdentifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector Identifier (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOConnectorResponse> getConnectorWithHttpInfo(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getConnectorValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Connector by accountIdentifier and connectorIdentifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector Identifier (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectorAsync(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOConnectorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectorValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnectorCatalogue
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectorCatalogueCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/catalogue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectorCatalogueValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getConnectorCatalogue(Async)");
        }
        
        com.squareup.okhttp.Call call = getConnectorCatalogueCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the Connector catalogue by Account Identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOConnectorCatalogueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOConnectorCatalogueResponse getConnectorCatalogue(String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOConnectorCatalogueResponse> resp = getConnectorCatalogueWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Gets the Connector catalogue by Account Identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOConnectorCatalogueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOConnectorCatalogueResponse> getConnectorCatalogueWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getConnectorCatalogueValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorCatalogueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the Connector catalogue by Account Identifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectorCatalogueAsync(String accountIdentifier, final ApiCallback<ResponseDTOConnectorCatalogueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectorCatalogueValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorCatalogueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnectorList
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param pageIndex Page number of navigation. The default value is 0 (optional, default to 0)
     * @param pageSize Number of entries per page. The default value is 100 (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param type Filter Connectors by type (optional)
     * @param category Filter Connectors by category (optional)
     * @param sourceCategory Filter Connectors by Source Category. Available Source Categories are CLOUD_PROVIDER, SECRET_MANAGER, CLOUD_COST, ARTIFACTORY, CODE_REPO,  MONITORING and TICKETING (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectorListCall(String accountIdentifier, Integer pageIndex, Integer pageSize, String orgIdentifier, String projectIdentifier, String searchTerm, String type, String category, String sourceCategory, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (sourceCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_category", sourceCategory));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectorListValidateBeforeCall(String accountIdentifier, Integer pageIndex, Integer pageSize, String orgIdentifier, String projectIdentifier, String searchTerm, String type, String category, String sourceCategory, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getConnectorList(Async)");
        }
        
        com.squareup.okhttp.Call call = getConnectorListCall(accountIdentifier, pageIndex, pageSize, orgIdentifier, projectIdentifier, searchTerm, type, category, sourceCategory, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches the list of Connectors corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param pageIndex Page number of navigation. The default value is 0 (optional, default to 0)
     * @param pageSize Number of entries per page. The default value is 100 (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param type Filter Connectors by type (optional)
     * @param category Filter Connectors by category (optional)
     * @param sourceCategory Filter Connectors by Source Category. Available Source Categories are CLOUD_PROVIDER, SECRET_MANAGER, CLOUD_COST, ARTIFACTORY, CODE_REPO,  MONITORING and TICKETING (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOPageResponseConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseConnectorResponse getConnectorList(String accountIdentifier, Integer pageIndex, Integer pageSize, String orgIdentifier, String projectIdentifier, String searchTerm, String type, String category, String sourceCategory, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOPageResponseConnectorResponse> resp = getConnectorListWithHttpInfo(accountIdentifier, pageIndex, pageSize, orgIdentifier, projectIdentifier, searchTerm, type, category, sourceCategory, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Fetches the list of Connectors corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param pageIndex Page number of navigation. The default value is 0 (optional, default to 0)
     * @param pageSize Number of entries per page. The default value is 100 (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param type Filter Connectors by type (optional)
     * @param category Filter Connectors by category (optional)
     * @param sourceCategory Filter Connectors by Source Category. Available Source Categories are CLOUD_PROVIDER, SECRET_MANAGER, CLOUD_COST, ARTIFACTORY, CODE_REPO,  MONITORING and TICKETING (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseConnectorResponse> getConnectorListWithHttpInfo(String accountIdentifier, Integer pageIndex, Integer pageSize, String orgIdentifier, String projectIdentifier, String searchTerm, String type, String category, String sourceCategory, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getConnectorListValidateBeforeCall(accountIdentifier, pageIndex, pageSize, orgIdentifier, projectIdentifier, searchTerm, type, category, sourceCategory, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseConnectorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches the list of Connectors corresponding to the request&#x27;s filter criteria. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param pageIndex Page number of navigation. The default value is 0 (optional, default to 0)
     * @param pageSize Number of entries per page. The default value is 100 (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param type Filter Connectors by type (optional)
     * @param category Filter Connectors by category (optional)
     * @param sourceCategory Filter Connectors by Source Category. Available Source Categories are CLOUD_PROVIDER, SECRET_MANAGER, CLOUD_COST, ARTIFACTORY, CODE_REPO,  MONITORING and TICKETING (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectorListAsync(String accountIdentifier, Integer pageIndex, Integer pageSize, String orgIdentifier, String projectIdentifier, String searchTerm, String type, String category, String sourceCategory, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOPageResponseConnectorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectorListValidateBeforeCall(accountIdentifier, pageIndex, pageSize, orgIdentifier, projectIdentifier, searchTerm, type, category, sourceCategory, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseConnectorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnectorListV2
     * @param body Details of the filters applied (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param pageIndex Page number of navigation. The default value is 0 (optional, default to 0)
     * @param pageSize Number of entries per page. The default value is 100 (optional, default to 100)
     * @param searchTerm This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param filterIdentifier  (optional)
     * @param includeAllConnectorsAvailableAtScope Specify whether or not to include all the Connectors accessible at the scope. For eg if set as true, at the Project scope we will get org and account Connector also in the response (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param getDistinctFromBranches This when set to true along with GitSync enabled for the Connector, you can to get other Connectors too which are not from same repo - branch but different repo&#x27;s default branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectorListV2Call(ConnectorFilterProperties body, String accountIdentifier, Integer pageIndex, Integer pageSize, String searchTerm, String orgIdentifier, String projectIdentifier, String filterIdentifier, Boolean includeAllConnectorsAvailableAtScope, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/listV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (filterIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filterIdentifier", filterIdentifier));
        if (includeAllConnectorsAvailableAtScope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeAllConnectorsAvailableAtScope", includeAllConnectorsAvailableAtScope));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (getDistinctFromBranches != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDistinctFromBranches", getDistinctFromBranches));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml", "text/html", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectorListV2ValidateBeforeCall(ConnectorFilterProperties body, String accountIdentifier, Integer pageIndex, Integer pageSize, String searchTerm, String orgIdentifier, String projectIdentifier, String filterIdentifier, Boolean includeAllConnectorsAvailableAtScope, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getConnectorListV2(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getConnectorListV2(Async)");
        }
        
        com.squareup.okhttp.Call call = getConnectorListV2Call(body, accountIdentifier, pageIndex, pageSize, searchTerm, orgIdentifier, projectIdentifier, filterIdentifier, includeAllConnectorsAvailableAtScope, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches the list of Connectors corresponding to the request&#x27;s filter criteria.
     * 
     * @param body Details of the filters applied (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param pageIndex Page number of navigation. The default value is 0 (optional, default to 0)
     * @param pageSize Number of entries per page. The default value is 100 (optional, default to 100)
     * @param searchTerm This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param filterIdentifier  (optional)
     * @param includeAllConnectorsAvailableAtScope Specify whether or not to include all the Connectors accessible at the scope. For eg if set as true, at the Project scope we will get org and account Connector also in the response (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param getDistinctFromBranches This when set to true along with GitSync enabled for the Connector, you can to get other Connectors too which are not from same repo - branch but different repo&#x27;s default branch (optional)
     * @return ResponseDTOPageResponseConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseConnectorResponse getConnectorListV2(ConnectorFilterProperties body, String accountIdentifier, Integer pageIndex, Integer pageSize, String searchTerm, String orgIdentifier, String projectIdentifier, String filterIdentifier, Boolean includeAllConnectorsAvailableAtScope, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches) throws ApiException {
        ApiResponse<ResponseDTOPageResponseConnectorResponse> resp = getConnectorListV2WithHttpInfo(body, accountIdentifier, pageIndex, pageSize, searchTerm, orgIdentifier, projectIdentifier, filterIdentifier, includeAllConnectorsAvailableAtScope, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches);
        return resp.getData();
    }

    /**
     * Fetches the list of Connectors corresponding to the request&#x27;s filter criteria.
     * 
     * @param body Details of the filters applied (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param pageIndex Page number of navigation. The default value is 0 (optional, default to 0)
     * @param pageSize Number of entries per page. The default value is 100 (optional, default to 100)
     * @param searchTerm This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param filterIdentifier  (optional)
     * @param includeAllConnectorsAvailableAtScope Specify whether or not to include all the Connectors accessible at the scope. For eg if set as true, at the Project scope we will get org and account Connector also in the response (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param getDistinctFromBranches This when set to true along with GitSync enabled for the Connector, you can to get other Connectors too which are not from same repo - branch but different repo&#x27;s default branch (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseConnectorResponse> getConnectorListV2WithHttpInfo(ConnectorFilterProperties body, String accountIdentifier, Integer pageIndex, Integer pageSize, String searchTerm, String orgIdentifier, String projectIdentifier, String filterIdentifier, Boolean includeAllConnectorsAvailableAtScope, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches) throws ApiException {
        com.squareup.okhttp.Call call = getConnectorListV2ValidateBeforeCall(body, accountIdentifier, pageIndex, pageSize, searchTerm, orgIdentifier, projectIdentifier, filterIdentifier, includeAllConnectorsAvailableAtScope, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseConnectorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches the list of Connectors corresponding to the request&#x27;s filter criteria. (asynchronously)
     * 
     * @param body Details of the filters applied (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param pageIndex Page number of navigation. The default value is 0 (optional, default to 0)
     * @param pageSize Number of entries per page. The default value is 100 (optional, default to 100)
     * @param searchTerm This would be used to filter Connectors. Any Connector having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param filterIdentifier  (optional)
     * @param includeAllConnectorsAvailableAtScope Specify whether or not to include all the Connectors accessible at the scope. For eg if set as true, at the Project scope we will get org and account Connector also in the response (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param getDistinctFromBranches This when set to true along with GitSync enabled for the Connector, you can to get other Connectors too which are not from same repo - branch but different repo&#x27;s default branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectorListV2Async(ConnectorFilterProperties body, String accountIdentifier, Integer pageIndex, Integer pageSize, String searchTerm, String orgIdentifier, String projectIdentifier, String filterIdentifier, Boolean includeAllConnectorsAvailableAtScope, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches, final ApiCallback<ResponseDTOPageResponseConnectorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectorListV2ValidateBeforeCall(body, accountIdentifier, pageIndex, pageSize, searchTerm, orgIdentifier, projectIdentifier, filterIdentifier, includeAllConnectorsAvailableAtScope, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseConnectorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnectorStatistics
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectorStatisticsCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectorStatisticsValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getConnectorStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getConnectorStatisticsCall(accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the connector&#x27;s statistics by Account Identifier, Project Identifier and Organization Identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOConnectorStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOConnectorStatistics getConnectorStatistics(String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOConnectorStatistics> resp = getConnectorStatisticsWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Gets the connector&#x27;s statistics by Account Identifier, Project Identifier and Organization Identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOConnectorStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOConnectorStatistics> getConnectorStatisticsWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getConnectorStatisticsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the connector&#x27;s statistics by Account Identifier, Project Identifier and Organization Identifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectorStatisticsAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOConnectorStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectorStatisticsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestConnectionResult
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestConnectionResultCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/testConnection/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestConnectionResultValidateBeforeCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getTestConnectionResult(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getTestConnectionResult(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestConnectionResultCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Tests the connection of the Connector by ID
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOConnectorValidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOConnectorValidationResult getTestConnectionResult(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOConnectorValidationResult> resp = getTestConnectionResultWithHttpInfo(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Tests the connection of the Connector by ID
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOConnectorValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOConnectorValidationResult> getTestConnectionResultWithHttpInfo(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getTestConnectionResultValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorValidationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Tests the connection of the Connector by ID (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestConnectionResultAsync(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOConnectorValidationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestConnectionResultValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorValidationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestGitRepoConnectionResult
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param repoURL URL of the repository, specify only in the case of Account Type Git Connector (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestGitRepoConnectionResultCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String repoURL, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/testGitRepoConnection/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (repoURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoURL", repoURL));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestGitRepoConnectionResultValidateBeforeCall(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String repoURL, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getTestGitRepoConnectionResult(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getTestGitRepoConnectionResult(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestGitRepoConnectionResultCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, repoURL, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Tests the Git Repo connection
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param repoURL URL of the repository, specify only in the case of Account Type Git Connector (optional)
     * @return ResponseDTOConnectorValidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOConnectorValidationResult getTestGitRepoConnectionResult(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String repoURL) throws ApiException {
        ApiResponse<ResponseDTOConnectorValidationResult> resp = getTestGitRepoConnectionResultWithHttpInfo(accountIdentifier, identifier, orgIdentifier, projectIdentifier, repoURL);
        return resp.getData();
    }

    /**
     * Tests the Git Repo connection
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param repoURL URL of the repository, specify only in the case of Account Type Git Connector (optional)
     * @return ApiResponse&lt;ResponseDTOConnectorValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOConnectorValidationResult> getTestGitRepoConnectionResultWithHttpInfo(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String repoURL) throws ApiException {
        com.squareup.okhttp.Call call = getTestGitRepoConnectionResultValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, repoURL, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorValidationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Tests the Git Repo connection (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Connector ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param repoURL URL of the repository, specify only in the case of Account Type Git Connector (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestGitRepoConnectionResultAsync(String accountIdentifier, String identifier, String orgIdentifier, String projectIdentifier, String repoURL, final ApiCallback<ResponseDTOConnectorValidationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestGitRepoConnectionResultValidateBeforeCall(accountIdentifier, identifier, orgIdentifier, projectIdentifier, repoURL, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorValidationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listConnectorByFQN
     * @param body List of ConnectorsFQN as strings (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listConnectorByFQNCall(List<String> body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/listbyfqn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml", "text/html", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listConnectorByFQNValidateBeforeCall(List<String> body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listConnectorByFQN(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling listConnectorByFQN(Async)");
        }
        
        com.squareup.okhttp.Call call = listConnectorByFQNCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of connectors by FQN satisfying the criteria (if any) in the request
     * 
     * @param body List of ConnectorsFQN as strings (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOListConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListConnectorResponse listConnectorByFQN(List<String> body, String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOListConnectorResponse> resp = listConnectorByFQNWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get the list of connectors by FQN satisfying the criteria (if any) in the request
     * 
     * @param body List of ConnectorsFQN as strings (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOListConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListConnectorResponse> listConnectorByFQNWithHttpInfo(List<String> body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = listConnectorByFQNValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListConnectorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of connectors by FQN satisfying the criteria (if any) in the request (asynchronously)
     * 
     * @param body List of ConnectorsFQN as strings (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listConnectorByFQNAsync(List<String> body, String accountIdentifier, final ApiCallback<ResponseDTOListConnectorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listConnectorByFQNValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListConnectorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConnector
     * @param body This is the updated Connector. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConnectorCall(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (lastObjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastObjectId", lastObjectId));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml", "text/html", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConnectorValidateBeforeCall(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateConnector(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateConnector(Async)");
        }
        
        com.squareup.okhttp.Call call = updateConnectorCall(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the Connector
     * 
     * @param body This is the updated Connector. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOConnectorResponse updateConnector(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOConnectorResponse> resp = updateConnectorWithHttpInfo(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch);
        return resp.getData();
    }

    /**
     * Updates the Connector
     * 
     * @param body This is the updated Connector. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOConnectorResponse> updateConnectorWithHttpInfo(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = updateConnectorValidateBeforeCall(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the Connector (asynchronously)
     * 
     * @param body This is the updated Connector. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConnectorAsync(Connector body, String accountIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ApiCallback<ResponseDTOConnectorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConnectorValidateBeforeCall(body, accountIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOConnectorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateTheIdentifierIsUnique
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifier Connector ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateTheIdentifierIsUniqueCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/connectors/validateUniqueIdentifier";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (identifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("identifier", identifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateTheIdentifierIsUniqueValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling validateTheIdentifierIsUnique(Async)");
        }
        
        com.squareup.okhttp.Call call = validateTheIdentifierIsUniqueCall(accountIdentifier, orgIdentifier, projectIdentifier, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate the Connector by Account Identifier and Connector Identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifier Connector ID (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean validateTheIdentifierIsUnique(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = validateTheIdentifierIsUniqueWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, identifier);
        return resp.getData();
    }

    /**
     * Validate the Connector by Account Identifier and Connector Identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifier Connector ID (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> validateTheIdentifierIsUniqueWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier) throws ApiException {
        com.squareup.okhttp.Call call = validateTheIdentifierIsUniqueValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, identifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate the Connector by Account Identifier and Connector Identifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifier Connector ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateTheIdentifierIsUniqueAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String identifier, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateTheIdentifierIsUniqueValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
