/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.OrganizationRequest;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOOrganizationResponse;
import io.swagger.client.model.ResponseDTOPageResponseOrganizationResponse;
import io.swagger.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApi {
    private ApiClient apiClient;

    public OrganizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteOrganization
     * @param identifier Organization Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch Version number of the Organization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrganizationCall(String identifier, String accountIdentifier, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/organizations/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrganizationValidateBeforeCall(String identifier, String accountIdentifier, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteOrganization(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteOrganization(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteOrganizationCall(identifier, accountIdentifier, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes the Organization corresponding to the specified Organization ID.
     * 
     * @param identifier Organization Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch Version number of the Organization (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deleteOrganization(String identifier, String accountIdentifier, String ifMatch) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deleteOrganizationWithHttpInfo(identifier, accountIdentifier, ifMatch);
        return resp.getData();
    }

    /**
     * Deletes the Organization corresponding to the specified Organization ID.
     * 
     * @param identifier Organization Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch Version number of the Organization (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deleteOrganizationWithHttpInfo(String identifier, String accountIdentifier, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrganizationValidateBeforeCall(identifier, accountIdentifier, ifMatch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the Organization corresponding to the specified Organization ID. (asynchronously)
     * 
     * @param identifier Organization Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch Version number of the Organization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrganizationAsync(String identifier, String accountIdentifier, String ifMatch, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrganizationValidateBeforeCall(identifier, accountIdentifier, ifMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrganization
     * @param identifier Organization Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrganizationCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/organizations/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrganizationValidateBeforeCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getOrganization(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getOrganization(Async)");
        }
        
        com.squareup.okhttp.Call call = getOrganizationCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Organization by accountIdentifier and orgIdentifier
     * 
     * @param identifier Organization Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOOrganizationResponse getOrganization(String identifier, String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOOrganizationResponse> resp = getOrganizationWithHttpInfo(identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Get the Organization by accountIdentifier and orgIdentifier
     * 
     * @param identifier Organization Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOOrganizationResponse> getOrganizationWithHttpInfo(String identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getOrganizationValidateBeforeCall(identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOOrganizationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Organization by accountIdentifier and orgIdentifier (asynchronously)
     * 
     * @param identifier Organization Identifier for the Entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrganizationAsync(String identifier, String accountIdentifier, final ApiCallback<ResponseDTOOrganizationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrganizationValidateBeforeCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOOrganizationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrganizationList
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifiers This is the list of Org Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param searchTerm This would be used to filter Organizations. Any Organization having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrganizationListCall(String accountIdentifier, List<String> identifiers, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (identifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "identifiers", identifiers));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrganizationListValidateBeforeCall(String accountIdentifier, List<String> identifiers, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getOrganizationList(Async)");
        }
        
        com.squareup.okhttp.Call call = getOrganizationListCall(accountIdentifier, identifiers, searchTerm, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of Organizations satisfying the criteria (if any) in the request
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifiers This is the list of Org Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param searchTerm This would be used to filter Organizations. Any Organization having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ResponseDTOPageResponseOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseOrganizationResponse getOrganizationList(String accountIdentifier, List<String> identifiers, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        ApiResponse<ResponseDTOPageResponseOrganizationResponse> resp = getOrganizationListWithHttpInfo(accountIdentifier, identifiers, searchTerm, pageIndex, pageSize, sortOrders);
        return resp.getData();
    }

    /**
     * Get the list of Organizations satisfying the criteria (if any) in the request
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifiers This is the list of Org Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param searchTerm This would be used to filter Organizations. Any Organization having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseOrganizationResponse> getOrganizationListWithHttpInfo(String accountIdentifier, List<String> identifiers, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        com.squareup.okhttp.Call call = getOrganizationListValidateBeforeCall(accountIdentifier, identifiers, searchTerm, pageIndex, pageSize, sortOrders, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseOrganizationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of Organizations satisfying the criteria (if any) in the request (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifiers This is the list of Org Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param searchTerm This would be used to filter Organizations. Any Organization having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrganizationListAsync(String accountIdentifier, List<String> identifiers, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ApiCallback<ResponseDTOPageResponseOrganizationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrganizationListValidateBeforeCall(accountIdentifier, identifiers, searchTerm, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseOrganizationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOrganization
     * @param body Details of the Organization to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOrganizationCall(OrganizationRequest body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOrganizationValidateBeforeCall(OrganizationRequest body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOrganization(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postOrganization(Async)");
        }
        
        com.squareup.okhttp.Call call = postOrganizationCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates an Organization
     * 
     * @param body Details of the Organization to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOOrganizationResponse postOrganization(OrganizationRequest body, String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOOrganizationResponse> resp = postOrganizationWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Creates an Organization
     * 
     * @param body Details of the Organization to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOOrganizationResponse> postOrganizationWithHttpInfo(OrganizationRequest body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postOrganizationValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOOrganizationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an Organization (asynchronously)
     * 
     * @param body Details of the Organization to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOrganizationAsync(OrganizationRequest body, String accountIdentifier, final ApiCallback<ResponseDTOOrganizationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOrganizationValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOOrganizationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putOrganization
     * @param body This is the updated Organization. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Organization Identifier for the Entity (required)
     * @param ifMatch Version number of the Organization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putOrganizationCall(OrganizationRequest body, String accountIdentifier, String identifier, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/organizations/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putOrganizationValidateBeforeCall(OrganizationRequest body, String accountIdentifier, String identifier, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganization(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling putOrganization(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling putOrganization(Async)");
        }
        
        com.squareup.okhttp.Call call = putOrganizationCall(body, accountIdentifier, identifier, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the Organization
     * 
     * @param body This is the updated Organization. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Organization Identifier for the Entity (required)
     * @param ifMatch Version number of the Organization (optional)
     * @return ResponseDTOOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOOrganizationResponse putOrganization(OrganizationRequest body, String accountIdentifier, String identifier, String ifMatch) throws ApiException {
        ApiResponse<ResponseDTOOrganizationResponse> resp = putOrganizationWithHttpInfo(body, accountIdentifier, identifier, ifMatch);
        return resp.getData();
    }

    /**
     * Updates the Organization
     * 
     * @param body This is the updated Organization. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Organization Identifier for the Entity (required)
     * @param ifMatch Version number of the Organization (optional)
     * @return ApiResponse&lt;ResponseDTOOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOOrganizationResponse> putOrganizationWithHttpInfo(OrganizationRequest body, String accountIdentifier, String identifier, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = putOrganizationValidateBeforeCall(body, accountIdentifier, identifier, ifMatch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOOrganizationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the Organization (asynchronously)
     * 
     * @param body This is the updated Organization. Please provide values for all fields, not just the fields you are updating (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param identifier Organization Identifier for the Entity (required)
     * @param ifMatch Version number of the Organization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putOrganizationAsync(OrganizationRequest body, String accountIdentifier, String identifier, String ifMatch, final ApiCallback<ResponseDTOOrganizationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putOrganizationValidateBeforeCall(body, accountIdentifier, identifier, ifMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOOrganizationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
