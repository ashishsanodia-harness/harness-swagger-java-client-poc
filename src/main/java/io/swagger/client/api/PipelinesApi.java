/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.FilterProperties;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOExecutionNode;
import io.swagger.client.model.ResponseDTOPMSPipelineResponse;
import io.swagger.client.model.ResponseDTOPMSPipelineSummaryResponse;
import io.swagger.client.model.ResponseDTOPagePMSPipelineSummaryResponse;
import io.swagger.client.model.ResponseDTOPipelineExpandedJson;
import io.swagger.client.model.ResponseDTOPipelineSaveResponse;
import io.swagger.client.model.ResponseDTOStepCategory;
import io.swagger.client.model.ResponseDTOString;
import io.swagger.client.model.ResponseDTOVariableMergeServiceResponse;
import io.swagger.client.model.StepPalleteFilterWrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelinesApi {
    private ApiClient apiClient;

    public PipelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createVariables
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createVariablesCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVariablesValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createVariables(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createVariables(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling createVariables(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling createVariables(Async)");
        }
        
        com.squareup.okhttp.Call call = createVariablesCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all the Variables which can be used as expression in the Pipeline.
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @return ResponseDTOVariableMergeServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOVariableMergeServiceResponse createVariables(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOVariableMergeServiceResponse> resp = createVariablesWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Get all the Variables which can be used as expression in the Pipeline.
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @return ApiResponse&lt;ResponseDTOVariableMergeServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOVariableMergeServiceResponse> createVariablesWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createVariablesValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOVariableMergeServiceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all the Variables which can be used as expression in the Pipeline. (asynchronously)
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVariablesAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOVariableMergeServiceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVariablesValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOVariableMergeServiceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePipeline
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePipelineCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/{pipelineIdentifier}"
            .replaceAll("\\{" + "pipelineIdentifier" + "\\}", apiClient.escapeString(pipelineIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (lastObjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastObjectId", lastObjectId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePipelineValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deletePipeline(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling deletePipeline(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling deletePipeline(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling deletePipeline(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePipelineCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deletePipeline(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deletePipelineWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId);
        return resp.getData();
    }

    /**
     * Deletes a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deletePipelineWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId) throws ApiException {
        com.squareup.okhttp.Call call = deletePipelineValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Pipeline (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePipelineAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePipelineValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExecutionNode
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param nodeExecutionId Id for the corresponding Node Execution (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExecutionNodeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String nodeExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/getExecutionNode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (nodeExecutionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodeExecutionId", nodeExecutionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExecutionNodeValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String nodeExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getExecutionNode(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getExecutionNode(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getExecutionNode(Async)");
        }
        // verify the required parameter 'nodeExecutionId' is set
        if (nodeExecutionId == null) {
            throw new ApiException("Missing the required parameter 'nodeExecutionId' when calling getExecutionNode(Async)");
        }
        
        com.squareup.okhttp.Call call = getExecutionNodeCall(accountIdentifier, orgIdentifier, projectIdentifier, nodeExecutionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Execution Node by Execution Id
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param nodeExecutionId Id for the corresponding Node Execution (required)
     * @return ResponseDTOExecutionNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOExecutionNode getExecutionNode(String accountIdentifier, String orgIdentifier, String projectIdentifier, String nodeExecutionId) throws ApiException {
        ApiResponse<ResponseDTOExecutionNode> resp = getExecutionNodeWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, nodeExecutionId);
        return resp.getData();
    }

    /**
     * Get the Execution Node by Execution Id
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param nodeExecutionId Id for the corresponding Node Execution (required)
     * @return ApiResponse&lt;ResponseDTOExecutionNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOExecutionNode> getExecutionNodeWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String nodeExecutionId) throws ApiException {
        com.squareup.okhttp.Call call = getExecutionNodeValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, nodeExecutionId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOExecutionNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Execution Node by Execution Id (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param nodeExecutionId Id for the corresponding Node Execution (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExecutionNodeAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String nodeExecutionId, final ApiCallback<ResponseDTOExecutionNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExecutionNodeValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, nodeExecutionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOExecutionNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExpandedPipelineJSON
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExpandedPipelineJSONCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/expandedJSON/{pipelineIdentifier}"
            .replaceAll("\\{" + "pipelineIdentifier" + "\\}", apiClient.escapeString(pipelineIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExpandedPipelineJSONValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getExpandedPipelineJSON(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getExpandedPipelineJSON(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getExpandedPipelineJSON(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getExpandedPipelineJSON(Async)");
        }
        
        com.squareup.okhttp.Call call = getExpandedPipelineJSONCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Pipeline JSON with extra info for some fields
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOPipelineExpandedJson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPipelineExpandedJson getExpandedPipelineJSON(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOPipelineExpandedJson> resp = getExpandedPipelineJSONWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Gets Pipeline JSON with extra info for some fields
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOPipelineExpandedJson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPipelineExpandedJson> getExpandedPipelineJSONWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getExpandedPipelineJSONValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPipelineExpandedJson>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Pipeline JSON with extra info for some fields (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExpandedPipelineJSONAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOPipelineExpandedJson> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExpandedPipelineJSONValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPipelineExpandedJson>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNotificationSchema
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotificationSchemaCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/notification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNotificationSchemaValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getNotificationSchemaCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getNotificationSchema() throws ApiException {
        getNotificationSchemaWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getNotificationSchemaWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNotificationSchemaValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotificationSchemaAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotificationSchemaValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPipeline
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/{pipelineIdentifier}"
            .replaceAll("\\{" + "pipelineIdentifier" + "\\}", apiClient.escapeString(pipelineIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPipeline(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getPipeline(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getPipeline(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getPipeline(Async)");
        }
        
        com.squareup.okhttp.Call call = getPipelineCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a Pipeline by identifier
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOPMSPipelineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPMSPipelineResponse getPipeline(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOPMSPipelineResponse> resp = getPipelineWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Gets a Pipeline by identifier
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOPMSPipelineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPMSPipelineResponse> getPipelineWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPMSPipelineResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Pipeline by identifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOPMSPipelineResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPMSPipelineResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelineList
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body This is the body for the filter properties for listing pipelines. (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 25)
     * @param sort Sort criteria for the elements. (optional)
     * @param searchTerm Search term to filter out pipelines based on pipeline name, identifier, tags. (optional)
     * @param module  (optional)
     * @param filterIdentifier  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param getDistinctFromBranches Boolean flag to get distinct pipelines from all branches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineListCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, Integer page, Integer size, List<String> sort, String searchTerm, String module, String filterIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (module != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("module", module));
        if (filterIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filterIdentifier", filterIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (getDistinctFromBranches != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDistinctFromBranches", getDistinctFromBranches));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineListValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, Integer page, Integer size, List<String> sort, String searchTerm, String module, String filterIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPipelineList(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getPipelineList(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getPipelineList(Async)");
        }
        
        com.squareup.okhttp.Call call = getPipelineListCall(accountIdentifier, orgIdentifier, projectIdentifier, body, page, size, sort, searchTerm, module, filterIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List of pipelines
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body This is the body for the filter properties for listing pipelines. (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 25)
     * @param sort Sort criteria for the elements. (optional)
     * @param searchTerm Search term to filter out pipelines based on pipeline name, identifier, tags. (optional)
     * @param module  (optional)
     * @param filterIdentifier  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param getDistinctFromBranches Boolean flag to get distinct pipelines from all branches. (optional)
     * @return ResponseDTOPagePMSPipelineSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPagePMSPipelineSummaryResponse getPipelineList(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, Integer page, Integer size, List<String> sort, String searchTerm, String module, String filterIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches) throws ApiException {
        ApiResponse<ResponseDTOPagePMSPipelineSummaryResponse> resp = getPipelineListWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, body, page, size, sort, searchTerm, module, filterIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches);
        return resp.getData();
    }

    /**
     * List of pipelines
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body This is the body for the filter properties for listing pipelines. (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 25)
     * @param sort Sort criteria for the elements. (optional)
     * @param searchTerm Search term to filter out pipelines based on pipeline name, identifier, tags. (optional)
     * @param module  (optional)
     * @param filterIdentifier  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param getDistinctFromBranches Boolean flag to get distinct pipelines from all branches. (optional)
     * @return ApiResponse&lt;ResponseDTOPagePMSPipelineSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPagePMSPipelineSummaryResponse> getPipelineListWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, Integer page, Integer size, List<String> sort, String searchTerm, String module, String filterIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineListValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, body, page, size, sort, searchTerm, module, filterIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPagePMSPipelineSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of pipelines (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body This is the body for the filter properties for listing pipelines. (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 25)
     * @param sort Sort criteria for the elements. (optional)
     * @param searchTerm Search term to filter out pipelines based on pipeline name, identifier, tags. (optional)
     * @param module  (optional)
     * @param filterIdentifier  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param getDistinctFromBranches Boolean flag to get distinct pipelines from all branches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineListAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, FilterProperties body, Integer page, Integer size, List<String> sort, String searchTerm, String module, String filterIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean getDistinctFromBranches, final ApiCallback<ResponseDTOPagePMSPipelineSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineListValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, body, page, size, sort, searchTerm, module, filterIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, getDistinctFromBranches, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPagePMSPipelineSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelineSummary
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineSummaryCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/summary/{pipelineIdentifier}"
            .replaceAll("\\{" + "pipelineIdentifier" + "\\}", apiClient.escapeString(pipelineIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineSummaryValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPipelineSummary(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getPipelineSummary(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getPipelineSummary(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getPipelineSummary(Async)");
        }
        
        com.squareup.okhttp.Call call = getPipelineSummaryCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets pipeline summary by pipeline identifier
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOPMSPipelineSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPMSPipelineSummaryResponse getPipelineSummary(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOPMSPipelineSummaryResponse> resp = getPipelineSummaryWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Gets pipeline summary by pipeline identifier
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOPMSPipelineSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPMSPipelineSummaryResponse> getPipelineSummaryWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineSummaryValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPMSPipelineSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets pipeline summary by pipeline identifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineSummaryAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOPMSPipelineSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineSummaryValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPMSPipelineSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPmsStepNodes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPmsStepNodesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/dummy-pmsSteps-api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPmsStepNodesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getPmsStepNodesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPmsStepNodes() throws ApiException {
        getPmsStepNodesWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPmsStepNodesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPmsStepNodesValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPmsStepNodesAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPmsStepNodesValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getSteps
     * @param category Step Category for which you needs all its steps (required)
     * @param module Module of the step to which it belongs (required)
     * @param accountId Account Identifier for the entity. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStepsCall(String category, String module, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/steps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (module != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("module", module));
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStepsValidateBeforeCall(String category, String module, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getSteps(Async)");
        }
        // verify the required parameter 'module' is set
        if (module == null) {
            throw new ApiException("Missing the required parameter 'module' when calling getSteps(Async)");
        }
        
        com.squareup.okhttp.Call call = getStepsCall(category, module, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all the Steps for given Category
     * 
     * @param category Step Category for which you needs all its steps (required)
     * @param module Module of the step to which it belongs (required)
     * @param accountId Account Identifier for the entity. (optional)
     * @return ResponseDTOStepCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOStepCategory getSteps(String category, String module, String accountId) throws ApiException {
        ApiResponse<ResponseDTOStepCategory> resp = getStepsWithHttpInfo(category, module, accountId);
        return resp.getData();
    }

    /**
     * Gets all the Steps for given Category
     * 
     * @param category Step Category for which you needs all its steps (required)
     * @param module Module of the step to which it belongs (required)
     * @param accountId Account Identifier for the entity. (optional)
     * @return ApiResponse&lt;ResponseDTOStepCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOStepCategory> getStepsWithHttpInfo(String category, String module, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getStepsValidateBeforeCall(category, module, accountId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOStepCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all the Steps for given Category (asynchronously)
     * 
     * @param category Step Category for which you needs all its steps (required)
     * @param module Module of the step to which it belongs (required)
     * @param accountId Account Identifier for the entity. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStepsAsync(String category, String module, String accountId, final ApiCallback<ResponseDTOStepCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStepsValidateBeforeCall(category, module, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOStepCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStepsV2
     * @param body Step Pallete Filter request body (required)
     * @param accountId Account Identifier for the entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStepsV2Call(StepPalleteFilterWrapper body, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/v2/steps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountId", accountId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStepsV2ValidateBeforeCall(StepPalleteFilterWrapper body, String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getStepsV2(Async)");
        }
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getStepsV2(Async)");
        }
        
        com.squareup.okhttp.Call call = getStepsV2Call(body, accountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all the Steps for given Category (V2 Version)
     * 
     * @param body Step Pallete Filter request body (required)
     * @param accountId Account Identifier for the entity. (required)
     * @return ResponseDTOStepCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOStepCategory getStepsV2(StepPalleteFilterWrapper body, String accountId) throws ApiException {
        ApiResponse<ResponseDTOStepCategory> resp = getStepsV2WithHttpInfo(body, accountId);
        return resp.getData();
    }

    /**
     * Gets all the Steps for given Category (V2 Version)
     * 
     * @param body Step Pallete Filter request body (required)
     * @param accountId Account Identifier for the entity. (required)
     * @return ApiResponse&lt;ResponseDTOStepCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOStepCategory> getStepsV2WithHttpInfo(StepPalleteFilterWrapper body, String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getStepsV2ValidateBeforeCall(body, accountId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOStepCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all the Steps for given Category (V2 Version) (asynchronously)
     * 
     * @param body Step Pallete Filter request body (required)
     * @param accountId Account Identifier for the entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStepsV2Async(StepPalleteFilterWrapper body, String accountId, final ApiCallback<ResponseDTOStepCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStepsV2ValidateBeforeCall(body, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOStepCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTemplateStepNode
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTemplateStepNodeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/dummy-templateStep-api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTemplateStepNodeValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getTemplateStepNodeCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getTemplateStepNode() throws ApiException {
        getTemplateStepNodeWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getTemplateStepNodeWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTemplateStepNodeValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplateStepNodeAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplateStepNodeValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postPipeline
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPipelineCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (isNewBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isNewBranch", isNewBranch));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPipelineValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPipeline(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postPipeline(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postPipeline(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postPipeline(Async)");
        }
        
        com.squareup.okhttp.Call call = postPipelineCall(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Pipeline
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOString postPipeline(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOString> resp = postPipelineWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch);
        return resp.getData();
    }

    /**
     * Create a Pipeline
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOString> postPipelineWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = postPipelineValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Pipeline (asynchronously)
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPipelineAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ApiCallback<ResponseDTOString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPipelineValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPipelineV2
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPipelineV2Call(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (isNewBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isNewBranch", isNewBranch));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPipelineV2ValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPipelineV2(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postPipelineV2(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postPipelineV2(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postPipelineV2(Async)");
        }
        
        com.squareup.okhttp.Call call = postPipelineV2Call(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Pipeline API (V2 Version)
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOPipelineSaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPipelineSaveResponse postPipelineV2(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOPipelineSaveResponse> resp = postPipelineV2WithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch);
        return resp.getData();
    }

    /**
     * Create a Pipeline API (V2 Version)
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOPipelineSaveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPipelineSaveResponse> postPipelineV2WithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = postPipelineV2ValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPipelineSaveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Pipeline API (V2 Version) (asynchronously)
     * 
     * @param body Pipeline YAML (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPipelineV2Async(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ApiCallback<ResponseDTOPipelineSaveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPipelineV2ValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPipelineSaveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for refreshFFCache
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call refreshFFCacheCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/ffCache/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call refreshFFCacheValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling refreshFFCache(Async)");
        }
        
        com.squareup.okhttp.Call call = refreshFFCacheCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Refresh the feature flag cache
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean refreshFFCache(String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = refreshFFCacheWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Refresh the feature flag cache
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> refreshFFCacheWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = refreshFFCacheValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Refresh the feature flag cache (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refreshFFCacheAsync(String accountIdentifier, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = refreshFFCacheValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePipeline
     * @param body Pipeline YAML to be updated (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePipelineCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/{pipelineIdentifier}"
            .replaceAll("\\{" + "pipelineIdentifier" + "\\}", apiClient.escapeString(pipelineIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (lastObjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastObjectId", lastObjectId));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePipelineValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePipeline(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updatePipeline(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling updatePipeline(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling updatePipeline(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling updatePipeline(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePipelineCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Pipeline by identifier
     * 
     * @param body Pipeline YAML to be updated (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOString updatePipeline(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOString> resp = updatePipelineWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch);
        return resp.getData();
    }

    /**
     * Update a Pipeline by identifier
     * 
     * @param body Pipeline YAML to be updated (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOString> updatePipelineWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = updatePipelineValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Pipeline by identifier (asynchronously)
     * 
     * @param body Pipeline YAML to be updated (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePipelineAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ApiCallback<ResponseDTOString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePipelineValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePipelineV2
     * @param body Pipeline YAML to be updated (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePipelineV2Call(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/v2/{pipelineIdentifier}"
            .replaceAll("\\{" + "pipelineIdentifier" + "\\}", apiClient.escapeString(pipelineIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (lastObjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastObjectId", lastObjectId));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePipelineV2ValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePipelineV2(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updatePipelineV2(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling updatePipelineV2(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling updatePipelineV2(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling updatePipelineV2(Async)");
        }
        
        com.squareup.okhttp.Call call = updatePipelineV2Call(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Pipeline by identifier (V2 Version)
     * 
     * @param body Pipeline YAML to be updated (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOPipelineSaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPipelineSaveResponse updatePipelineV2(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOPipelineSaveResponse> resp = updatePipelineV2WithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch);
        return resp.getData();
    }

    /**
     * Updates a Pipeline by identifier (V2 Version)
     * 
     * @param body Pipeline YAML to be updated (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOPipelineSaveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPipelineSaveResponse> updatePipelineV2WithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = updatePipelineV2ValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPipelineSaveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Pipeline by identifier (V2 Version) (asynchronously)
     * 
     * @param body Pipeline YAML to be updated (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePipelineV2Async(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ApiCallback<ResponseDTOPipelineSaveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePipelineV2ValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPipelineSaveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
