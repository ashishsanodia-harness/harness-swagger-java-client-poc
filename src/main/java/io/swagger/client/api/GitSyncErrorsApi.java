/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOGitSyncErrorCount;
import io.swagger.client.model.ResponseDTOPageResponseGitSyncError;
import io.swagger.client.model.ResponseDTOPageResponseGitSyncErrorAggregateByCommit;
import io.swagger.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GitSyncErrorsApi {
    private ApiClient apiClient;

    public GitSyncErrorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GitSyncErrorsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getGitSyncErrorsCount
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGitSyncErrorsCountCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync-errors/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGitSyncErrorsCountValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getGitSyncErrorsCountCall(accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Errors Count for the given scope, Repo and Branch
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOGitSyncErrorCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOGitSyncErrorCount getGitSyncErrorsCount(String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOGitSyncErrorCount> resp = getGitSyncErrorsCountWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Get Errors Count for the given scope, Repo and Branch
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOGitSyncErrorCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOGitSyncErrorCount> getGitSyncErrorsCountWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getGitSyncErrorsCountValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOGitSyncErrorCount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Errors Count for the given scope, Repo and Branch (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGitSyncErrorsCountAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOGitSyncErrorCount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGitSyncErrorsCountValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOGitSyncErrorCount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listGitSyncErrors
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param gitToHarness This specifies which errors to show - (Git to Harness or Connectivity), Put true to show Git to Harness Errors (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listGitSyncErrorsCall(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean gitToHarness, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync-errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (gitToHarness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gitToHarness", gitToHarness));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listGitSyncErrorsValidateBeforeCall(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean gitToHarness, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listGitSyncErrorsCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, gitToHarness, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists Git to Harness Errors by file or connectivity errors for the given scope, Repo and Branch
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param gitToHarness This specifies which errors to show - (Git to Harness or Connectivity), Put true to show Git to Harness Errors (optional, default to true)
     * @return ResponseDTOPageResponseGitSyncError
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseGitSyncError listGitSyncErrors(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean gitToHarness) throws ApiException {
        ApiResponse<ResponseDTOPageResponseGitSyncError> resp = listGitSyncErrorsWithHttpInfo(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, gitToHarness);
        return resp.getData();
    }

    /**
     * Lists Git to Harness Errors by file or connectivity errors for the given scope, Repo and Branch
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param gitToHarness This specifies which errors to show - (Git to Harness or Connectivity), Put true to show Git to Harness Errors (optional, default to true)
     * @return ApiResponse&lt;ResponseDTOPageResponseGitSyncError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseGitSyncError> listGitSyncErrorsWithHttpInfo(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean gitToHarness) throws ApiException {
        com.squareup.okhttp.Call call = listGitSyncErrorsValidateBeforeCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, gitToHarness, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseGitSyncError>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists Git to Harness Errors by file or connectivity errors for the given scope, Repo and Branch (asynchronously)
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param gitToHarness This specifies which errors to show - (Git to Harness or Connectivity), Put true to show Git to Harness Errors (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listGitSyncErrorsAsync(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean gitToHarness, final ApiCallback<ResponseDTOPageResponseGitSyncError> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listGitSyncErrorsValidateBeforeCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, gitToHarness, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseGitSyncError>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listGitToHarnessErrorForCommit
     * @param commitId Commit Id (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listGitToHarnessErrorForCommitCall(String commitId, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync-errors/commits/{commitId}"
            .replaceAll("\\{" + "commitId" + "\\}", apiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listGitToHarnessErrorForCommitValidateBeforeCall(String commitId, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling listGitToHarnessErrorForCommit(Async)");
        }
        
        com.squareup.okhttp.Call call = listGitToHarnessErrorForCommitCall(commitId, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists Git to Harness Errors for the given Commit Id
     * 
     * @param commitId Commit Id (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOPageResponseGitSyncError
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseGitSyncError listGitToHarnessErrorForCommit(String commitId, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOPageResponseGitSyncError> resp = listGitToHarnessErrorForCommitWithHttpInfo(commitId, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Lists Git to Harness Errors for the given Commit Id
     * 
     * @param commitId Commit Id (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseGitSyncError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseGitSyncError> listGitToHarnessErrorForCommitWithHttpInfo(String commitId, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = listGitToHarnessErrorForCommitValidateBeforeCall(commitId, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseGitSyncError>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists Git to Harness Errors for the given Commit Id (asynchronously)
     * 
     * @param commitId Commit Id (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listGitToHarnessErrorForCommitAsync(String commitId, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOPageResponseGitSyncError> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listGitToHarnessErrorForCommitValidateBeforeCall(commitId, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseGitSyncError>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listGitToHarnessErrorsGroupedByCommits
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param numberOfErrorsInSummary Number of errors that will be displayed in the summary (optional, default to 5)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listGitToHarnessErrorsGroupedByCommitsCall(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Integer numberOfErrorsInSummary, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/git-sync-errors/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (numberOfErrorsInSummary != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numberOfErrorsInSummary", numberOfErrorsInSummary));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listGitToHarnessErrorsGroupedByCommitsValidateBeforeCall(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Integer numberOfErrorsInSummary, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listGitToHarnessErrorsGroupedByCommitsCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, numberOfErrorsInSummary, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists Git to Harness Errors grouped by Commits for the given scope, Repo and Branch
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param numberOfErrorsInSummary Number of errors that will be displayed in the summary (optional, default to 5)
     * @return ResponseDTOPageResponseGitSyncErrorAggregateByCommit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseGitSyncErrorAggregateByCommit listGitToHarnessErrorsGroupedByCommits(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Integer numberOfErrorsInSummary) throws ApiException {
        ApiResponse<ResponseDTOPageResponseGitSyncErrorAggregateByCommit> resp = listGitToHarnessErrorsGroupedByCommitsWithHttpInfo(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, numberOfErrorsInSummary);
        return resp.getData();
    }

    /**
     * Lists Git to Harness Errors grouped by Commits for the given scope, Repo and Branch
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param numberOfErrorsInSummary Number of errors that will be displayed in the summary (optional, default to 5)
     * @return ApiResponse&lt;ResponseDTOPageResponseGitSyncErrorAggregateByCommit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseGitSyncErrorAggregateByCommit> listGitToHarnessErrorsGroupedByCommitsWithHttpInfo(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Integer numberOfErrorsInSummary) throws ApiException {
        com.squareup.okhttp.Call call = listGitToHarnessErrorsGroupedByCommitsValidateBeforeCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, numberOfErrorsInSummary, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseGitSyncErrorAggregateByCommit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists Git to Harness Errors grouped by Commits for the given scope, Repo and Branch (asynchronously)
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search Term (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param numberOfErrorsInSummary Number of errors that will be displayed in the summary (optional, default to 5)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listGitToHarnessErrorsGroupedByCommitsAsync(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Integer numberOfErrorsInSummary, final ApiCallback<ResponseDTOPageResponseGitSyncErrorAggregateByCommit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listGitToHarnessErrorsGroupedByCommitsValidateBeforeCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, branch, repoIdentifier, getDefaultFromOtherRepo, numberOfErrorsInSummary, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseGitSyncErrorAggregateByCommit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
