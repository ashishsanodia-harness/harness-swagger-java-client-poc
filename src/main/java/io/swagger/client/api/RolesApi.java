/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccessDeniedError;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOPageResponseRoleResponse;
import io.swagger.client.model.ResponseDTORoleResponse;
import io.swagger.client.model.Role;
import io.swagger.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RolesApi {
    private ApiClient apiClient;

    public RolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteRole
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRoleCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/authz/api/roles/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRoleValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteRole(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRoleCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Custom Role in a scope
     * 
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleResponse deleteRole(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleResponse> resp = deleteRoleWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Delete a Custom Role in a scope
     * 
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleResponse> deleteRoleWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteRoleValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Custom Role in a scope (asynchronously)
     * 
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRoleAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRoleValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRole
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRoleCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/authz/api/roles/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRoleValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getRole(Async)");
        }
        
        com.squareup.okhttp.Call call = getRoleCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a Role by identifier
     * 
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleResponse getRole(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleResponse> resp = getRoleWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Get a Role by identifier
     * 
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleResponse> getRoleWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getRoleValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Role by identifier (asynchronously)
     * 
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRoleAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRoleValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRoleList
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search roles by name/identifier (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRoleListCall(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/authz/api/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRoleListValidateBeforeCall(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getRoleListCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List roles in the given scope
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search roles by name/identifier (optional)
     * @return ResponseDTOPageResponseRoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseRoleResponse getRoleList(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm) throws ApiException {
        ApiResponse<ResponseDTOPageResponseRoleResponse> resp = getRoleListWithHttpInfo(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm);
        return resp.getData();
    }

    /**
     * List roles in the given scope
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search roles by name/identifier (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseRoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseRoleResponse> getRoleListWithHttpInfo(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm) throws ApiException {
        com.squareup.okhttp.Call call = getRoleListValidateBeforeCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseRoleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List roles in the given scope (asynchronously)
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search roles by name/identifier (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRoleListAsync(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, String searchTerm, final ApiCallback<ResponseDTOPageResponseRoleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRoleListValidateBeforeCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, searchTerm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseRoleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postRole
     * @param body Role entity (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postRoleCall(Role body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/authz/api/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postRoleValidateBeforeCall(Role body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postRole(Async)");
        }
        
        com.squareup.okhttp.Call call = postRoleCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Custom Role in a scope
     * 
     * @param body Role entity (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleResponse postRole(Role body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleResponse> resp = postRoleWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Create a Custom Role in a scope
     * 
     * @param body Role entity (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleResponse> postRoleWithHttpInfo(Role body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postRoleValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Custom Role in a scope (asynchronously)
     * 
     * @param body Role entity (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postRoleAsync(Role body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postRoleValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putRole
     * @param body Updated Role entity (required)
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putRoleCall(Role body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/authz/api/roles/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putRoleValidateBeforeCall(Role body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putRole(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling putRole(Async)");
        }
        
        com.squareup.okhttp.Call call = putRoleCall(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Custom Role by identifier
     * 
     * @param body Updated Role entity (required)
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleResponse putRole(Role body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleResponse> resp = putRoleWithHttpInfo(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Update a Custom Role by identifier
     * 
     * @param body Updated Role entity (required)
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleResponse> putRoleWithHttpInfo(Role body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = putRoleValidateBeforeCall(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Custom Role by identifier (asynchronously)
     * 
     * @param body Updated Role entity (required)
     * @param identifier Identifier of the Role (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putRoleAsync(Role body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putRoleValidateBeforeCall(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
