/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.GitPRCreateRequest;
import io.swagger.client.model.ResponseDTOGitFileContent;
import io.swagger.client.model.ResponseDTOListString;
import io.swagger.client.model.ResponseDTOPRDetails;
import io.swagger.client.model.ResponseDTOSaasGit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScmApi {
    private ApiClient apiClient;

    public ScmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScmApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPR
     * @param body Details to create a PR (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPRCall(GitPRCreateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/scm/createPR";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml", "text/html"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPRValidateBeforeCall(GitPRCreateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPR(Async)");
        }
        
        com.squareup.okhttp.Call call = createPRCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * creates a Pull Request
     * 
     * @param body Details to create a PR (required)
     * @return ResponseDTOPRDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPRDetails createPR(GitPRCreateRequest body) throws ApiException {
        ApiResponse<ResponseDTOPRDetails> resp = createPRWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * creates a Pull Request
     * 
     * @param body Details to create a PR (required)
     * @return ApiResponse&lt;ResponseDTOPRDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPRDetails> createPRWithHttpInfo(GitPRCreateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createPRValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPRDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * creates a Pull Request (asynchronously)
     * 
     * @param body Details to create a PR (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPRAsync(GitPRCreateRequest body, final ApiCallback<ResponseDTOPRDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPRValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPRDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileContent
     * @param yamlGitConfigIdentifier Git Sync Config Id (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param filePath File Path (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param commitId Commit Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileContentCall(String yamlGitConfigIdentifier, String accountIdentifier, String filePath, String orgIdentifier, String projectIdentifier, String branch, String commitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/scm/fileContent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (yamlGitConfigIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yamlGitConfigIdentifier", yamlGitConfigIdentifier));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (commitId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitId", commitId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileContentValidateBeforeCall(String yamlGitConfigIdentifier, String accountIdentifier, String filePath, String orgIdentifier, String projectIdentifier, String branch, String commitId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'yamlGitConfigIdentifier' is set
        if (yamlGitConfigIdentifier == null) {
            throw new ApiException("Missing the required parameter 'yamlGitConfigIdentifier' when calling getFileContent(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getFileContent(Async)");
        }
        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling getFileContent(Async)");
        }
        
        com.squareup.okhttp.Call call = getFileContentCall(yamlGitConfigIdentifier, accountIdentifier, filePath, orgIdentifier, projectIdentifier, branch, commitId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Git File Content
     * 
     * @param yamlGitConfigIdentifier Git Sync Config Id (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param filePath File Path (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param commitId Commit Id (optional)
     * @return ResponseDTOGitFileContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOGitFileContent getFileContent(String yamlGitConfigIdentifier, String accountIdentifier, String filePath, String orgIdentifier, String projectIdentifier, String branch, String commitId) throws ApiException {
        ApiResponse<ResponseDTOGitFileContent> resp = getFileContentWithHttpInfo(yamlGitConfigIdentifier, accountIdentifier, filePath, orgIdentifier, projectIdentifier, branch, commitId);
        return resp.getData();
    }

    /**
     * Gets Git File Content
     * 
     * @param yamlGitConfigIdentifier Git Sync Config Id (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param filePath File Path (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param commitId Commit Id (optional)
     * @return ApiResponse&lt;ResponseDTOGitFileContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOGitFileContent> getFileContentWithHttpInfo(String yamlGitConfigIdentifier, String accountIdentifier, String filePath, String orgIdentifier, String projectIdentifier, String branch, String commitId) throws ApiException {
        com.squareup.okhttp.Call call = getFileContentValidateBeforeCall(yamlGitConfigIdentifier, accountIdentifier, filePath, orgIdentifier, projectIdentifier, branch, commitId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOGitFileContent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Git File Content (asynchronously)
     * 
     * @param yamlGitConfigIdentifier Git Sync Config Id (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param filePath File Path (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param branch Branch Name (optional)
     * @param commitId Commit Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileContentAsync(String yamlGitConfigIdentifier, String accountIdentifier, String filePath, String orgIdentifier, String projectIdentifier, String branch, String commitId, final ApiCallback<ResponseDTOGitFileContent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileContentValidateBeforeCall(yamlGitConfigIdentifier, accountIdentifier, filePath, orgIdentifier, projectIdentifier, branch, commitId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOGitFileContent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListOfBranchesByConnector
     * @param connectorIdentifierRef Connector Identifier Reference (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param repoURL Repo URL (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 50)
     * @param searchTerm Search Term (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListOfBranchesByConnectorCall(String connectorIdentifierRef, String accountIdentifier, String orgIdentifier, String projectIdentifier, String repoURL, Integer page, Integer size, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/scm/listRepoBranches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (connectorIdentifierRef != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("connectorIdentifierRef", connectorIdentifierRef));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (repoURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoURL", repoURL));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListOfBranchesByConnectorValidateBeforeCall(String connectorIdentifierRef, String accountIdentifier, String orgIdentifier, String projectIdentifier, String repoURL, Integer page, Integer size, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getListOfBranchesByConnectorCall(connectorIdentifierRef, accountIdentifier, orgIdentifier, projectIdentifier, repoURL, page, size, searchTerm, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists Branches of given Repo by referenced Connector Identifier
     * 
     * @param connectorIdentifierRef Connector Identifier Reference (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param repoURL Repo URL (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 50)
     * @param searchTerm Search Term (optional)
     * @return ResponseDTOListString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListString getListOfBranchesByConnector(String connectorIdentifierRef, String accountIdentifier, String orgIdentifier, String projectIdentifier, String repoURL, Integer page, Integer size, String searchTerm) throws ApiException {
        ApiResponse<ResponseDTOListString> resp = getListOfBranchesByConnectorWithHttpInfo(connectorIdentifierRef, accountIdentifier, orgIdentifier, projectIdentifier, repoURL, page, size, searchTerm);
        return resp.getData();
    }

    /**
     * Lists Branches of given Repo by referenced Connector Identifier
     * 
     * @param connectorIdentifierRef Connector Identifier Reference (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param repoURL Repo URL (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 50)
     * @param searchTerm Search Term (optional)
     * @return ApiResponse&lt;ResponseDTOListString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListString> getListOfBranchesByConnectorWithHttpInfo(String connectorIdentifierRef, String accountIdentifier, String orgIdentifier, String projectIdentifier, String repoURL, Integer page, Integer size, String searchTerm) throws ApiException {
        com.squareup.okhttp.Call call = getListOfBranchesByConnectorValidateBeforeCall(connectorIdentifierRef, accountIdentifier, orgIdentifier, projectIdentifier, repoURL, page, size, searchTerm, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists Branches of given Repo by referenced Connector Identifier (asynchronously)
     * 
     * @param connectorIdentifierRef Connector Identifier Reference (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param repoURL Repo URL (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 50)
     * @param searchTerm Search Term (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListOfBranchesByConnectorAsync(String connectorIdentifierRef, String accountIdentifier, String orgIdentifier, String projectIdentifier, String repoURL, Integer page, Integer size, String searchTerm, final ApiCallback<ResponseDTOListString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListOfBranchesByConnectorValidateBeforeCall(connectorIdentifierRef, accountIdentifier, orgIdentifier, projectIdentifier, repoURL, page, size, searchTerm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListOfBranchesByGitConfig
     * @param yamlGitConfigIdentifier Git Sync Config Id (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 50)
     * @param searchTerm Search Term (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListOfBranchesByGitConfigCall(String yamlGitConfigIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer page, Integer size, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/scm/listBranchesByGitConfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (yamlGitConfigIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yamlGitConfigIdentifier", yamlGitConfigIdentifier));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListOfBranchesByGitConfigValidateBeforeCall(String yamlGitConfigIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer page, Integer size, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getListOfBranchesByGitConfigCall(yamlGitConfigIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, page, size, searchTerm, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists Branches by given Git Sync Config Id
     * 
     * @param yamlGitConfigIdentifier Git Sync Config Id (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 50)
     * @param searchTerm Search Term (optional)
     * @return ResponseDTOListString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListString getListOfBranchesByGitConfig(String yamlGitConfigIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer page, Integer size, String searchTerm) throws ApiException {
        ApiResponse<ResponseDTOListString> resp = getListOfBranchesByGitConfigWithHttpInfo(yamlGitConfigIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, page, size, searchTerm);
        return resp.getData();
    }

    /**
     * Lists Branches by given Git Sync Config Id
     * 
     * @param yamlGitConfigIdentifier Git Sync Config Id (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 50)
     * @param searchTerm Search Term (optional)
     * @return ApiResponse&lt;ResponseDTOListString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListString> getListOfBranchesByGitConfigWithHttpInfo(String yamlGitConfigIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer page, Integer size, String searchTerm) throws ApiException {
        com.squareup.okhttp.Call call = getListOfBranchesByGitConfigValidateBeforeCall(yamlGitConfigIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, page, size, searchTerm, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists Branches by given Git Sync Config Id (asynchronously)
     * 
     * @param yamlGitConfigIdentifier Git Sync Config Id (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 50)
     * @param searchTerm Search Term (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListOfBranchesByGitConfigAsync(String yamlGitConfigIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer page, Integer size, String searchTerm, final ApiCallback<ResponseDTOListString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListOfBranchesByGitConfigValidateBeforeCall(yamlGitConfigIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, page, size, searchTerm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for isSaasGit
     * @param repoURL Repo URL (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call isSaasGitCall(String repoURL, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/scm/isSaasGit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (repoURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoURL", repoURL));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call isSaasGitValidateBeforeCall(String repoURL, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = isSaasGitCall(repoURL, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Checks if Saas is possible for given Repo Url
     * 
     * @param repoURL Repo URL (optional)
     * @return ResponseDTOSaasGit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOSaasGit isSaasGit(String repoURL) throws ApiException {
        ApiResponse<ResponseDTOSaasGit> resp = isSaasGitWithHttpInfo(repoURL);
        return resp.getData();
    }

    /**
     * Checks if Saas is possible for given Repo Url
     * 
     * @param repoURL Repo URL (optional)
     * @return ApiResponse&lt;ResponseDTOSaasGit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOSaasGit> isSaasGitWithHttpInfo(String repoURL) throws ApiException {
        com.squareup.okhttp.Call call = isSaasGitValidateBeforeCall(repoURL, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOSaasGit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Checks if Saas is possible for given Repo Url (asynchronously)
     * 
     * @param repoURL Repo URL (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call isSaasGitAsync(String repoURL, final ApiCallback<ResponseDTOSaasGit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = isSaasGitValidateBeforeCall(repoURL, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOSaasGit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
