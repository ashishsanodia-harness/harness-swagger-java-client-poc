/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.MergeInputSetRequest;
import io.swagger.client.model.ResponseDTOInterruptResponse;
import io.swagger.client.model.ResponseDTOListStageExecutionResponse;
import io.swagger.client.model.ResponseDTOPlanExecutionResponse;
import io.swagger.client.model.ResponseDTOPreFlightDTO;
import io.swagger.client.model.ResponseDTORetryHistoryResponse;
import io.swagger.client.model.ResponseDTORetryInfo;
import io.swagger.client.model.ResponseDTORetryLatestExecutionResponse;
import io.swagger.client.model.ResponseDTOString;
import io.swagger.client.model.RunStageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExecuteApi {
    private ApiClient apiClient;

    public ExecuteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExecuteApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPreFlightCheckResponse
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param preflightCheckId Preflight Id from the start Preflight Checks API (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPreFlightCheckResponseCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String preflightCheckId, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/getPreflightCheckResponse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (preflightCheckId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preflightCheckId", preflightCheckId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPreFlightCheckResponseValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String preflightCheckId, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPreFlightCheckResponse(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getPreFlightCheckResponse(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getPreFlightCheckResponse(Async)");
        }
        // verify the required parameter 'preflightCheckId' is set
        if (preflightCheckId == null) {
            throw new ApiException("Missing the required parameter 'preflightCheckId' when calling getPreFlightCheckResponse(Async)");
        }
        
        com.squareup.okhttp.Call call = getPreFlightCheckResponseCall(accountIdentifier, orgIdentifier, projectIdentifier, preflightCheckId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Preflight Checks Response for a Preflight Id
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param preflightCheckId Preflight Id from the start Preflight Checks API (required)
     * @param body  (optional)
     * @return ResponseDTOPreFlightDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPreFlightDTO getPreFlightCheckResponse(String accountIdentifier, String orgIdentifier, String projectIdentifier, String preflightCheckId, String body) throws ApiException {
        ApiResponse<ResponseDTOPreFlightDTO> resp = getPreFlightCheckResponseWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, preflightCheckId, body);
        return resp.getData();
    }

    /**
     * Get Preflight Checks Response for a Preflight Id
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param preflightCheckId Preflight Id from the start Preflight Checks API (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ResponseDTOPreFlightDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPreFlightDTO> getPreFlightCheckResponseWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String preflightCheckId, String body) throws ApiException {
        com.squareup.okhttp.Call call = getPreFlightCheckResponseValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, preflightCheckId, body, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPreFlightDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Preflight Checks Response for a Preflight Id (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param preflightCheckId Preflight Id from the start Preflight Checks API (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPreFlightCheckResponseAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String preflightCheckId, String body, final ApiCallback<ResponseDTOPreFlightDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPreFlightCheckResponseValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, preflightCheckId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPreFlightDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRetryStages
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId planExecutionId of the execution we want to retry (required)
     * @param pipelineIdentifier Pipeline Identifier (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRetryStagesCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/{planExecutionId}/retryStages"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRetryStagesValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getRetryStages(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getRetryStages(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getRetryStages(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling getRetryStages(Async)");
        }
        
        com.squareup.okhttp.Call call = getRetryStagesCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get retry stages for failed pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId planExecutionId of the execution we want to retry (required)
     * @param pipelineIdentifier Pipeline Identifier (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTORetryInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORetryInfo getRetryStages(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTORetryInfo> resp = getRetryStagesWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Get retry stages for failed pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId planExecutionId of the execution we want to retry (required)
     * @param pipelineIdentifier Pipeline Identifier (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTORetryInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORetryInfo> getRetryStagesWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getRetryStagesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORetryInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get retry stages for failed pipeline (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param planExecutionId planExecutionId of the execution we want to retry (required)
     * @param pipelineIdentifier Pipeline Identifier (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRetryStagesAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String planExecutionId, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTORetryInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRetryStagesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, planExecutionId, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORetryInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStagesExecutionList
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStagesExecutionListCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/stagesExecutionList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStagesExecutionListValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getStagesExecutionList(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getStagesExecutionList(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getStagesExecutionList(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getStagesExecutionList(Async)");
        }
        
        com.squareup.okhttp.Call call = getStagesExecutionListCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of Stages to select for Stage executions
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOListStageExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListStageExecutionResponse getStagesExecutionList(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOListStageExecutionResponse> resp = getStagesExecutionListWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Get list of Stages to select for Stage executions
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOListStageExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListStageExecutionResponse> getStagesExecutionListWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getStagesExecutionListValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListStageExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of Stages to select for Stage executions (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStagesExecutionListAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOListStageExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStagesExecutionListValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListStageExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for handleManualInterventionInterrupt
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param nodeExecutionId The runtime Id of the step/stage on which the Interrupt needs to be applied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call handleManualInterventionInterruptCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/manualIntervention/interrupt/{planExecutionId}/{nodeExecutionId}"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()))
            .replaceAll("\\{" + "nodeExecutionId" + "\\}", apiClient.escapeString(nodeExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (interruptType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interruptType", interruptType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call handleManualInterventionInterruptValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling handleManualInterventionInterrupt(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling handleManualInterventionInterrupt(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling handleManualInterventionInterrupt(Async)");
        }
        // verify the required parameter 'interruptType' is set
        if (interruptType == null) {
            throw new ApiException("Missing the required parameter 'interruptType' when calling handleManualInterventionInterrupt(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling handleManualInterventionInterrupt(Async)");
        }
        // verify the required parameter 'nodeExecutionId' is set
        if (nodeExecutionId == null) {
            throw new ApiException("Missing the required parameter 'nodeExecutionId' when calling handleManualInterventionInterrupt(Async)");
        }
        
        com.squareup.okhttp.Call call = handleManualInterventionInterruptCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Handles Ignore,Abort,MarkAsSuccess,Retry on post manual intervention for a given execution with the given planExecutionId
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param nodeExecutionId The runtime Id of the step/stage on which the Interrupt needs to be applied. (required)
     * @return ResponseDTOInterruptResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInterruptResponse handleManualInterventionInterrupt(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId) throws ApiException {
        ApiResponse<ResponseDTOInterruptResponse> resp = handleManualInterventionInterruptWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId);
        return resp.getData();
    }

    /**
     * Handles Ignore,Abort,MarkAsSuccess,Retry on post manual intervention for a given execution with the given planExecutionId
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param nodeExecutionId The runtime Id of the step/stage on which the Interrupt needs to be applied. (required)
     * @return ApiResponse&lt;ResponseDTOInterruptResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInterruptResponse> handleManualInterventionInterruptWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId) throws ApiException {
        com.squareup.okhttp.Call call = handleManualInterventionInterruptValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInterruptResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Handles Ignore,Abort,MarkAsSuccess,Retry on post manual intervention for a given execution with the given planExecutionId (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param nodeExecutionId The runtime Id of the step/stage on which the Interrupt needs to be applied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call handleManualInterventionInterruptAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId, final ApiCallback<ResponseDTOInterruptResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = handleManualInterventionInterruptValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInterruptResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for handleStageInterrupt
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param nodeExecutionId The runtime Id of the step/stage on which the Interrupt needs to be applied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call handleStageInterruptCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/interrupt/{planExecutionId}/{nodeExecutionId}"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()))
            .replaceAll("\\{" + "nodeExecutionId" + "\\}", apiClient.escapeString(nodeExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (interruptType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interruptType", interruptType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call handleStageInterruptValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling handleStageInterrupt(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling handleStageInterrupt(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling handleStageInterrupt(Async)");
        }
        // verify the required parameter 'interruptType' is set
        if (interruptType == null) {
            throw new ApiException("Missing the required parameter 'interruptType' when calling handleStageInterrupt(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling handleStageInterrupt(Async)");
        }
        // verify the required parameter 'nodeExecutionId' is set
        if (nodeExecutionId == null) {
            throw new ApiException("Missing the required parameter 'nodeExecutionId' when calling handleStageInterrupt(Async)");
        }
        
        com.squareup.okhttp.Call call = handleStageInterruptCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Handles the interrupt for a given stage in a pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param nodeExecutionId The runtime Id of the step/stage on which the Interrupt needs to be applied. (required)
     * @return ResponseDTOInterruptResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInterruptResponse handleStageInterrupt(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId) throws ApiException {
        ApiResponse<ResponseDTOInterruptResponse> resp = handleStageInterruptWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId);
        return resp.getData();
    }

    /**
     * Handles the interrupt for a given stage in a pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param nodeExecutionId The runtime Id of the step/stage on which the Interrupt needs to be applied. (required)
     * @return ApiResponse&lt;ResponseDTOInterruptResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInterruptResponse> handleStageInterruptWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId) throws ApiException {
        com.squareup.okhttp.Call call = handleStageInterruptValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInterruptResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Handles the interrupt for a given stage in a pipeline (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param nodeExecutionId The runtime Id of the step/stage on which the Interrupt needs to be applied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call handleStageInterruptAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, String nodeExecutionId, final ApiCallback<ResponseDTOInterruptResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = handleStageInterruptValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, nodeExecutionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInterruptResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for latestExecutionId
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param planExecutionId planExecutionId of the execution of whose we need to find the latest execution planExecutionId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call latestExecutionIdCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/latestExecutionId/{planExecutionId}"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call latestExecutionIdValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling latestExecutionId(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling latestExecutionId(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling latestExecutionId(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling latestExecutionId(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling latestExecutionId(Async)");
        }
        
        com.squareup.okhttp.Call call = latestExecutionIdCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Latest ExecutionId from Retry Executions
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param planExecutionId planExecutionId of the execution of whose we need to find the latest execution planExecutionId (required)
     * @return ResponseDTORetryLatestExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORetryLatestExecutionResponse latestExecutionId(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId) throws ApiException {
        ApiResponse<ResponseDTORetryLatestExecutionResponse> resp = latestExecutionIdWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId);
        return resp.getData();
    }

    /**
     * Latest ExecutionId from Retry Executions
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param planExecutionId planExecutionId of the execution of whose we need to find the latest execution planExecutionId (required)
     * @return ApiResponse&lt;ResponseDTORetryLatestExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORetryLatestExecutionResponse> latestExecutionIdWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId) throws ApiException {
        com.squareup.okhttp.Call call = latestExecutionIdValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORetryLatestExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Latest ExecutionId from Retry Executions (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param planExecutionId planExecutionId of the execution of whose we need to find the latest execution planExecutionId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call latestExecutionIdAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId, final ApiCallback<ResponseDTORetryLatestExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = latestExecutionIdValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORetryLatestExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postExecuteStages
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline Identifier (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postExecuteStagesCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/{identifier}/stages"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (useFQNIfError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useFQNIfError", useFQNIfError));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postExecuteStagesValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postExecuteStages(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postExecuteStages(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postExecuteStages(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling postExecuteStages(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling postExecuteStages(Async)");
        }
        
        com.squareup.okhttp.Call call = postExecuteStagesCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute given Stages of a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline Identifier (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse postExecuteStages(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = postExecuteStagesWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);
        return resp.getData();
    }

    /**
     * Execute given Stages of a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline Identifier (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> postExecuteStagesWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        com.squareup.okhttp.Call call = postExecuteStagesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute given Stages of a Pipeline (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline Identifier (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postExecuteStagesAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postExecuteStagesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPipelineExecuteWithInputSetList
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPipelineExecuteWithInputSetListCall(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/{identifier}/inputSetList"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (useFQNIfError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useFQNIfError", useFQNIfError));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPipelineExecuteWithInputSetListValidateBeforeCall(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPipelineExecuteWithInputSetList(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postPipelineExecuteWithInputSetList(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postPipelineExecuteWithInputSetList(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postPipelineExecuteWithInputSetList(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling postPipelineExecuteWithInputSetList(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling postPipelineExecuteWithInputSetList(Async)");
        }
        
        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetListCall(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute a pipeline with input set references list
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse postPipelineExecuteWithInputSetList(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = postPipelineExecuteWithInputSetListWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);
        return resp.getData();
    }

    /**
     * Execute a pipeline with input set references list
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> postPipelineExecuteWithInputSetListWithHttpInfo(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetListValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute a pipeline with input set references list (asynchronously)
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPipelineExecuteWithInputSetListAsync(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetListValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPipelineExecuteWithInputSetYaml
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPipelineExecuteWithInputSetYamlCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (useFQNIfError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useFQNIfError", useFQNIfError));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPipelineExecuteWithInputSetYamlValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling postPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling postPipelineExecuteWithInputSetYaml(Async)");
        }
        
        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetYamlCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute a pipeline with inputSet pipeline yaml
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse postPipelineExecuteWithInputSetYaml(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = postPipelineExecuteWithInputSetYamlWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);
        return resp.getData();
    }

    /**
     * Execute a pipeline with inputSet pipeline yaml
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> postPipelineExecuteWithInputSetYamlWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetYamlValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute a pipeline with inputSet pipeline yaml (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPipelineExecuteWithInputSetYamlAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetYamlValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPipelineExecuteWithInputSetYamlv2
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPipelineExecuteWithInputSetYamlv2Call(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/{identifier}/v2"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (useFQNIfError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useFQNIfError", useFQNIfError));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPipelineExecuteWithInputSetYamlv2ValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postPipelineExecuteWithInputSetYamlv2(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postPipelineExecuteWithInputSetYamlv2(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postPipelineExecuteWithInputSetYamlv2(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling postPipelineExecuteWithInputSetYamlv2(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling postPipelineExecuteWithInputSetYamlv2(Async)");
        }
        
        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetYamlv2Call(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute a pipeline with inputSet pipeline yaml V2
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse postPipelineExecuteWithInputSetYamlv2(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = postPipelineExecuteWithInputSetYamlv2WithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);
        return resp.getData();
    }

    /**
     * Execute a pipeline with inputSet pipeline yaml V2
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> postPipelineExecuteWithInputSetYamlv2WithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetYamlv2ValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute a pipeline with inputSet pipeline yaml V2 (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPipelineExecuteWithInputSetYamlv2Async(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPipelineExecuteWithInputSetYamlv2ValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postReExecuteStages
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline Identifier (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postReExecuteStagesCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String originalExecutionId, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/rerun/{originalExecutionId}/{identifier}/stages"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()))
            .replaceAll("\\{" + "originalExecutionId" + "\\}", apiClient.escapeString(originalExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (useFQNIfError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useFQNIfError", useFQNIfError));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postReExecuteStagesValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String originalExecutionId, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postReExecuteStages(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postReExecuteStages(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postReExecuteStages(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling postReExecuteStages(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling postReExecuteStages(Async)");
        }
        // verify the required parameter 'originalExecutionId' is set
        if (originalExecutionId == null) {
            throw new ApiException("Missing the required parameter 'originalExecutionId' when calling postReExecuteStages(Async)");
        }
        
        com.squareup.okhttp.Call call = postReExecuteStagesCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, originalExecutionId, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Re-run given Stages of a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline Identifier (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse postReExecuteStages(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String originalExecutionId, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = postReExecuteStagesWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, originalExecutionId, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);
        return resp.getData();
    }

    /**
     * Re-run given Stages of a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline Identifier (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> postReExecuteStagesWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String originalExecutionId, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        com.squareup.okhttp.Call call = postReExecuteStagesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, originalExecutionId, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Re-run given Stages of a Pipeline (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param identifier Pipeline Identifier (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postReExecuteStagesAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String identifier, String originalExecutionId, RunStageRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postReExecuteStagesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, identifier, originalExecutionId, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putHandleInterrupt
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putHandleInterruptCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/interrupt/{planExecutionId}"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (interruptType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interruptType", interruptType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putHandleInterruptValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling putHandleInterrupt(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling putHandleInterrupt(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling putHandleInterrupt(Async)");
        }
        // verify the required parameter 'interruptType' is set
        if (interruptType == null) {
            throw new ApiException("Missing the required parameter 'interruptType' when calling putHandleInterrupt(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling putHandleInterrupt(Async)");
        }
        
        com.squareup.okhttp.Call call = putHandleInterruptCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Execute an Interrupt on an execution
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @return ResponseDTOInterruptResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInterruptResponse putHandleInterrupt(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId) throws ApiException {
        ApiResponse<ResponseDTOInterruptResponse> resp = putHandleInterruptWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId);
        return resp.getData();
    }

    /**
     * Execute an Interrupt on an execution
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @return ApiResponse&lt;ResponseDTOInterruptResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInterruptResponse> putHandleInterruptWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId) throws ApiException {
        com.squareup.okhttp.Call call = putHandleInterruptValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInterruptResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute an Interrupt on an execution (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param interruptType The Interrupt type needed to be applied to the execution. Choose a value from the enum list. (required)
     * @param planExecutionId The Pipeline Execution Id on which the Interrupt needs to be applied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putHandleInterruptAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String interruptType, String planExecutionId, final ApiCallback<ResponseDTOInterruptResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putHandleInterruptValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, interruptType, planExecutionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInterruptResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rePostPipelineExecuteWithInputSetYaml
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rePostPipelineExecuteWithInputSetYamlCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/rerun/{originalExecutionId}/{identifier}"
            .replaceAll("\\{" + "originalExecutionId" + "\\}", apiClient.escapeString(originalExecutionId.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (useFQNIfError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useFQNIfError", useFQNIfError));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rePostPipelineExecuteWithInputSetYamlValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling rePostPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling rePostPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling rePostPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling rePostPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'originalExecutionId' is set
        if (originalExecutionId == null) {
            throw new ApiException("Missing the required parameter 'originalExecutionId' when calling rePostPipelineExecuteWithInputSetYaml(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling rePostPipelineExecuteWithInputSetYaml(Async)");
        }
        
        com.squareup.okhttp.Call call = rePostPipelineExecuteWithInputSetYamlCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Re Execute a pipeline with inputSet pipeline yaml
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse rePostPipelineExecuteWithInputSetYaml(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = rePostPipelineExecuteWithInputSetYamlWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);
        return resp.getData();
    }

    /**
     * Re Execute a pipeline with inputSet pipeline yaml
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> rePostPipelineExecuteWithInputSetYamlWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        com.squareup.okhttp.Call call = rePostPipelineExecuteWithInputSetYamlValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Re Execute a pipeline with inputSet pipeline yaml (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rePostPipelineExecuteWithInputSetYamlAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rePostPipelineExecuteWithInputSetYamlValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rePostPipelineExecuteWithInputSetYamlV2
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rePostPipelineExecuteWithInputSetYamlV2Call(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/rerun/v2/{originalExecutionId}/{identifier}"
            .replaceAll("\\{" + "originalExecutionId" + "\\}", apiClient.escapeString(originalExecutionId.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (useFQNIfError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useFQNIfError", useFQNIfError));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rePostPipelineExecuteWithInputSetYamlV2ValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling rePostPipelineExecuteWithInputSetYamlV2(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling rePostPipelineExecuteWithInputSetYamlV2(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling rePostPipelineExecuteWithInputSetYamlV2(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling rePostPipelineExecuteWithInputSetYamlV2(Async)");
        }
        // verify the required parameter 'originalExecutionId' is set
        if (originalExecutionId == null) {
            throw new ApiException("Missing the required parameter 'originalExecutionId' when calling rePostPipelineExecuteWithInputSetYamlV2(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling rePostPipelineExecuteWithInputSetYamlV2(Async)");
        }
        
        com.squareup.okhttp.Call call = rePostPipelineExecuteWithInputSetYamlV2Call(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Re Execute a pipeline with InputSet Pipeline YAML Version 2
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse rePostPipelineExecuteWithInputSetYamlV2(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = rePostPipelineExecuteWithInputSetYamlV2WithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError);
        return resp.getData();
    }

    /**
     * Re Execute a pipeline with InputSet Pipeline YAML Version 2
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> rePostPipelineExecuteWithInputSetYamlV2WithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError) throws ApiException {
        com.squareup.okhttp.Call call = rePostPipelineExecuteWithInputSetYamlV2ValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Re Execute a pipeline with InputSet Pipeline YAML Version 2 (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param originalExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param identifier Pipeline identifier for the entity. Identifier of the Pipeline to be executed (required)
     * @param body InputSet YAML if the pipeline contains runtime inputs. This will be empty by default if pipeline does not contains runtime inputs (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param useFQNIfError  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rePostPipelineExecuteWithInputSetYamlV2Async(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String originalExecutionId, String identifier, String body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, Boolean useFQNIfError, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rePostPipelineExecuteWithInputSetYamlV2ValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, originalExecutionId, identifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, useFQNIfError, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rerunPipelineWithInputSetIdentifierList
     * @param body InputSet reference details (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType The module from which execution was triggered. (required)
     * @param useFQNIfError Use FQN in error response (required)
     * @param originalExecutionId Id of the execution from which we are running (required)
     * @param identifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rerunPipelineWithInputSetIdentifierListCall(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, Boolean useFQNIfError, String originalExecutionId, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/rerun/{originalExecutionId}/{identifier}/inputSetList"
            .replaceAll("\\{" + "originalExecutionId" + "\\}", apiClient.escapeString(originalExecutionId.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));
        if (useFQNIfError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useFQNIfError", useFQNIfError));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rerunPipelineWithInputSetIdentifierListValidateBeforeCall(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, Boolean useFQNIfError, String originalExecutionId, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rerunPipelineWithInputSetIdentifierList(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling rerunPipelineWithInputSetIdentifierList(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling rerunPipelineWithInputSetIdentifierList(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling rerunPipelineWithInputSetIdentifierList(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling rerunPipelineWithInputSetIdentifierList(Async)");
        }
        // verify the required parameter 'useFQNIfError' is set
        if (useFQNIfError == null) {
            throw new ApiException("Missing the required parameter 'useFQNIfError' when calling rerunPipelineWithInputSetIdentifierList(Async)");
        }
        // verify the required parameter 'originalExecutionId' is set
        if (originalExecutionId == null) {
            throw new ApiException("Missing the required parameter 'originalExecutionId' when calling rerunPipelineWithInputSetIdentifierList(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling rerunPipelineWithInputSetIdentifierList(Async)");
        }
        
        com.squareup.okhttp.Call call = rerunPipelineWithInputSetIdentifierListCall(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, useFQNIfError, originalExecutionId, identifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rerun a pipeline with given inputSet identifiers
     * 
     * @param body InputSet reference details (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType The module from which execution was triggered. (required)
     * @param useFQNIfError Use FQN in error response (required)
     * @param originalExecutionId Id of the execution from which we are running (required)
     * @param identifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse rerunPipelineWithInputSetIdentifierList(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, Boolean useFQNIfError, String originalExecutionId, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = rerunPipelineWithInputSetIdentifierListWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, useFQNIfError, originalExecutionId, identifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Rerun a pipeline with given inputSet identifiers
     * 
     * @param body InputSet reference details (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType The module from which execution was triggered. (required)
     * @param useFQNIfError Use FQN in error response (required)
     * @param originalExecutionId Id of the execution from which we are running (required)
     * @param identifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> rerunPipelineWithInputSetIdentifierListWithHttpInfo(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, Boolean useFQNIfError, String originalExecutionId, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = rerunPipelineWithInputSetIdentifierListValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, useFQNIfError, originalExecutionId, identifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rerun a pipeline with given inputSet identifiers (asynchronously)
     * 
     * @param body InputSet reference details (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType The module from which execution was triggered. (required)
     * @param useFQNIfError Use FQN in error response (required)
     * @param originalExecutionId Id of the execution from which we are running (required)
     * @param identifier Pipeline Identifier (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rerunPipelineWithInputSetIdentifierListAsync(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, Boolean useFQNIfError, String originalExecutionId, String identifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rerunPipelineWithInputSetIdentifierListValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, moduleType, useFQNIfError, originalExecutionId, identifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retryHistory
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param planExecutionId planExecutionId of the execution of whose we need to find the retry history (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retryHistoryCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/retryHistory/{planExecutionId}"
            .replaceAll("\\{" + "planExecutionId" + "\\}", apiClient.escapeString(planExecutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retryHistoryValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling retryHistory(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling retryHistory(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling retryHistory(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling retryHistory(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling retryHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = retryHistoryCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retry History for a given execution
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param planExecutionId planExecutionId of the execution of whose we need to find the retry history (required)
     * @return ResponseDTORetryHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORetryHistoryResponse retryHistory(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId) throws ApiException {
        ApiResponse<ResponseDTORetryHistoryResponse> resp = retryHistoryWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId);
        return resp.getData();
    }

    /**
     * Retry History for a given execution
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param planExecutionId planExecutionId of the execution of whose we need to find the retry history (required)
     * @return ApiResponse&lt;ResponseDTORetryHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORetryHistoryResponse> retryHistoryWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId) throws ApiException {
        com.squareup.okhttp.Call call = retryHistoryValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORetryHistoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retry History for a given execution (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param planExecutionId planExecutionId of the execution of whose we need to find the retry history (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retryHistoryAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String planExecutionId, final ApiCallback<ResponseDTORetryHistoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retryHistoryValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, planExecutionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORetryHistoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retryPipeline
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param planExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param retryStages This param contains the identifier of stages from where to resume. It will be a list if we want to retry from parallel group  (required)
     * @param identifier Pipeline Identifier (required)
     * @param body  (optional)
     * @param runAllStages This param provides an option to run only the failed stages when Pipeline fails at parallel group. By default, it will run all the stages in the failed parallel group. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retryPipelineCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String planExecutionId, List<String> retryStages, String identifier, String body, Boolean runAllStages, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/retry/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));
        if (planExecutionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("planExecutionId", planExecutionId));
        if (retryStages != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "retryStages", retryStages));
        if (runAllStages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("runAllStages", runAllStages));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retryPipelineValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String planExecutionId, List<String> retryStages, String identifier, String body, Boolean runAllStages, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling retryPipeline(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling retryPipeline(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling retryPipeline(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling retryPipeline(Async)");
        }
        // verify the required parameter 'planExecutionId' is set
        if (planExecutionId == null) {
            throw new ApiException("Missing the required parameter 'planExecutionId' when calling retryPipeline(Async)");
        }
        // verify the required parameter 'retryStages' is set
        if (retryStages == null) {
            throw new ApiException("Missing the required parameter 'retryStages' when calling retryPipeline(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling retryPipeline(Async)");
        }
        
        com.squareup.okhttp.Call call = retryPipelineCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, planExecutionId, retryStages, identifier, body, runAllStages, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retry a executed pipeline with inputSet pipeline yaml
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param planExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param retryStages This param contains the identifier of stages from where to resume. It will be a list if we want to retry from parallel group  (required)
     * @param identifier Pipeline Identifier (required)
     * @param body  (optional)
     * @param runAllStages This param provides an option to run only the failed stages when Pipeline fails at parallel group. By default, it will run all the stages in the failed parallel group. (optional, default to true)
     * @return ResponseDTOPlanExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPlanExecutionResponse retryPipeline(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String planExecutionId, List<String> retryStages, String identifier, String body, Boolean runAllStages) throws ApiException {
        ApiResponse<ResponseDTOPlanExecutionResponse> resp = retryPipelineWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, planExecutionId, retryStages, identifier, body, runAllStages);
        return resp.getData();
    }

    /**
     * Retry a executed pipeline with inputSet pipeline yaml
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param planExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param retryStages This param contains the identifier of stages from where to resume. It will be a list if we want to retry from parallel group  (required)
     * @param identifier Pipeline Identifier (required)
     * @param body  (optional)
     * @param runAllStages This param provides an option to run only the failed stages when Pipeline fails at parallel group. By default, it will run all the stages in the failed parallel group. (optional, default to true)
     * @return ApiResponse&lt;ResponseDTOPlanExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPlanExecutionResponse> retryPipelineWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String planExecutionId, List<String> retryStages, String identifier, String body, Boolean runAllStages) throws ApiException {
        com.squareup.okhttp.Call call = retryPipelineValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, planExecutionId, retryStages, identifier, body, runAllStages, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retry a executed pipeline with inputSet pipeline yaml (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param moduleType Module type for the entity. If its from deployments,type will be CD , if its from build type will be CI (required)
     * @param planExecutionId This param contains the previous execution execution id. This is basically when we are rerunning a Pipeline. (required)
     * @param retryStages This param contains the identifier of stages from where to resume. It will be a list if we want to retry from parallel group  (required)
     * @param identifier Pipeline Identifier (required)
     * @param body  (optional)
     * @param runAllStages This param provides an option to run only the failed stages when Pipeline fails at parallel group. By default, it will run all the stages in the failed parallel group. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retryPipelineAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String moduleType, String planExecutionId, List<String> retryStages, String identifier, String body, Boolean runAllStages, final ApiCallback<ResponseDTOPlanExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retryPipelineValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, moduleType, planExecutionId, retryStages, identifier, body, runAllStages, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPlanExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startPreFlightCheck
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body Runtime Input YAML to be sent for Pipeline execution (optional)
     * @param pipelineIdentifier Pipeline Identifier (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startPreFlightCheckCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String body, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipeline/execute/preflightCheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startPreFlightCheckValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String body, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling startPreFlightCheck(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling startPreFlightCheck(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling startPreFlightCheck(Async)");
        }
        
        com.squareup.okhttp.Call call = startPreFlightCheckCall(accountIdentifier, orgIdentifier, projectIdentifier, body, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start Preflight Checks for a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body Runtime Input YAML to be sent for Pipeline execution (optional)
     * @param pipelineIdentifier Pipeline Identifier (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOString startPreFlightCheck(String accountIdentifier, String orgIdentifier, String projectIdentifier, String body, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOString> resp = startPreFlightCheckWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, body, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Start Preflight Checks for a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body Runtime Input YAML to be sent for Pipeline execution (optional)
     * @param pipelineIdentifier Pipeline Identifier (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOString> startPreFlightCheckWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String body, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = startPreFlightCheckValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, body, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start Preflight Checks for a Pipeline (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param body Runtime Input YAML to be sent for Pipeline execution (optional)
     * @param pipelineIdentifier Pipeline Identifier (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startPreFlightCheckAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String body, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startPreFlightCheckValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, body, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
