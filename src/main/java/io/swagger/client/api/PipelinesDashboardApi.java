/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTODashboardPipelineExecution;
import io.swagger.client.model.ResponseDTODashboardPipelineHealth;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelinesDashboardApi {
    private ApiClient apiClient;

    public PipelinesDashboardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesDashboardApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPipelineDashboardExecution
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineDashboardExecutionCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/dashboard/pipelineExecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (moduleInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleInfo", moduleInfo));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineDashboardExecutionValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPipelineDashboardExecution(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getPipelineDashboardExecution(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getPipelineDashboardExecution(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getPipelineDashboardExecution(Async)");
        }
        // verify the required parameter 'moduleInfo' is set
        if (moduleInfo == null) {
            throw new ApiException("Missing the required parameter 'moduleInfo' when calling getPipelineDashboardExecution(Async)");
        }
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getPipelineDashboardExecution(Async)");
        }
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getPipelineDashboardExecution(Async)");
        }
        
        com.squareup.okhttp.Call call = getPipelineDashboardExecutionCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches Pipeline Executions details for a given Interval and will be presented in day wise format
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @return ResponseDTODashboardPipelineExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTODashboardPipelineExecution getPipelineDashboardExecution(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime) throws ApiException {
        ApiResponse<ResponseDTODashboardPipelineExecution> resp = getPipelineDashboardExecutionWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime);
        return resp.getData();
    }

    /**
     * Fetches Pipeline Executions details for a given Interval and will be presented in day wise format
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @return ApiResponse&lt;ResponseDTODashboardPipelineExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTODashboardPipelineExecution> getPipelineDashboardExecutionWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineDashboardExecutionValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTODashboardPipelineExecution>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches Pipeline Executions details for a given Interval and will be presented in day wise format (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineDashboardExecutionAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ApiCallback<ResponseDTODashboardPipelineExecution> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineDashboardExecutionValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTODashboardPipelineExecution>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelineExecution
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineExecutionCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/pipelineExecution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (moduleInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleInfo", moduleInfo));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineExecutionValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPipelineExecution(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getPipelineExecution(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getPipelineExecution(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getPipelineExecution(Async)");
        }
        // verify the required parameter 'moduleInfo' is set
        if (moduleInfo == null) {
            throw new ApiException("Missing the required parameter 'moduleInfo' when calling getPipelineExecution(Async)");
        }
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getPipelineExecution(Async)");
        }
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getPipelineExecution(Async)");
        }
        
        com.squareup.okhttp.Call call = getPipelineExecutionCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches Pipeline Executions details for a given Interval and will be presented in day wise format
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @return ResponseDTODashboardPipelineExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTODashboardPipelineExecution getPipelineExecution(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime) throws ApiException {
        ApiResponse<ResponseDTODashboardPipelineExecution> resp = getPipelineExecutionWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime);
        return resp.getData();
    }

    /**
     * Fetches Pipeline Executions details for a given Interval and will be presented in day wise format
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @return ApiResponse&lt;ResponseDTODashboardPipelineExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTODashboardPipelineExecution> getPipelineExecutionWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineExecutionValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTODashboardPipelineExecution>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches Pipeline Executions details for a given Interval and will be presented in day wise format (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineExecutionAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ApiCallback<ResponseDTODashboardPipelineExecution> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineExecutionValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTODashboardPipelineExecution>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelinedHealth
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelinedHealthCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/pipelines/pipelineHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (moduleInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleInfo", moduleInfo));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelinedHealthValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPipelinedHealth(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getPipelinedHealth(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getPipelinedHealth(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getPipelinedHealth(Async)");
        }
        // verify the required parameter 'moduleInfo' is set
        if (moduleInfo == null) {
            throw new ApiException("Missing the required parameter 'moduleInfo' when calling getPipelinedHealth(Async)");
        }
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getPipelinedHealth(Async)");
        }
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getPipelinedHealth(Async)");
        }
        
        com.squareup.okhttp.Call call = getPipelinedHealthCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches Pipeline Health data for a given Interval and will be presented in day wise format 
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @return ResponseDTODashboardPipelineHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTODashboardPipelineHealth getPipelinedHealth(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime) throws ApiException {
        ApiResponse<ResponseDTODashboardPipelineHealth> resp = getPipelinedHealthWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime);
        return resp.getData();
    }

    /**
     * Fetches Pipeline Health data for a given Interval and will be presented in day wise format 
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @return ApiResponse&lt;ResponseDTODashboardPipelineHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTODashboardPipelineHealth> getPipelinedHealthWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = getPipelinedHealthValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTODashboardPipelineHealth>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches Pipeline Health data for a given Interval and will be presented in day wise format  (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelinedHealthAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ApiCallback<ResponseDTODashboardPipelineHealth> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelinedHealthValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTODashboardPipelineHealth>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelinedHealth1
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelinedHealth1Call(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/dashboard/pipelineHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (moduleInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleInfo", moduleInfo));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelinedHealth1ValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPipelinedHealth1(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getPipelinedHealth1(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getPipelinedHealth1(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getPipelinedHealth1(Async)");
        }
        // verify the required parameter 'moduleInfo' is set
        if (moduleInfo == null) {
            throw new ApiException("Missing the required parameter 'moduleInfo' when calling getPipelinedHealth1(Async)");
        }
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getPipelinedHealth1(Async)");
        }
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getPipelinedHealth1(Async)");
        }
        
        com.squareup.okhttp.Call call = getPipelinedHealth1Call(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches Pipeline Health data for a given Interval and will be presented in day wise format
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @return ResponseDTODashboardPipelineHealth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTODashboardPipelineHealth getPipelinedHealth1(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime) throws ApiException {
        ApiResponse<ResponseDTODashboardPipelineHealth> resp = getPipelinedHealth1WithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime);
        return resp.getData();
    }

    /**
     * Fetches Pipeline Health data for a given Interval and will be presented in day wise format
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @return ApiResponse&lt;ResponseDTODashboardPipelineHealth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTODashboardPipelineHealth> getPipelinedHealth1WithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = getPipelinedHealth1ValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTODashboardPipelineHealth>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches Pipeline Health data for a given Interval and will be presented in day wise format (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Identifier (required)
     * @param moduleInfo The module from which execution was triggered. (required)
     * @param startTime Start Date Epoch time in ms (required)
     * @param endTime End Date Epoch time in ms (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelinedHealth1Async(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String moduleInfo, Long startTime, Long endTime, final ApiCallback<ResponseDTODashboardPipelineHealth> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelinedHealth1ValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, moduleInfo, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTODashboardPipelineHealth>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
