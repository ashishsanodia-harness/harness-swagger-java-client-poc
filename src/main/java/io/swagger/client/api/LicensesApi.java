/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOAccountLicense;
import io.swagger.client.model.ResponseDTOLicensesWithSummary;
import io.swagger.client.model.ResponseDTOListModuleLicense;
import io.swagger.client.model.ResponseDTOMapEditionSetEditionAction;
import io.swagger.client.model.ResponseDTOMapModuleTypeLong;
import io.swagger.client.model.ResponseDTOModuleLicense;
import io.swagger.client.model.StartTrial;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicensesApi {
    private ApiClient apiClient;

    public LicensesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicensesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for extendTrialLicense
     * @param body This is the details of the Trial License. ModuleType and edition are mandatory (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call extendTrialLicenseCall(StartTrial body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/extend-trial";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call extendTrialLicenseValidateBeforeCall(StartTrial body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling extendTrialLicense(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling extendTrialLicense(Async)");
        }
        
        com.squareup.okhttp.Call call = extendTrialLicenseCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Extends Trial License For A Module
     * 
     * @param body This is the details of the Trial License. ModuleType and edition are mandatory (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOModuleLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOModuleLicense extendTrialLicense(StartTrial body, String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOModuleLicense> resp = extendTrialLicenseWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Extends Trial License For A Module
     * 
     * @param body This is the details of the Trial License. ModuleType and edition are mandatory (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOModuleLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOModuleLicense> extendTrialLicenseWithHttpInfo(StartTrial body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = extendTrialLicenseValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOModuleLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extends Trial License For A Module (asynchronously)
     * 
     * @param body This is the details of the Trial License. ModuleType and edition are mandatory (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call extendTrialLicenseAsync(StartTrial body, String accountIdentifier, final ApiCallback<ResponseDTOModuleLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = extendTrialLicenseValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOModuleLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountLicenses
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountLicensesCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountLicensesValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAccountLicenses(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountLicensesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets All Module License Information in Account
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOAccountLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOAccountLicense getAccountLicenses(String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOAccountLicense> resp = getAccountLicensesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Gets All Module License Information in Account
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOAccountLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOAccountLicense> getAccountLicensesWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAccountLicensesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOAccountLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets All Module License Information in Account (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountLicensesAsync(String accountIdentifier, final ApiCallback<ResponseDTOAccountLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountLicensesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOAccountLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEditionActions
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEditionActionsCall(String accountIdentifier, String moduleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEditionActionsValidateBeforeCall(String accountIdentifier, String moduleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getEditionActions(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling getEditionActions(Async)");
        }
        
        com.squareup.okhttp.Call call = getEditionActionsCall(accountIdentifier, moduleType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Allowed Actions Under Each Edition
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @return ResponseDTOMapEditionSetEditionAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOMapEditionSetEditionAction getEditionActions(String accountIdentifier, String moduleType) throws ApiException {
        ApiResponse<ResponseDTOMapEditionSetEditionAction> resp = getEditionActionsWithHttpInfo(accountIdentifier, moduleType);
        return resp.getData();
    }

    /**
     * Get Allowed Actions Under Each Edition
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @return ApiResponse&lt;ResponseDTOMapEditionSetEditionAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOMapEditionSetEditionAction> getEditionActionsWithHttpInfo(String accountIdentifier, String moduleType) throws ApiException {
        com.squareup.okhttp.Call call = getEditionActionsValidateBeforeCall(accountIdentifier, moduleType, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOMapEditionSetEditionAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Allowed Actions Under Each Edition (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEditionActionsAsync(String accountIdentifier, String moduleType, final ApiCallback<ResponseDTOMapEditionSetEditionAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEditionActionsValidateBeforeCall(accountIdentifier, moduleType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOMapEditionSetEditionAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastModifiedTimeForAllModuleTypes
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastModifiedTimeForAllModuleTypesCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastModifiedTimeForAllModuleTypesValidateBeforeCall(String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getLastModifiedTimeForAllModuleTypes(Async)");
        }
        
        com.squareup.okhttp.Call call = getLastModifiedTimeForAllModuleTypesCall(accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Last Modified Time Under Each ModuleType
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOMapModuleTypeLong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOMapModuleTypeLong getLastModifiedTimeForAllModuleTypes(String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOMapModuleTypeLong> resp = getLastModifiedTimeForAllModuleTypesWithHttpInfo(accountIdentifier);
        return resp.getData();
    }

    /**
     * Get Last Modified Time Under Each ModuleType
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOMapModuleTypeLong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOMapModuleTypeLong> getLastModifiedTimeForAllModuleTypesWithHttpInfo(String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getLastModifiedTimeForAllModuleTypesValidateBeforeCall(accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOMapModuleTypeLong>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Last Modified Time Under Each ModuleType (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastModifiedTimeForAllModuleTypesAsync(String accountIdentifier, final ApiCallback<ResponseDTOMapModuleTypeLong> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastModifiedTimeForAllModuleTypesValidateBeforeCall(accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOMapModuleTypeLong>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLicensesAndSummary
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLicensesAndSummaryCall(String accountIdentifier, String moduleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/{accountIdentifier}/summary"
            .replaceAll("\\{" + "accountIdentifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLicensesAndSummaryValidateBeforeCall(String accountIdentifier, String moduleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getLicensesAndSummary(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling getLicensesAndSummary(Async)");
        }
        
        com.squareup.okhttp.Call call = getLicensesAndSummaryCall(accountIdentifier, moduleType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Module Licenses With Summary By Account And ModuleType
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @return ResponseDTOLicensesWithSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOLicensesWithSummary getLicensesAndSummary(String accountIdentifier, String moduleType) throws ApiException {
        ApiResponse<ResponseDTOLicensesWithSummary> resp = getLicensesAndSummaryWithHttpInfo(accountIdentifier, moduleType);
        return resp.getData();
    }

    /**
     * Gets Module Licenses With Summary By Account And ModuleType
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @return ApiResponse&lt;ResponseDTOLicensesWithSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOLicensesWithSummary> getLicensesAndSummaryWithHttpInfo(String accountIdentifier, String moduleType) throws ApiException {
        com.squareup.okhttp.Call call = getLicensesAndSummaryValidateBeforeCall(accountIdentifier, moduleType, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOLicensesWithSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Module Licenses With Summary By Account And ModuleType (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLicensesAndSummaryAsync(String accountIdentifier, String moduleType, final ApiCallback<ResponseDTOLicensesWithSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLicensesAndSummaryValidateBeforeCall(accountIdentifier, moduleType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOLicensesWithSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModuleLicenseById
     * @param identifier The module license identifier (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModuleLicenseByIdCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModuleLicenseByIdValidateBeforeCall(String identifier, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getModuleLicenseById(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getModuleLicenseById(Async)");
        }
        
        com.squareup.okhttp.Call call = getModuleLicenseByIdCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Module License
     * 
     * @param identifier The module license identifier (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOModuleLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOModuleLicense getModuleLicenseById(String identifier, String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOModuleLicense> resp = getModuleLicenseByIdWithHttpInfo(identifier, accountIdentifier);
        return resp.getData();
    }

    /**
     * Gets Module License
     * 
     * @param identifier The module license identifier (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOModuleLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOModuleLicense> getModuleLicenseByIdWithHttpInfo(String identifier, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getModuleLicenseByIdValidateBeforeCall(identifier, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOModuleLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Module License (asynchronously)
     * 
     * @param identifier The module license identifier (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModuleLicenseByIdAsync(String identifier, String accountIdentifier, final ApiCallback<ResponseDTOModuleLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModuleLicenseByIdValidateBeforeCall(identifier, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOModuleLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModuleLicensesByAccountAndModuleType
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModuleLicensesByAccountAndModuleTypeCall(String accountIdentifier, String moduleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/modules/{accountIdentifier}"
            .replaceAll("\\{" + "accountIdentifier" + "\\}", apiClient.escapeString(accountIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModuleLicensesByAccountAndModuleTypeValidateBeforeCall(String accountIdentifier, String moduleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getModuleLicensesByAccountAndModuleType(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling getModuleLicensesByAccountAndModuleType(Async)");
        }
        
        com.squareup.okhttp.Call call = getModuleLicensesByAccountAndModuleTypeCall(accountIdentifier, moduleType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Module Licenses By Account And ModuleType
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @return ResponseDTOListModuleLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListModuleLicense getModuleLicensesByAccountAndModuleType(String accountIdentifier, String moduleType) throws ApiException {
        ApiResponse<ResponseDTOListModuleLicense> resp = getModuleLicensesByAccountAndModuleTypeWithHttpInfo(accountIdentifier, moduleType);
        return resp.getData();
    }

    /**
     * Gets Module Licenses By Account And ModuleType
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @return ApiResponse&lt;ResponseDTOListModuleLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListModuleLicense> getModuleLicensesByAccountAndModuleTypeWithHttpInfo(String accountIdentifier, String moduleType) throws ApiException {
        com.squareup.okhttp.Call call = getModuleLicensesByAccountAndModuleTypeValidateBeforeCall(accountIdentifier, moduleType, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListModuleLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Module Licenses By Account And ModuleType (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModuleLicensesByAccountAndModuleTypeAsync(String accountIdentifier, String moduleType, final ApiCallback<ResponseDTOListModuleLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModuleLicensesByAccountAndModuleTypeValidateBeforeCall(accountIdentifier, moduleType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListModuleLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startFreeLicense
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startFreeLicenseCall(String accountIdentifier, String moduleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/free";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (moduleType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("moduleType", moduleType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startFreeLicenseValidateBeforeCall(String accountIdentifier, String moduleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling startFreeLicense(Async)");
        }
        // verify the required parameter 'moduleType' is set
        if (moduleType == null) {
            throw new ApiException("Missing the required parameter 'moduleType' when calling startFreeLicense(Async)");
        }
        
        com.squareup.okhttp.Call call = startFreeLicenseCall(accountIdentifier, moduleType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Starts Free License For A Module
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @return ResponseDTOModuleLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOModuleLicense startFreeLicense(String accountIdentifier, String moduleType) throws ApiException {
        ApiResponse<ResponseDTOModuleLicense> resp = startFreeLicenseWithHttpInfo(accountIdentifier, moduleType);
        return resp.getData();
    }

    /**
     * Starts Free License For A Module
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @return ApiResponse&lt;ResponseDTOModuleLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOModuleLicense> startFreeLicenseWithHttpInfo(String accountIdentifier, String moduleType) throws ApiException {
        com.squareup.okhttp.Call call = startFreeLicenseValidateBeforeCall(accountIdentifier, moduleType, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOModuleLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Starts Free License For A Module (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param moduleType A Harness Platform module. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startFreeLicenseAsync(String accountIdentifier, String moduleType, final ApiCallback<ResponseDTOModuleLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startFreeLicenseValidateBeforeCall(accountIdentifier, moduleType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOModuleLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startTrialLicense
     * @param body This is the details of the Trial License. ModuleType and edition are mandatory (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startTrialLicenseCall(StartTrial body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/licenses/trial";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startTrialLicenseValidateBeforeCall(StartTrial body, String accountIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling startTrialLicense(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling startTrialLicense(Async)");
        }
        
        com.squareup.okhttp.Call call = startTrialLicenseCall(body, accountIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Starts Trial License For A Module
     * 
     * @param body This is the details of the Trial License. ModuleType and edition are mandatory (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ResponseDTOModuleLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOModuleLicense startTrialLicense(StartTrial body, String accountIdentifier) throws ApiException {
        ApiResponse<ResponseDTOModuleLicense> resp = startTrialLicenseWithHttpInfo(body, accountIdentifier);
        return resp.getData();
    }

    /**
     * Starts Trial License For A Module
     * 
     * @param body This is the details of the Trial License. ModuleType and edition are mandatory (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @return ApiResponse&lt;ResponseDTOModuleLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOModuleLicense> startTrialLicenseWithHttpInfo(StartTrial body, String accountIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = startTrialLicenseValidateBeforeCall(body, accountIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOModuleLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Starts Trial License For A Module (asynchronously)
     * 
     * @param body This is the details of the Trial License. ModuleType and edition are mandatory (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startTrialLicenseAsync(StartTrial body, String accountIdentifier, final ApiCallback<ResponseDTOModuleLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startTrialLicenseValidateBeforeCall(body, accountIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOModuleLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
