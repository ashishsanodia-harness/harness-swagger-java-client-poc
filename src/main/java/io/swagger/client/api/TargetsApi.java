/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CfError;
import io.swagger.client.model.CfPatchOperation;
import io.swagger.client.model.Target;
import io.swagger.client.model.TargetDetail;
import io.swagger.client.model.Targets;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TargetsApi {
    private ApiClient apiClient;

    public TargetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TargetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTarget
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTargetCall(Target body, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTargetValidateBeforeCall(Target body, String accountIdentifier, String orgIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTarget(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createTarget(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling createTarget(Async)");
        }
        
        com.squareup.okhttp.Call call = createTargetCall(body, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a Target
     * Create Targets for the given identifier
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createTarget(Target body, String accountIdentifier, String orgIdentifier) throws ApiException {
        createTargetWithHttpInfo(body, accountIdentifier, orgIdentifier);
    }

    /**
     * Creates a Target
     * Create Targets for the given identifier
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createTargetWithHttpInfo(Target body, String accountIdentifier, String orgIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createTargetValidateBeforeCall(body, accountIdentifier, orgIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a Target (asynchronously)
     * Create Targets for the given identifier
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTargetAsync(Target body, String accountIdentifier, String orgIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTargetValidateBeforeCall(body, accountIdentifier, orgIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTarget
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTargetCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/targets/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTargetValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteTarget(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteTarget(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling deleteTarget(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling deleteTarget(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling deleteTarget(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTargetCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a Target
     * Deletes a Target for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTarget(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        deleteTargetWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier);
    }

    /**
     * Deletes a Target
     * Deletes a Target for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTargetWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteTargetValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Target (asynchronously)
     * Deletes a Target for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTargetAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTargetValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllTargets
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param targetName Name of the target (optional)
     * @param targetIdentifier Identifier of the target (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllTargetsCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String targetName, String targetIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (sortByField != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortByField", sortByField));
        if (targetName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetName", targetName));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTargetsValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String targetName, String targetIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAllTargets(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getAllTargets(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getAllTargets(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getAllTargets(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllTargetsCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, targetName, targetIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all Targets
     * Returns all the Targets for the given Account ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param targetName Name of the target (optional)
     * @param targetIdentifier Identifier of the target (optional)
     * @return Targets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Targets getAllTargets(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String targetName, String targetIdentifier) throws ApiException {
        ApiResponse<Targets> resp = getAllTargetsWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, targetName, targetIdentifier);
        return resp.getData();
    }

    /**
     * Returns all Targets
     * Returns all the Targets for the given Account ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param targetName Name of the target (optional)
     * @param targetIdentifier Identifier of the target (optional)
     * @return ApiResponse&lt;Targets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Targets> getAllTargetsWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String targetName, String targetIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAllTargetsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, targetName, targetIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Targets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all Targets (asynchronously)
     * Returns all the Targets for the given Account ID
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param pageNumber PageNumber (optional)
     * @param pageSize PageSize (optional)
     * @param sortOrder SortOrder (optional)
     * @param sortByField SortByField (optional)
     * @param targetName Name of the target (optional)
     * @param targetIdentifier Identifier of the target (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTargetsAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, Integer pageNumber, Integer pageSize, String sortOrder, String sortByField, String targetName, String targetIdentifier, final ApiCallback<Targets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTargetsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, pageNumber, pageSize, sortOrder, sortByField, targetName, targetIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Targets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTarget
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTargetCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/targets/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTargetValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getTarget(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getTarget(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getTarget(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getTarget(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getTarget(Async)");
        }
        
        com.squareup.okhttp.Call call = getTargetCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns details of a Target
     * Returns details of a Target for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return Target
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Target getTarget(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        ApiResponse<Target> resp = getTargetWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier);
        return resp.getData();
    }

    /**
     * Returns details of a Target
     * Returns details of a Target for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return ApiResponse&lt;Target&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Target> getTargetWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTargetValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, null, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns details of a Target (asynchronously)
     * Returns details of a Target for the given identifier
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTargetAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ApiCallback<Target> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTargetValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTargetSegments
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTargetSegmentsCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cf/admin/targets/{identifier}/segments"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTargetSegmentsValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getTargetSegments(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getTargetSegments(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getTargetSegments(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getTargetSegments(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getTargetSegments(Async)");
        }
        
        com.squareup.okhttp.Call call = getTargetSegmentsCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns Target Groups for the given Target
     * Returns the Target Groups that the specified Target belongs to.
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return TargetDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TargetDetail getTargetSegments(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        ApiResponse<TargetDetail> resp = getTargetSegmentsWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier);
        return resp.getData();
    }

    /**
     * Returns Target Groups for the given Target
     * Returns the Target Groups that the specified Target belongs to.
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @return ApiResponse&lt;TargetDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TargetDetail> getTargetSegmentsWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTargetSegmentsValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, null, null);
        Type localVarReturnType = new TypeToken<TargetDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns Target Groups for the given Target (asynchronously)
     * Returns the Target Groups that the specified Target belongs to.
     * @param identifier Unique identifier for the object in the API. (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTargetSegmentsAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, final ApiCallback<TargetDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTargetSegmentsValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TargetDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modifyTarget
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modifyTargetCall(Target body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/targets/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modifyTargetValidateBeforeCall(Target body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modifyTarget(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling modifyTarget(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling modifyTarget(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling modifyTarget(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling modifyTarget(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling modifyTarget(Async)");
        }
        
        com.squareup.okhttp.Call call = modifyTargetCall(body, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modifies a Target
     * Modifies a Target for the given account identifier
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @return Target
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Target modifyTarget(Target body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier) throws ApiException {
        ApiResponse<Target> resp = modifyTargetWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier);
        return resp.getData();
    }

    /**
     * Modifies a Target
     * Modifies a Target for the given account identifier
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @return ApiResponse&lt;Target&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Target> modifyTargetWithHttpInfo(Target body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier) throws ApiException {
        com.squareup.okhttp.Call call = modifyTargetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, null, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modifies a Target (asynchronously)
     * Modifies a Target for the given account identifier
     * @param body  (required)
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modifyTargetAsync(Target body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, final ApiCallback<Target> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modifyTargetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchTarget
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchTargetCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cf/admin/targets/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (environmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("environmentIdentifier", environmentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchTargetValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling patchTarget(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling patchTarget(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling patchTarget(Async)");
        }
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling patchTarget(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling patchTarget(Async)");
        }
        
        com.squareup.okhttp.Call call = patchTargetCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a Target
     * Updates a Target for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @return Target
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Target patchTarget(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body) throws ApiException {
        ApiResponse<Target> resp = patchTargetWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, body);
        return resp.getData();
    }

    /**
     * Updates a Target
     * Updates a Target for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Target&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Target> patchTargetWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body) throws ApiException {
        com.squareup.okhttp.Call call = patchTargetValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, body, null, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Target (asynchronously)
     * Updates a Target for the given identifier
     * @param accountIdentifier Account Identifier (required)
     * @param orgIdentifier Organization Identifier (required)
     * @param projectIdentifier The Project identifier (required)
     * @param environmentIdentifier Environment Identifier (required)
     * @param identifier Unique identifier for the object in the API. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchTargetAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String environmentIdentifier, String identifier, CfPatchOperation body, final ApiCallback<Target> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchTargetValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, environmentIdentifier, identifier, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
