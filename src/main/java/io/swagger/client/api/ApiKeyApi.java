/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiKey;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOApiKey;
import io.swagger.client.model.ResponseDTOApiKeyAggregate;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOListApiKey;
import io.swagger.client.model.ResponseDTOPageResponseApiKeyAggregate;
import io.swagger.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiKeyApi {
    private ApiClient apiClient;

    public ApiKeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiKeyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createApiKey
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createApiKeyCall(ApiKey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/apikey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createApiKeyValidateBeforeCall(ApiKey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createApiKeyCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates an API key
     * 
     * @param body  (optional)
     * @return ResponseDTOApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOApiKey createApiKey(ApiKey body) throws ApiException {
        ApiResponse<ResponseDTOApiKey> resp = createApiKeyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates an API key
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;ResponseDTOApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOApiKey> createApiKeyWithHttpInfo(ApiKey body) throws ApiException {
        com.squareup.okhttp.Call call = createApiKeyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOApiKey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an API key (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createApiKeyAsync(ApiKey body, final ApiCallback<ResponseDTOApiKey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createApiKeyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOApiKey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteApiKey
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier Id of API key&#x27;s Parent Service Account (required)
     * @param identifier This is the API key ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteApiKeyCall(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/apikey/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (apiKeyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKeyType", apiKeyType));
        if (parentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentIdentifier", parentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteApiKeyValidateBeforeCall(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteApiKey(Async)");
        }
        // verify the required parameter 'apiKeyType' is set
        if (apiKeyType == null) {
            throw new ApiException("Missing the required parameter 'apiKeyType' when calling deleteApiKey(Async)");
        }
        // verify the required parameter 'parentIdentifier' is set
        if (parentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'parentIdentifier' when calling deleteApiKey(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteApiKey(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteApiKeyCall(accountIdentifier, apiKeyType, parentIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes the API Key corresponding to the provided ID.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier Id of API key&#x27;s Parent Service Account (required)
     * @param identifier This is the API key ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deleteApiKey(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deleteApiKeyWithHttpInfo(accountIdentifier, apiKeyType, parentIdentifier, identifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Deletes the API Key corresponding to the provided ID.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier Id of API key&#x27;s Parent Service Account (required)
     * @param identifier This is the API key ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deleteApiKeyWithHttpInfo(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteApiKeyValidateBeforeCall(accountIdentifier, apiKeyType, parentIdentifier, identifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the API Key corresponding to the provided ID. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier Id of API key&#x27;s Parent Service Account (required)
     * @param identifier This is the API key ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteApiKeyAsync(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteApiKeyValidateBeforeCall(accountIdentifier, apiKeyType, parentIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregatedApiKey
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param identifier This is the API key ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregatedApiKeyCall(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/apikey/aggregate/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (apiKeyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKeyType", apiKeyType));
        if (parentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentIdentifier", parentIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregatedApiKeyValidateBeforeCall(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAggregatedApiKey(Async)");
        }
        // verify the required parameter 'apiKeyType' is set
        if (apiKeyType == null) {
            throw new ApiException("Missing the required parameter 'apiKeyType' when calling getAggregatedApiKey(Async)");
        }
        // verify the required parameter 'parentIdentifier' is set
        if (parentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'parentIdentifier' when calling getAggregatedApiKey(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getAggregatedApiKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getAggregatedApiKeyCall(accountIdentifier, apiKeyType, parentIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches the API Keys details corresponding to the provided ID and Scope.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param identifier This is the API key ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOApiKeyAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOApiKeyAggregate getAggregatedApiKey(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOApiKeyAggregate> resp = getAggregatedApiKeyWithHttpInfo(accountIdentifier, apiKeyType, parentIdentifier, identifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Fetches the API Keys details corresponding to the provided ID and Scope.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param identifier This is the API key ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOApiKeyAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOApiKeyAggregate> getAggregatedApiKeyWithHttpInfo(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getAggregatedApiKeyValidateBeforeCall(accountIdentifier, apiKeyType, parentIdentifier, identifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOApiKeyAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches the API Keys details corresponding to the provided ID and Scope. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param identifier This is the API key ID (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregatedApiKeyAsync(String accountIdentifier, String apiKeyType, String parentIdentifier, String identifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOApiKeyAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregatedApiKeyValidateBeforeCall(accountIdentifier, apiKeyType, parentIdentifier, identifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOApiKeyAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listApiKeys
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of API Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listApiKeysCall(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/apikey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (apiKeyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKeyType", apiKeyType));
        if (parentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentIdentifier", parentIdentifier));
        if (identifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "identifiers", identifiers));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listApiKeysValidateBeforeCall(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling listApiKeys(Async)");
        }
        // verify the required parameter 'apiKeyType' is set
        if (apiKeyType == null) {
            throw new ApiException("Missing the required parameter 'apiKeyType' when calling listApiKeys(Async)");
        }
        // verify the required parameter 'parentIdentifier' is set
        if (parentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'parentIdentifier' when calling listApiKeys(Async)");
        }
        
        com.squareup.okhttp.Call call = listApiKeysCall(accountIdentifier, apiKeyType, parentIdentifier, orgIdentifier, projectIdentifier, identifiers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches the list of API Keys corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of API Key IDs. Details specific to these IDs would be fetched. (optional)
     * @return ResponseDTOListApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListApiKey listApiKeys(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers) throws ApiException {
        ApiResponse<ResponseDTOListApiKey> resp = listApiKeysWithHttpInfo(accountIdentifier, apiKeyType, parentIdentifier, orgIdentifier, projectIdentifier, identifiers);
        return resp.getData();
    }

    /**
     * Fetches the list of API Keys corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of API Key IDs. Details specific to these IDs would be fetched. (optional)
     * @return ApiResponse&lt;ResponseDTOListApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListApiKey> listApiKeysWithHttpInfo(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers) throws ApiException {
        com.squareup.okhttp.Call call = listApiKeysValidateBeforeCall(accountIdentifier, apiKeyType, parentIdentifier, orgIdentifier, projectIdentifier, identifiers, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListApiKey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches the list of API Keys corresponding to the request&#x27;s filter criteria. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of API Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listApiKeysAsync(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, final ApiCallback<ResponseDTOListApiKey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listApiKeysValidateBeforeCall(accountIdentifier, apiKeyType, parentIdentifier, orgIdentifier, projectIdentifier, identifiers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListApiKey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listApiKeys1
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of API Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param searchTerm This would be used to filter API keys. Any API key having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listApiKeys1Call(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/apikey/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (apiKeyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKeyType", apiKeyType));
        if (parentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentIdentifier", parentIdentifier));
        if (identifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "identifiers", identifiers));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listApiKeys1ValidateBeforeCall(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling listApiKeys1(Async)");
        }
        // verify the required parameter 'apiKeyType' is set
        if (apiKeyType == null) {
            throw new ApiException("Missing the required parameter 'apiKeyType' when calling listApiKeys1(Async)");
        }
        // verify the required parameter 'parentIdentifier' is set
        if (parentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'parentIdentifier' when calling listApiKeys1(Async)");
        }
        
        com.squareup.okhttp.Call call = listApiKeys1Call(accountIdentifier, apiKeyType, parentIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetches the list of Aggregated API Keys corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of API Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param searchTerm This would be used to filter API keys. Any API key having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @return ResponseDTOPageResponseApiKeyAggregate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseApiKeyAggregate listApiKeys1(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm) throws ApiException {
        ApiResponse<ResponseDTOPageResponseApiKeyAggregate> resp = listApiKeys1WithHttpInfo(accountIdentifier, apiKeyType, parentIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm);
        return resp.getData();
    }

    /**
     * Fetches the list of Aggregated API Keys corresponding to the request&#x27;s filter criteria.
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of API Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param searchTerm This would be used to filter API keys. Any API key having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseApiKeyAggregate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseApiKeyAggregate> listApiKeys1WithHttpInfo(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm) throws ApiException {
        com.squareup.okhttp.Call call = listApiKeys1ValidateBeforeCall(accountIdentifier, apiKeyType, parentIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseApiKeyAggregate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches the list of Aggregated API Keys corresponding to the request&#x27;s filter criteria. (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param apiKeyType This is the API Key type like Personal Access Key or Service Account Key. (required)
     * @param parentIdentifier ID of API key&#x27;s Parent Service Account (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param identifiers This is the list of API Key IDs. Details specific to these IDs would be fetched. (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param searchTerm This would be used to filter API keys. Any API key having the specified string in its Name, ID and Tag would be filtered. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listApiKeys1Async(String accountIdentifier, String apiKeyType, String parentIdentifier, String orgIdentifier, String projectIdentifier, List<String> identifiers, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String searchTerm, final ApiCallback<ResponseDTOPageResponseApiKeyAggregate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listApiKeys1ValidateBeforeCall(accountIdentifier, apiKeyType, parentIdentifier, orgIdentifier, projectIdentifier, identifiers, pageIndex, pageSize, sortOrders, searchTerm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseApiKeyAggregate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateApiKey
     * @param identifier This is the API key ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateApiKeyCall(String identifier, ApiKey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/apikey/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateApiKeyValidateBeforeCall(String identifier, ApiKey body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateApiKey(Async)");
        }
        
        com.squareup.okhttp.Call call = updateApiKeyCall(identifier, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates API Key for the provided ID
     * 
     * @param identifier This is the API key ID (required)
     * @param body  (optional)
     * @return ResponseDTOApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOApiKey updateApiKey(String identifier, ApiKey body) throws ApiException {
        ApiResponse<ResponseDTOApiKey> resp = updateApiKeyWithHttpInfo(identifier, body);
        return resp.getData();
    }

    /**
     * Updates API Key for the provided ID
     * 
     * @param identifier This is the API key ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ResponseDTOApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOApiKey> updateApiKeyWithHttpInfo(String identifier, ApiKey body) throws ApiException {
        com.squareup.okhttp.Call call = updateApiKeyValidateBeforeCall(identifier, body, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOApiKey>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates API Key for the provided ID (asynchronously)
     * 
     * @param identifier This is the API key ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateApiKeyAsync(String identifier, ApiKey body, final ApiCallback<ResponseDTOApiKey> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateApiKeyValidateBeforeCall(identifier, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOApiKey>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
