/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EnvironmentRequest;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOEnvironmentResponse;
import io.swagger.client.model.ResponseDTOListEnvironmentResponse;
import io.swagger.client.model.ResponseDTOPageResponseEnvironmentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvironmentsApi {
    private ApiClient apiClient;

    public EnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvironmentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEnvironmentV2
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be created (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEnvironmentV2Call(String accountIdentifier, EnvironmentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/environmentsV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEnvironmentV2ValidateBeforeCall(String accountIdentifier, EnvironmentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createEnvironmentV2(Async)");
        }
        
        com.squareup.okhttp.Call call = createEnvironmentV2Call(accountIdentifier, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an Environment
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be created (optional)
     * @return ResponseDTOEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOEnvironmentResponse createEnvironmentV2(String accountIdentifier, EnvironmentRequest body) throws ApiException {
        ApiResponse<ResponseDTOEnvironmentResponse> resp = createEnvironmentV2WithHttpInfo(accountIdentifier, body);
        return resp.getData();
    }

    /**
     * Create an Environment
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be created (optional)
     * @return ApiResponse&lt;ResponseDTOEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOEnvironmentResponse> createEnvironmentV2WithHttpInfo(String accountIdentifier, EnvironmentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createEnvironmentV2ValidateBeforeCall(accountIdentifier, body, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOEnvironmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Environment (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be created (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEnvironmentV2Async(String accountIdentifier, EnvironmentRequest body, final ApiCallback<ResponseDTOEnvironmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEnvironmentV2ValidateBeforeCall(accountIdentifier, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOEnvironmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEnvironmentV2
     * @param environmentIdentifier Environment Identifier for the entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch  (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEnvironmentV2Call(String environmentIdentifier, String accountIdentifier, String ifMatch, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/environmentsV2/{environmentIdentifier}"
            .replaceAll("\\{" + "environmentIdentifier" + "\\}", apiClient.escapeString(environmentIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEnvironmentV2ValidateBeforeCall(String environmentIdentifier, String accountIdentifier, String ifMatch, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling deleteEnvironmentV2(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteEnvironmentV2(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteEnvironmentV2Call(environmentIdentifier, accountIdentifier, ifMatch, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Environment by identifier
     * 
     * @param environmentIdentifier Environment Identifier for the entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch  (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deleteEnvironmentV2(String environmentIdentifier, String accountIdentifier, String ifMatch, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deleteEnvironmentV2WithHttpInfo(environmentIdentifier, accountIdentifier, ifMatch, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Delete an Environment by identifier
     * 
     * @param environmentIdentifier Environment Identifier for the entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch  (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deleteEnvironmentV2WithHttpInfo(String environmentIdentifier, String accountIdentifier, String ifMatch, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteEnvironmentV2ValidateBeforeCall(environmentIdentifier, accountIdentifier, ifMatch, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an Environment by identifier (asynchronously)
     * 
     * @param environmentIdentifier Environment Identifier for the entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param ifMatch  (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEnvironmentV2Async(String environmentIdentifier, String accountIdentifier, String ifMatch, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEnvironmentV2ValidateBeforeCall(environmentIdentifier, accountIdentifier, ifMatch, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnvironmentAccessList
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm The word to be searched and included in the list response (optional)
     * @param envIdentifiers List of EnvironmentIds (optional)
     * @param sort Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEnvironmentAccessListCall(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/environmentsV2/list/access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (envIdentifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "envIdentifiers", envIdentifiers));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEnvironmentAccessListValidateBeforeCall(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getEnvironmentAccessList(Async)");
        }
        
        com.squareup.okhttp.Call call = getEnvironmentAccessListCall(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, envIdentifiers, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Environment Access list
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm The word to be searched and included in the list response (optional)
     * @param envIdentifiers List of EnvironmentIds (optional)
     * @param sort Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order (optional)
     * @return ResponseDTOListEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListEnvironmentResponse getEnvironmentAccessList(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort) throws ApiException {
        ApiResponse<ResponseDTOListEnvironmentResponse> resp = getEnvironmentAccessListWithHttpInfo(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, envIdentifiers, sort);
        return resp.getData();
    }

    /**
     * Gets Environment Access list
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm The word to be searched and included in the list response (optional)
     * @param envIdentifiers List of EnvironmentIds (optional)
     * @param sort Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order (optional)
     * @return ApiResponse&lt;ResponseDTOListEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListEnvironmentResponse> getEnvironmentAccessListWithHttpInfo(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort) throws ApiException {
        com.squareup.okhttp.Call call = getEnvironmentAccessListValidateBeforeCall(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, envIdentifiers, sort, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListEnvironmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Environment Access list (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm The word to be searched and included in the list response (optional)
     * @param envIdentifiers List of EnvironmentIds (optional)
     * @param sort Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEnvironmentAccessListAsync(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort, final ApiCallback<ResponseDTOListEnvironmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEnvironmentAccessListValidateBeforeCall(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, envIdentifiers, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListEnvironmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnvironmentList
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm The word to be searched and included in the list response (optional)
     * @param envIdentifiers List of EnvironmentIds (optional)
     * @param sort Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEnvironmentListCall(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/environmentsV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (envIdentifiers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "envIdentifiers", envIdentifiers));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEnvironmentListValidateBeforeCall(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getEnvironmentList(Async)");
        }
        
        com.squareup.okhttp.Call call = getEnvironmentListCall(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, envIdentifiers, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Environment list for a project
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm The word to be searched and included in the list response (optional)
     * @param envIdentifiers List of EnvironmentIds (optional)
     * @param sort Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order (optional)
     * @return ResponseDTOPageResponseEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseEnvironmentResponse getEnvironmentList(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort) throws ApiException {
        ApiResponse<ResponseDTOPageResponseEnvironmentResponse> resp = getEnvironmentListWithHttpInfo(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, envIdentifiers, sort);
        return resp.getData();
    }

    /**
     * Gets Environment list for a project
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm The word to be searched and included in the list response (optional)
     * @param envIdentifiers List of EnvironmentIds (optional)
     * @param sort Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseEnvironmentResponse> getEnvironmentListWithHttpInfo(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort) throws ApiException {
        com.squareup.okhttp.Call call = getEnvironmentListValidateBeforeCall(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, envIdentifiers, sort, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseEnvironmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Environment list for a project (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param page Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param size The number of the elements to fetch (optional, default to 100)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm The word to be searched and included in the list response (optional)
     * @param envIdentifiers List of EnvironmentIds (optional)
     * @param sort Specifies sorting criteria of the list. Like sorting based on the last updated entity, alphabetical sorting in an ascending or descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEnvironmentListAsync(String accountIdentifier, Integer page, Integer size, String orgIdentifier, String projectIdentifier, String searchTerm, List<String> envIdentifiers, List<String> sort, final ApiCallback<ResponseDTOPageResponseEnvironmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEnvironmentListValidateBeforeCall(accountIdentifier, page, size, orgIdentifier, projectIdentifier, searchTerm, envIdentifiers, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseEnvironmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEnvironmentV2
     * @param environmentIdentifier Environment Identifier for the entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param deleted Specify whether Environment is deleted or not (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEnvironmentV2Call(String environmentIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Boolean deleted, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/environmentsV2/{environmentIdentifier}"
            .replaceAll("\\{" + "environmentIdentifier" + "\\}", apiClient.escapeString(environmentIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (deleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deleted", deleted));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEnvironmentV2ValidateBeforeCall(String environmentIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Boolean deleted, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'environmentIdentifier' is set
        if (environmentIdentifier == null) {
            throw new ApiException("Missing the required parameter 'environmentIdentifier' when calling getEnvironmentV2(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getEnvironmentV2(Async)");
        }
        
        com.squareup.okhttp.Call call = getEnvironmentV2Call(environmentIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, deleted, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets an Environment by identifier
     * 
     * @param environmentIdentifier Environment Identifier for the entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param deleted Specify whether Environment is deleted or not (optional, default to false)
     * @return ResponseDTOEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOEnvironmentResponse getEnvironmentV2(String environmentIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Boolean deleted) throws ApiException {
        ApiResponse<ResponseDTOEnvironmentResponse> resp = getEnvironmentV2WithHttpInfo(environmentIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, deleted);
        return resp.getData();
    }

    /**
     * Gets an Environment by identifier
     * 
     * @param environmentIdentifier Environment Identifier for the entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param deleted Specify whether Environment is deleted or not (optional, default to false)
     * @return ApiResponse&lt;ResponseDTOEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOEnvironmentResponse> getEnvironmentV2WithHttpInfo(String environmentIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Boolean deleted) throws ApiException {
        com.squareup.okhttp.Call call = getEnvironmentV2ValidateBeforeCall(environmentIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, deleted, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOEnvironmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets an Environment by identifier (asynchronously)
     * 
     * @param environmentIdentifier Environment Identifier for the entity (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param deleted Specify whether Environment is deleted or not (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEnvironmentV2Async(String environmentIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, Boolean deleted, final ApiCallback<ResponseDTOEnvironmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEnvironmentV2ValidateBeforeCall(environmentIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, deleted, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOEnvironmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEnvironmentV2
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be updated (optional)
     * @param ifMatch  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEnvironmentV2Call(String accountIdentifier, EnvironmentRequest body, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/environmentsV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEnvironmentV2ValidateBeforeCall(String accountIdentifier, EnvironmentRequest body, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateEnvironmentV2(Async)");
        }
        
        com.squareup.okhttp.Call call = updateEnvironmentV2Call(accountIdentifier, body, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Environment by identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be updated (optional)
     * @param ifMatch  (optional)
     * @return ResponseDTOEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOEnvironmentResponse updateEnvironmentV2(String accountIdentifier, EnvironmentRequest body, String ifMatch) throws ApiException {
        ApiResponse<ResponseDTOEnvironmentResponse> resp = updateEnvironmentV2WithHttpInfo(accountIdentifier, body, ifMatch);
        return resp.getData();
    }

    /**
     * Update an Environment by identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be updated (optional)
     * @param ifMatch  (optional)
     * @return ApiResponse&lt;ResponseDTOEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOEnvironmentResponse> updateEnvironmentV2WithHttpInfo(String accountIdentifier, EnvironmentRequest body, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = updateEnvironmentV2ValidateBeforeCall(accountIdentifier, body, ifMatch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOEnvironmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Environment by identifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be updated (optional)
     * @param ifMatch  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEnvironmentV2Async(String accountIdentifier, EnvironmentRequest body, String ifMatch, final ApiCallback<ResponseDTOEnvironmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEnvironmentV2ValidateBeforeCall(accountIdentifier, body, ifMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOEnvironmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for upsertEnvironmentV2
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be updated (optional)
     * @param ifMatch  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call upsertEnvironmentV2Call(String accountIdentifier, EnvironmentRequest body, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/environmentsV2/upsert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call upsertEnvironmentV2ValidateBeforeCall(String accountIdentifier, EnvironmentRequest body, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling upsertEnvironmentV2(Async)");
        }
        
        com.squareup.okhttp.Call call = upsertEnvironmentV2Call(accountIdentifier, body, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upsert an Environment by identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be updated (optional)
     * @param ifMatch  (optional)
     * @return ResponseDTOEnvironmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOEnvironmentResponse upsertEnvironmentV2(String accountIdentifier, EnvironmentRequest body, String ifMatch) throws ApiException {
        ApiResponse<ResponseDTOEnvironmentResponse> resp = upsertEnvironmentV2WithHttpInfo(accountIdentifier, body, ifMatch);
        return resp.getData();
    }

    /**
     * Upsert an Environment by identifier
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be updated (optional)
     * @param ifMatch  (optional)
     * @return ApiResponse&lt;ResponseDTOEnvironmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOEnvironmentResponse> upsertEnvironmentV2WithHttpInfo(String accountIdentifier, EnvironmentRequest body, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = upsertEnvironmentV2ValidateBeforeCall(accountIdentifier, body, ifMatch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOEnvironmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upsert an Environment by identifier (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body Details of the Environment to be updated (optional)
     * @param ifMatch  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call upsertEnvironmentV2Async(String accountIdentifier, EnvironmentRequest body, String ifMatch, final ApiCallback<ResponseDTOEnvironmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = upsertEnvironmentV2ValidateBeforeCall(accountIdentifier, body, ifMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOEnvironmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
