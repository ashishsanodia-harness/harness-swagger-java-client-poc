/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccessDeniedError;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOListRoleAssignmentResponse;
import io.swagger.client.model.ResponseDTOPageResponseRoleAssignmentResponse;
import io.swagger.client.model.ResponseDTORoleAssignmentAggregateResponse;
import io.swagger.client.model.ResponseDTORoleAssignmentResponse;
import io.swagger.client.model.ResponseDTORoleAssignmentValidationResponse;
import io.swagger.client.model.RoleAssignment;
import io.swagger.client.model.RoleAssignmentCreateRequest;
import io.swagger.client.model.RoleAssignmentFilter;
import io.swagger.client.model.RoleAssignmentValidationRequest;
import io.swagger.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleAssignmentsApi {
    private ApiClient apiClient;

    public RoleAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleAssignmentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteRoleAssignment
     * @param identifier Identifier for role assignment (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRoleAssignmentCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/authz/api/roleassignments/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRoleAssignmentValidateBeforeCall(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteRoleAssignment(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRoleAssignmentCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an existing role assignment by identifier
     * 
     * @param identifier Identifier for role assignment (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleAssignmentResponse deleteRoleAssignment(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleAssignmentResponse> resp = deleteRoleAssignmentWithHttpInfo(identifier, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Delete an existing role assignment by identifier
     * 
     * @param identifier Identifier for role assignment (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleAssignmentResponse> deleteRoleAssignmentWithHttpInfo(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = deleteRoleAssignmentValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an existing role assignment by identifier (asynchronously)
     * 
     * @param identifier Identifier for role assignment (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRoleAssignmentAsync(String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleAssignmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRoleAssignmentValidateBeforeCall(identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilteredRoleAssignmentList
     * @param body Filter role assignments based on multiple parameters. (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilteredRoleAssignmentListCall(RoleAssignmentFilter body, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/authz/api/roleassignments/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilteredRoleAssignmentListValidateBeforeCall(RoleAssignmentFilter body, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getFilteredRoleAssignmentList(Async)");
        }
        
        com.squareup.okhttp.Call call = getFilteredRoleAssignmentListCall(body, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List role assignments in the scope according to the given filter
     * 
     * @param body Filter role assignments based on multiple parameters. (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOPageResponseRoleAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseRoleAssignmentResponse getFilteredRoleAssignmentList(RoleAssignmentFilter body, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOPageResponseRoleAssignmentResponse> resp = getFilteredRoleAssignmentListWithHttpInfo(body, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * List role assignments in the scope according to the given filter
     * 
     * @param body Filter role assignments based on multiple parameters. (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseRoleAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseRoleAssignmentResponse> getFilteredRoleAssignmentListWithHttpInfo(RoleAssignmentFilter body, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getFilteredRoleAssignmentListValidateBeforeCall(body, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseRoleAssignmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List role assignments in the scope according to the given filter (asynchronously)
     * 
     * @param body Filter role assignments based on multiple parameters. (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilteredRoleAssignmentListAsync(RoleAssignmentFilter body, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOPageResponseRoleAssignmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilteredRoleAssignmentListValidateBeforeCall(body, pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseRoleAssignmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRoleAssignmentAggregateList
     * @param body Filter role assignments based on multiple parameters. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRoleAssignmentAggregateListCall(RoleAssignmentFilter body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/authz/api/roleassignments/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRoleAssignmentAggregateListValidateBeforeCall(RoleAssignmentFilter body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getRoleAssignmentAggregateList(Async)");
        }
        
        com.squareup.okhttp.Call call = getRoleAssignmentAggregateListCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List role assignments in the scope according to the given filter with added metadata
     * 
     * @param body Filter role assignments based on multiple parameters. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleAssignmentAggregateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleAssignmentAggregateResponse getRoleAssignmentAggregateList(RoleAssignmentFilter body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleAssignmentAggregateResponse> resp = getRoleAssignmentAggregateListWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * List role assignments in the scope according to the given filter with added metadata
     * 
     * @param body Filter role assignments based on multiple parameters. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleAssignmentAggregateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleAssignmentAggregateResponse> getRoleAssignmentAggregateListWithHttpInfo(RoleAssignmentFilter body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getRoleAssignmentAggregateListValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentAggregateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List role assignments in the scope according to the given filter with added metadata (asynchronously)
     * 
     * @param body Filter role assignments based on multiple parameters. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRoleAssignmentAggregateListAsync(RoleAssignmentFilter body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleAssignmentAggregateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRoleAssignmentAggregateListValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentAggregateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRoleAssignmentList
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRoleAssignmentListCall(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/authz/api/roleassignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRoleAssignmentListValidateBeforeCall(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getRoleAssignmentListCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List role assignments in the given scope
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOPageResponseRoleAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseRoleAssignmentResponse getRoleAssignmentList(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOPageResponseRoleAssignmentResponse> resp = getRoleAssignmentListWithHttpInfo(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * List role assignments in the given scope
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseRoleAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseRoleAssignmentResponse> getRoleAssignmentListWithHttpInfo(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getRoleAssignmentListValidateBeforeCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseRoleAssignmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List role assignments in the given scope (asynchronously)
     * 
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRoleAssignmentListAsync(Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOPageResponseRoleAssignmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRoleAssignmentListValidateBeforeCall(pageIndex, pageSize, sortOrders, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseRoleAssignmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postRoleAssignment
     * @param body These are details for the role assignment to create. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postRoleAssignmentCall(RoleAssignment body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/authz/api/roleassignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postRoleAssignmentValidateBeforeCall(RoleAssignment body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postRoleAssignment(Async)");
        }
        
        com.squareup.okhttp.Call call = postRoleAssignmentCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates role assignment within the specified scope.
     * 
     * @param body These are details for the role assignment to create. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleAssignmentResponse postRoleAssignment(RoleAssignment body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleAssignmentResponse> resp = postRoleAssignmentWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Creates role assignment within the specified scope.
     * 
     * @param body These are details for the role assignment to create. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleAssignmentResponse> postRoleAssignmentWithHttpInfo(RoleAssignment body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postRoleAssignmentValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates role assignment within the specified scope. (asynchronously)
     * 
     * @param body These are details for the role assignment to create. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postRoleAssignmentAsync(RoleAssignment body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleAssignmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postRoleAssignmentValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postRoleAssignments
     * @param body List of role assignments to create (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postRoleAssignmentsCall(RoleAssignmentCreateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/authz/api/roleassignments/multi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postRoleAssignmentsValidateBeforeCall(RoleAssignmentCreateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postRoleAssignments(Async)");
        }
        
        com.squareup.okhttp.Call call = postRoleAssignmentsCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create multiple role assignments in a scope. Returns all successfully created role assignments. Ignores failures and duplicates.
     * 
     * @param body List of role assignments to create (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOListRoleAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListRoleAssignmentResponse postRoleAssignments(RoleAssignmentCreateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOListRoleAssignmentResponse> resp = postRoleAssignmentsWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Create multiple role assignments in a scope. Returns all successfully created role assignments. Ignores failures and duplicates.
     * 
     * @param body List of role assignments to create (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOListRoleAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListRoleAssignmentResponse> postRoleAssignmentsWithHttpInfo(RoleAssignmentCreateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = postRoleAssignmentsValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListRoleAssignmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create multiple role assignments in a scope. Returns all successfully created role assignments. Ignores failures and duplicates. (asynchronously)
     * 
     * @param body List of role assignments to create (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postRoleAssignmentsAsync(RoleAssignmentCreateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOListRoleAssignmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postRoleAssignmentsValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListRoleAssignmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putRoleAssignment
     * @param body This has the details of the updated role assignment. (required)
     * @param identifier Identifier of the role assignment to update (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putRoleAssignmentCall(RoleAssignment body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/authz/api/roleassignments/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putRoleAssignmentValidateBeforeCall(RoleAssignment body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putRoleAssignment(Async)");
        }
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling putRoleAssignment(Async)");
        }
        
        com.squareup.okhttp.Call call = putRoleAssignmentCall(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update existing role assignment by identifier and scope. Only changing the disabled/enabled state is allowed.
     * 
     * @param body This has the details of the updated role assignment. (required)
     * @param identifier Identifier of the role assignment to update (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleAssignmentResponse putRoleAssignment(RoleAssignment body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleAssignmentResponse> resp = putRoleAssignmentWithHttpInfo(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Update existing role assignment by identifier and scope. Only changing the disabled/enabled state is allowed.
     * 
     * @param body This has the details of the updated role assignment. (required)
     * @param identifier Identifier of the role assignment to update (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleAssignmentResponse> putRoleAssignmentWithHttpInfo(RoleAssignment body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = putRoleAssignmentValidateBeforeCall(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update existing role assignment by identifier and scope. Only changing the disabled/enabled state is allowed. (asynchronously)
     * 
     * @param body This has the details of the updated role assignment. (required)
     * @param identifier Identifier of the role assignment to update (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putRoleAssignmentAsync(RoleAssignment body, String identifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleAssignmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putRoleAssignmentValidateBeforeCall(body, identifier, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateRoleAssignment
     * @param body This is the details of the role assignment for validation. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateRoleAssignmentCall(RoleAssignmentValidationRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/authz/api/roleassignments/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateRoleAssignmentValidateBeforeCall(RoleAssignmentValidationRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling validateRoleAssignment(Async)");
        }
        
        com.squareup.okhttp.Call call = validateRoleAssignmentCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check whether a proposed role assignment is valid.
     * 
     * @param body This is the details of the role assignment for validation. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTORoleAssignmentValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTORoleAssignmentValidationResponse validateRoleAssignment(RoleAssignmentValidationRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTORoleAssignmentValidationResponse> resp = validateRoleAssignmentWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Check whether a proposed role assignment is valid.
     * 
     * @param body This is the details of the role assignment for validation. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTORoleAssignmentValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTORoleAssignmentValidationResponse> validateRoleAssignmentWithHttpInfo(RoleAssignmentValidationRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = validateRoleAssignmentValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check whether a proposed role assignment is valid. (asynchronously)
     * 
     * @param body This is the details of the role assignment for validation. (required)
     * @param accountIdentifier Account Identifier for the Entity (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateRoleAssignmentAsync(RoleAssignmentValidationRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTORoleAssignmentValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateRoleAssignmentValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTORoleAssignmentValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
