/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ACLAggregateFilter;
import io.swagger.client.model.CreateInvite;
import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.Invite;
import io.swagger.client.model.ResponseDTOInvite;
import io.swagger.client.model.ResponseDTOListInviteOperationResponse;
import io.swagger.client.model.ResponseDTOOptionalInvite;
import io.swagger.client.model.ResponseDTOPageResponseInvite;
import io.swagger.client.model.SortOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InviteApi {
    private ApiClient apiClient;

    public InviteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InviteApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteInvite
     * @param inviteId Invite Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInviteCall(String inviteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/invites/{inviteId}"
            .replaceAll("\\{" + "inviteId" + "\\}", apiClient.escapeString(inviteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInviteValidateBeforeCall(String inviteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'inviteId' is set
        if (inviteId == null) {
            throw new ApiException("Missing the required parameter 'inviteId' when calling deleteInvite(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteInviteCall(inviteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Invite by Identifier
     * 
     * @param inviteId Invite Id (required)
     * @return ResponseDTOOptionalInvite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOOptionalInvite deleteInvite(String inviteId) throws ApiException {
        ApiResponse<ResponseDTOOptionalInvite> resp = deleteInviteWithHttpInfo(inviteId);
        return resp.getData();
    }

    /**
     * Delete an Invite by Identifier
     * 
     * @param inviteId Invite Id (required)
     * @return ApiResponse&lt;ResponseDTOOptionalInvite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOOptionalInvite> deleteInviteWithHttpInfo(String inviteId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInviteValidateBeforeCall(inviteId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOOptionalInvite>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an Invite by Identifier (asynchronously)
     * 
     * @param inviteId Invite Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInviteAsync(String inviteId, final ApiCallback<ResponseDTOOptionalInvite> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInviteValidateBeforeCall(inviteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOOptionalInvite>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvite
     * @param inviteId Invitation Id (optional)
     * @param jwttoken JWT Token (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInviteCall(String inviteId, String jwttoken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/invites/invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inviteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inviteId", inviteId));
        if (jwttoken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jwttoken", jwttoken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInviteValidateBeforeCall(String inviteId, String jwttoken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getInviteCall(inviteId, jwttoken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets an Invite by either Invite Id or JwtToken
     * 
     * @param inviteId Invitation Id (optional)
     * @param jwttoken JWT Token (optional)
     * @return ResponseDTOInvite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInvite getInvite(String inviteId, String jwttoken) throws ApiException {
        ApiResponse<ResponseDTOInvite> resp = getInviteWithHttpInfo(inviteId, jwttoken);
        return resp.getData();
    }

    /**
     * Gets an Invite by either Invite Id or JwtToken
     * 
     * @param inviteId Invitation Id (optional)
     * @param jwttoken JWT Token (optional)
     * @return ApiResponse&lt;ResponseDTOInvite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInvite> getInviteWithHttpInfo(String inviteId, String jwttoken) throws ApiException {
        com.squareup.okhttp.Call call = getInviteValidateBeforeCall(inviteId, jwttoken, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInvite>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets an Invite by either Invite Id or JwtToken (asynchronously)
     * 
     * @param inviteId Invitation Id (optional)
     * @param jwttoken JWT Token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInviteAsync(String inviteId, String jwttoken, final ApiCallback<ResponseDTOInvite> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInviteValidateBeforeCall(inviteId, jwttoken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInvite>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInvites
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInvitesCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ng/api/invites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvitesValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getInvites(Async)");
        }
        
        com.squareup.okhttp.Call call = getInvitesCall(accountIdentifier, orgIdentifier, projectIdentifier, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all the Invites for a Project or Organization
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ResponseDTOPageResponseInvite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseInvite getInvites(String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        ApiResponse<ResponseDTOPageResponseInvite> resp = getInvitesWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pageIndex, pageSize, sortOrders);
        return resp.getData();
    }

    /**
     * List all the Invites for a Project or Organization
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseInvite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseInvite> getInvitesWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        com.squareup.okhttp.Call call = getInvitesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pageIndex, pageSize, sortOrders, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseInvite>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all the Invites for a Project or Organization (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvitesAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ApiCallback<ResponseDTOPageResponseInvite> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvitesValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseInvite>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPendingUsersAggregated
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body  (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search term (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPendingUsersAggregatedCall(String accountIdentifier, ACLAggregateFilter body, String orgIdentifier, String projectIdentifier, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/invites/aggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPendingUsersAggregatedValidateBeforeCall(String accountIdentifier, ACLAggregateFilter body, String orgIdentifier, String projectIdentifier, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getPendingUsersAggregated(Async)");
        }
        
        com.squareup.okhttp.Call call = getPendingUsersAggregatedCall(accountIdentifier, body, orgIdentifier, projectIdentifier, searchTerm, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List of all the Invites pending users
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body  (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search term (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ResponseDTOPageResponseInvite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseInvite getPendingUsersAggregated(String accountIdentifier, ACLAggregateFilter body, String orgIdentifier, String projectIdentifier, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        ApiResponse<ResponseDTOPageResponseInvite> resp = getPendingUsersAggregatedWithHttpInfo(accountIdentifier, body, orgIdentifier, projectIdentifier, searchTerm, pageIndex, pageSize, sortOrders);
        return resp.getData();
    }

    /**
     * List of all the Invites pending users
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body  (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search term (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseInvite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseInvite> getPendingUsersAggregatedWithHttpInfo(String accountIdentifier, ACLAggregateFilter body, String orgIdentifier, String projectIdentifier, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders) throws ApiException {
        com.squareup.okhttp.Call call = getPendingUsersAggregatedValidateBeforeCall(accountIdentifier, body, orgIdentifier, projectIdentifier, searchTerm, pageIndex, pageSize, sortOrders, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseInvite>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of all the Invites pending users (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param body  (optional)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param searchTerm Search term (optional)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 50)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPendingUsersAggregatedAsync(String accountIdentifier, ACLAggregateFilter body, String orgIdentifier, String projectIdentifier, String searchTerm, Integer pageIndex, Integer pageSize, List<SortOrder> sortOrders, final ApiCallback<ResponseDTOPageResponseInvite> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPendingUsersAggregatedValidateBeforeCall(accountIdentifier, body, orgIdentifier, projectIdentifier, searchTerm, pageIndex, pageSize, sortOrders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseInvite>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendInvite
     * @param body Details of the Invite to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendInviteCall(CreateInvite body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/invites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendInviteValidateBeforeCall(CreateInvite body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sendInvite(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling sendInvite(Async)");
        }
        
        com.squareup.okhttp.Call call = sendInviteCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a user Invite to either Project or Organization (Deprecated). Please use the /user/users API to invite users
     * 
     * @param body Details of the Invite to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ResponseDTOListInviteOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOListInviteOperationResponse sendInvite(CreateInvite body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        ApiResponse<ResponseDTOListInviteOperationResponse> resp = sendInviteWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier);
        return resp.getData();
    }

    /**
     * Send a user Invite to either Project or Organization (Deprecated). Please use the /user/users API to invite users
     * 
     * @param body Details of the Invite to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @return ApiResponse&lt;ResponseDTOListInviteOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOListInviteOperationResponse> sendInviteWithHttpInfo(CreateInvite body, String accountIdentifier, String orgIdentifier, String projectIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = sendInviteValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOListInviteOperationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send a user Invite to either Project or Organization (Deprecated). Please use the /user/users API to invite users (asynchronously)
     * 
     * @param body Details of the Invite to create (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param orgIdentifier Organization Identifier for the Entity (optional)
     * @param projectIdentifier Project Identifier for the Entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendInviteAsync(CreateInvite body, String accountIdentifier, String orgIdentifier, String projectIdentifier, final ApiCallback<ResponseDTOListInviteOperationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendInviteValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOListInviteOperationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInvite
     * @param body Details of the Updated Invite (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param inviteId Invite id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInviteCall(Invite body, String accountIdentifier, String inviteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ng/api/invites/{inviteId}"
            .replaceAll("\\{" + "inviteId" + "\\}", apiClient.escapeString(inviteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "text/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInviteValidateBeforeCall(Invite body, String accountIdentifier, String inviteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInvite(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateInvite(Async)");
        }
        // verify the required parameter 'inviteId' is set
        if (inviteId == null) {
            throw new ApiException("Missing the required parameter 'inviteId' when calling updateInvite(Async)");
        }
        
        com.squareup.okhttp.Call call = updateInviteCall(body, accountIdentifier, inviteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resend the Invite email
     * 
     * @param body Details of the Updated Invite (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param inviteId Invite id (required)
     * @return ResponseDTOOptionalInvite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOOptionalInvite updateInvite(Invite body, String accountIdentifier, String inviteId) throws ApiException {
        ApiResponse<ResponseDTOOptionalInvite> resp = updateInviteWithHttpInfo(body, accountIdentifier, inviteId);
        return resp.getData();
    }

    /**
     * Resend the Invite email
     * 
     * @param body Details of the Updated Invite (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param inviteId Invite id (required)
     * @return ApiResponse&lt;ResponseDTOOptionalInvite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOOptionalInvite> updateInviteWithHttpInfo(Invite body, String accountIdentifier, String inviteId) throws ApiException {
        com.squareup.okhttp.Call call = updateInviteValidateBeforeCall(body, accountIdentifier, inviteId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOOptionalInvite>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resend the Invite email (asynchronously)
     * 
     * @param body Details of the Updated Invite (required)
     * @param accountIdentifier Account Identifier for the Entity (required)
     * @param inviteId Invite id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInviteAsync(Invite body, String accountIdentifier, String inviteId, final ApiCallback<ResponseDTOOptionalInvite> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInviteValidateBeforeCall(body, accountIdentifier, inviteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOOptionalInvite>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
