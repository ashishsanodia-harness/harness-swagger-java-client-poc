/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTONGTriggerDetailsResponseDTO;
import io.swagger.client.model.ResponseDTONGTriggerResponse;
import io.swagger.client.model.ResponseDTOPageResponseNGTriggerDetailsResponseDTO;
import io.swagger.client.model.RestResponseString;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TriggersApi {
    private ApiClient apiClient;

    public TriggersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TriggersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTrigger
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTriggerCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/triggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTriggerValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTrigger(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling createTrigger(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling createTrigger(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling createTrigger(Async)");
        }
        // verify the required parameter 'targetIdentifier' is set
        if (targetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetIdentifier' when calling createTrigger(Async)");
        }
        
        com.squareup.okhttp.Call call = createTriggerCall(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates Trigger for triggering target pipeline identifier.
     * 
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline (required)
     * @return ResponseDTONGTriggerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTONGTriggerResponse createTrigger(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier) throws ApiException {
        ApiResponse<ResponseDTONGTriggerResponse> resp = createTriggerWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier);
        return resp.getData();
    }

    /**
     * Creates Trigger for triggering target pipeline identifier.
     * 
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline (required)
     * @return ApiResponse&lt;ResponseDTONGTriggerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTONGTriggerResponse> createTriggerWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = createTriggerValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTONGTriggerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Trigger for triggering target pipeline identifier. (asynchronously)
     * 
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTriggerAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, final ApiCallback<ResponseDTONGTriggerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTriggerValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTONGTriggerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTrigger
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides. (required)
     * @param triggerIdentifier  (required)
     * @param ifMatch  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTriggerCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/triggers/{triggerIdentifier}"
            .replaceAll("\\{" + "triggerIdentifier" + "\\}", apiClient.escapeString(triggerIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTriggerValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteTrigger(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling deleteTrigger(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling deleteTrigger(Async)");
        }
        // verify the required parameter 'targetIdentifier' is set
        if (targetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetIdentifier' when calling deleteTrigger(Async)");
        }
        // verify the required parameter 'triggerIdentifier' is set
        if (triggerIdentifier == null) {
            throw new ApiException("Missing the required parameter 'triggerIdentifier' when calling deleteTrigger(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTriggerCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes Trigger by identifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides. (required)
     * @param triggerIdentifier  (required)
     * @param ifMatch  (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deleteTrigger(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deleteTriggerWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch);
        return resp.getData();
    }

    /**
     * Deletes Trigger by identifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides. (required)
     * @param triggerIdentifier  (required)
     * @param ifMatch  (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deleteTriggerWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = deleteTriggerValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes Trigger by identifier. (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides. (required)
     * @param triggerIdentifier  (required)
     * @param ifMatch  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTriggerAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTriggerValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generateWebhookToken
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateWebhookTokenCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/triggers/regenerateToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateWebhookTokenValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = generateWebhookTokenCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generates random webhook token for new triggers.
     * 
     * @return RestResponseString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestResponseString generateWebhookToken() throws ApiException {
        ApiResponse<RestResponseString> resp = generateWebhookTokenWithHttpInfo();
        return resp.getData();
    }

    /**
     * Generates random webhook token for new triggers.
     * 
     * @return ApiResponse&lt;RestResponseString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestResponseString> generateWebhookTokenWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = generateWebhookTokenValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RestResponseString>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generates random webhook token for new triggers. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateWebhookTokenAsync(final ApiCallback<RestResponseString> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateWebhookTokenValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestResponseString>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListForTarget
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline (required)
     * @param filter  (optional)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 25)
     * @param sort  (optional)
     * @param searchTerm  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListForTargetCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String filter, Integer page, Integer size, List<String> sort, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/triggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListForTargetValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String filter, Integer page, Integer size, List<String> sort, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getListForTarget(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getListForTarget(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getListForTarget(Async)");
        }
        // verify the required parameter 'targetIdentifier' is set
        if (targetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetIdentifier' when calling getListForTarget(Async)");
        }
        
        com.squareup.okhttp.Call call = getListForTargetCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, filter, page, size, sort, searchTerm, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the paginated list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline (required)
     * @param filter  (optional)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 25)
     * @param sort  (optional)
     * @param searchTerm  (optional)
     * @return ResponseDTOPageResponseNGTriggerDetailsResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseNGTriggerDetailsResponseDTO getListForTarget(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String filter, Integer page, Integer size, List<String> sort, String searchTerm) throws ApiException {
        ApiResponse<ResponseDTOPageResponseNGTriggerDetailsResponseDTO> resp = getListForTargetWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, filter, page, size, sort, searchTerm);
        return resp.getData();
    }

    /**
     * Gets the paginated list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline (required)
     * @param filter  (optional)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 25)
     * @param sort  (optional)
     * @param searchTerm  (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseNGTriggerDetailsResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseNGTriggerDetailsResponseDTO> getListForTargetWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String filter, Integer page, Integer size, List<String> sort, String searchTerm) throws ApiException {
        com.squareup.okhttp.Call call = getListForTargetValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, filter, page, size, sort, searchTerm, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseNGTriggerDetailsResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the paginated list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier. (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline (required)
     * @param filter  (optional)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 25)
     * @param sort  (optional)
     * @param searchTerm  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListForTargetAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String filter, Integer page, Integer size, List<String> sort, String searchTerm, final ApiCallback<ResponseDTOPageResponseNGTriggerDetailsResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListForTargetValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, filter, page, size, sort, searchTerm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseNGTriggerDetailsResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrigger
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTriggerCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/triggers/{triggerIdentifier}"
            .replaceAll("\\{" + "triggerIdentifier" + "\\}", apiClient.escapeString(triggerIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTriggerValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getTrigger(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getTrigger(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getTrigger(Async)");
        }
        // verify the required parameter 'targetIdentifier' is set
        if (targetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetIdentifier' when calling getTrigger(Async)");
        }
        // verify the required parameter 'triggerIdentifier' is set
        if (triggerIdentifier == null) {
            throw new ApiException("Missing the required parameter 'triggerIdentifier' when calling getTrigger(Async)");
        }
        
        com.squareup.okhttp.Call call = getTriggerCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the trigger by accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier and triggerIdentifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @return ResponseDTONGTriggerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTONGTriggerResponse getTrigger(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier) throws ApiException {
        ApiResponse<ResponseDTONGTriggerResponse> resp = getTriggerWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier);
        return resp.getData();
    }

    /**
     * Gets the trigger by accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier and triggerIdentifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @return ApiResponse&lt;ResponseDTONGTriggerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTONGTriggerResponse> getTriggerWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTriggerValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTONGTriggerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the trigger by accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier and triggerIdentifier. (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTriggerAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, final ApiCallback<ResponseDTONGTriggerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTriggerValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTONGTriggerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTriggerDetails
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param triggerIdentifier Identifier of the target pipeline (required)
     * @param targetIdentifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTriggerDetailsCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String triggerIdentifier, String targetIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/triggers/{triggerIdentifier}/details"
            .replaceAll("\\{" + "triggerIdentifier" + "\\}", apiClient.escapeString(triggerIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTriggerDetailsValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String triggerIdentifier, String targetIdentifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getTriggerDetails(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getTriggerDetails(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getTriggerDetails(Async)");
        }
        // verify the required parameter 'triggerIdentifier' is set
        if (triggerIdentifier == null) {
            throw new ApiException("Missing the required parameter 'triggerIdentifier' when calling getTriggerDetails(Async)");
        }
        // verify the required parameter 'targetIdentifier' is set
        if (targetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetIdentifier' when calling getTriggerDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = getTriggerDetailsCall(accountIdentifier, orgIdentifier, projectIdentifier, triggerIdentifier, targetIdentifier, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param triggerIdentifier Identifier of the target pipeline (required)
     * @param targetIdentifier  (required)
     * @return ResponseDTONGTriggerDetailsResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTONGTriggerDetailsResponseDTO getTriggerDetails(String accountIdentifier, String orgIdentifier, String projectIdentifier, String triggerIdentifier, String targetIdentifier) throws ApiException {
        ApiResponse<ResponseDTONGTriggerDetailsResponseDTO> resp = getTriggerDetailsWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, triggerIdentifier, targetIdentifier);
        return resp.getData();
    }

    /**
     * Gets the list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param triggerIdentifier Identifier of the target pipeline (required)
     * @param targetIdentifier  (required)
     * @return ApiResponse&lt;ResponseDTONGTriggerDetailsResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTONGTriggerDetailsResponseDTO> getTriggerDetailsWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String triggerIdentifier, String targetIdentifier) throws ApiException {
        com.squareup.okhttp.Call call = getTriggerDetailsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, triggerIdentifier, targetIdentifier, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTONGTriggerDetailsResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of triggers for accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier. (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param triggerIdentifier Identifier of the target pipeline (required)
     * @param targetIdentifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTriggerDetailsAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String triggerIdentifier, String targetIdentifier, final ApiCallback<ResponseDTONGTriggerDetailsResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTriggerDetailsValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, triggerIdentifier, targetIdentifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTONGTriggerDetailsResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTrigger
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param ifMatch  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTriggerCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/triggers/{triggerIdentifier}"
            .replaceAll("\\{" + "triggerIdentifier" + "\\}", apiClient.escapeString(triggerIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTriggerValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTrigger(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateTrigger(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling updateTrigger(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling updateTrigger(Async)");
        }
        // verify the required parameter 'targetIdentifier' is set
        if (targetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetIdentifier' when calling updateTrigger(Async)");
        }
        // verify the required parameter 'triggerIdentifier' is set
        if (triggerIdentifier == null) {
            throw new ApiException("Missing the required parameter 'triggerIdentifier' when calling updateTrigger(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTriggerCall(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates trigger for pipeline with target pipeline identifier.
     * 
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param ifMatch  (optional)
     * @return ResponseDTONGTriggerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTONGTriggerResponse updateTrigger(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch) throws ApiException {
        ApiResponse<ResponseDTONGTriggerResponse> resp = updateTriggerWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch);
        return resp.getData();
    }

    /**
     * Updates trigger for pipeline with target pipeline identifier.
     * 
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param ifMatch  (optional)
     * @return ApiResponse&lt;ResponseDTONGTriggerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTONGTriggerResponse> updateTriggerWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = updateTriggerValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTONGTriggerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates trigger for pipeline with target pipeline identifier. (asynchronously)
     * 
     * @param body  (required)
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param ifMatch  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTriggerAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, String ifMatch, final ApiCallback<ResponseDTONGTriggerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTriggerValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, ifMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTONGTriggerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTriggerStatus
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param status  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTriggerStatusCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, Boolean status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/triggers/{triggerIdentifier}/status"
            .replaceAll("\\{" + "triggerIdentifier" + "\\}", apiClient.escapeString(triggerIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (targetIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetIdentifier", targetIdentifier));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTriggerStatusValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, Boolean status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling updateTriggerStatus(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling updateTriggerStatus(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling updateTriggerStatus(Async)");
        }
        // verify the required parameter 'targetIdentifier' is set
        if (targetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetIdentifier' when calling updateTriggerStatus(Async)");
        }
        // verify the required parameter 'triggerIdentifier' is set
        if (triggerIdentifier == null) {
            throw new ApiException("Missing the required parameter 'triggerIdentifier' when calling updateTriggerStatus(Async)");
        }
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateTriggerStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTriggerStatusCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Activates or deactivate trigger for pipeline with target pipeline identifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param status  (required)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean updateTriggerStatus(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, Boolean status) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = updateTriggerStatusWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, status);
        return resp.getData();
    }

    /**
     * Activates or deactivate trigger for pipeline with target pipeline identifier.
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param status  (required)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> updateTriggerStatusWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, Boolean status) throws ApiException {
        com.squareup.okhttp.Call call = updateTriggerStatusValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, status, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Activates or deactivate trigger for pipeline with target pipeline identifier. (asynchronously)
     * 
     * @param accountIdentifier  (required)
     * @param orgIdentifier  (required)
     * @param projectIdentifier  (required)
     * @param targetIdentifier Identifier of the target pipeline under which trigger resides (required)
     * @param triggerIdentifier  (required)
     * @param status  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTriggerStatusAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String targetIdentifier, String triggerIdentifier, Boolean status, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTriggerStatusValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, targetIdentifier, triggerIdentifier, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
