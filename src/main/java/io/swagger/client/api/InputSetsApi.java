/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Failure;
import io.swagger.client.model.InputSetTemplateRequest;
import io.swagger.client.model.MergeInputSetRequest;
import io.swagger.client.model.MergeInputSetTemplateRequest;
import io.swagger.client.model.ResponseDTOBoolean;
import io.swagger.client.model.ResponseDTOInputSetResponse;
import io.swagger.client.model.ResponseDTOInputSetTemplateWithReplacedExpressionsResponse;
import io.swagger.client.model.ResponseDTOMergeInputSetResponse;
import io.swagger.client.model.ResponseDTOOverlayInputSetResponse;
import io.swagger.client.model.ResponseDTOPageResponseInputSetSummaryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InputSetsApi {
    private ApiClient apiClient;

    public InputSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InputSetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteInputSet
     * @param inputSetIdentifier This is the Id of the Input Set that needs to be deleted. An error is thrown if no Input Set exists for this Id. (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the Input Set. Input Set will be deleted for the Pipeline corresponding to this Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInputSetCall(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/{inputSetIdentifier}"
            .replaceAll("\\{" + "inputSetIdentifier" + "\\}", apiClient.escapeString(inputSetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (lastObjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastObjectId", lastObjectId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInputSetValidateBeforeCall(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'inputSetIdentifier' is set
        if (inputSetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'inputSetIdentifier' when calling deleteInputSet(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling deleteInputSet(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling deleteInputSet(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling deleteInputSet(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling deleteInputSet(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteInputSetCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the Input Set by Identifier
     * 
     * @param inputSetIdentifier This is the Id of the Input Set that needs to be deleted. An error is thrown if no Input Set exists for this Id. (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the Input Set. Input Set will be deleted for the Pipeline corresponding to this Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @return ResponseDTOBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOBoolean deleteInputSet(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId) throws ApiException {
        ApiResponse<ResponseDTOBoolean> resp = deleteInputSetWithHttpInfo(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId);
        return resp.getData();
    }

    /**
     * Delete the Input Set by Identifier
     * 
     * @param inputSetIdentifier This is the Id of the Input Set that needs to be deleted. An error is thrown if no Input Set exists for this Id. (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the Input Set. Input Set will be deleted for the Pipeline corresponding to this Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @return ApiResponse&lt;ResponseDTOBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOBoolean> deleteInputSetWithHttpInfo(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInputSetValidateBeforeCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the Input Set by Identifier (asynchronously)
     * 
     * @param inputSetIdentifier This is the Id of the Input Set that needs to be deleted. An error is thrown if no Input Set exists for this Id. (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the Input Set. Input Set will be deleted for the Pipeline corresponding to this Identifier (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInputSetAsync(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, final ApiCallback<ResponseDTOBoolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInputSetValidateBeforeCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOBoolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInputSet
     * @param inputSetIdentifier Identifier of the Input Set (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline ID for the Input Set. The Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInputSetCall(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/{inputSetIdentifier}"
            .replaceAll("\\{" + "inputSetIdentifier" + "\\}", apiClient.escapeString(inputSetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInputSetValidateBeforeCall(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'inputSetIdentifier' is set
        if (inputSetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'inputSetIdentifier' when calling getInputSet(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getInputSet(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getInputSet(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getInputSet(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getInputSet(Async)");
        }
        
        com.squareup.okhttp.Call call = getInputSetCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets Input Set for a given identifier. Throws error if no Input Set exists for the given identifier.
     * 
     * @param inputSetIdentifier Identifier of the Input Set (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline ID for the Input Set. The Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOInputSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInputSetResponse getInputSet(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOInputSetResponse> resp = getInputSetWithHttpInfo(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Gets Input Set for a given identifier. Throws error if no Input Set exists for the given identifier.
     * 
     * @param inputSetIdentifier Identifier of the Input Set (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline ID for the Input Set. The Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOInputSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInputSetResponse> getInputSetWithHttpInfo(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getInputSetValidateBeforeCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Input Set for a given identifier. Throws error if no Input Set exists for the given identifier. (asynchronously)
     * 
     * @param inputSetIdentifier Identifier of the Input Set (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline ID for the Input Set. The Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInputSetAsync(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOInputSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInputSetValidateBeforeCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOverlayInputSet
     * @param inputSetIdentifier Identifier of the Overlay Input Set (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier This is the Pipeline Id specific to the Overlay Input Set. Overlay Input Set corresponding to the Pipeline with this Id would be fetched (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOverlayInputSetCall(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/overlay/{inputSetIdentifier}"
            .replaceAll("\\{" + "inputSetIdentifier" + "\\}", apiClient.escapeString(inputSetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOverlayInputSetValidateBeforeCall(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'inputSetIdentifier' is set
        if (inputSetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'inputSetIdentifier' when calling getOverlayInputSet(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getOverlayInputSet(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling getOverlayInputSet(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling getOverlayInputSet(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling getOverlayInputSet(Async)");
        }
        
        com.squareup.okhttp.Call call = getOverlayInputSetCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets an Overlay Input Set by identifier
     * 
     * @param inputSetIdentifier Identifier of the Overlay Input Set (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier This is the Pipeline Id specific to the Overlay Input Set. Overlay Input Set corresponding to the Pipeline with this Id would be fetched (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOOverlayInputSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOOverlayInputSetResponse getOverlayInputSet(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOOverlayInputSetResponse> resp = getOverlayInputSetWithHttpInfo(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Gets an Overlay Input Set by identifier
     * 
     * @param inputSetIdentifier Identifier of the Overlay Input Set (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier This is the Pipeline Id specific to the Overlay Input Set. Overlay Input Set corresponding to the Pipeline with this Id would be fetched (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOOverlayInputSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOOverlayInputSetResponse> getOverlayInputSetWithHttpInfo(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = getOverlayInputSetValidateBeforeCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOOverlayInputSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets an Overlay Input Set by identifier (asynchronously)
     * 
     * @param inputSetIdentifier Identifier of the Overlay Input Set (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier This is the Pipeline Id specific to the Overlay Input Set. Overlay Input Set corresponding to the Pipeline with this Id would be fetched (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOverlayInputSetAsync(String inputSetIdentifier, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOOverlayInputSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOverlayInputSetValidateBeforeCall(inputSetIdentifier, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOOverlayInputSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listInputSet
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for which we need the Input Sets list. (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 100)
     * @param inputSetType Type of Input Set needed: \&quot;INPUT_SET\&quot;, or \&quot;OVERLAY_INPUT_SET\&quot;, or \&quot;ALL\&quot;. If nothing is sent, ALL is considered. (optional, default to ALL)
     * @param searchTerm Search term to filter out Input Sets based on name, identifier, tags. (optional)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listInputSetCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, Integer pageIndex, Integer pageSize, String inputSetType, String searchTerm, List<String> sortOrders, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (inputSetType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputSetType", inputSetType));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        if (sortOrders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortOrders", sortOrders));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listInputSetValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, Integer pageIndex, Integer pageSize, String inputSetType, String searchTerm, List<String> sortOrders, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling listInputSet(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling listInputSet(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling listInputSet(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling listInputSet(Async)");
        }
        
        com.squareup.okhttp.Call call = listInputSetCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pageIndex, pageSize, inputSetType, searchTerm, sortOrders, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all Input Sets for a pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for which we need the Input Sets list. (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 100)
     * @param inputSetType Type of Input Set needed: \&quot;INPUT_SET\&quot;, or \&quot;OVERLAY_INPUT_SET\&quot;, or \&quot;ALL\&quot;. If nothing is sent, ALL is considered. (optional, default to ALL)
     * @param searchTerm Search term to filter out Input Sets based on name, identifier, tags. (optional)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOPageResponseInputSetSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOPageResponseInputSetSummaryResponse listInputSet(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, Integer pageIndex, Integer pageSize, String inputSetType, String searchTerm, List<String> sortOrders, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOPageResponseInputSetSummaryResponse> resp = listInputSetWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pageIndex, pageSize, inputSetType, searchTerm, sortOrders, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * List all Input Sets for a pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for which we need the Input Sets list. (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 100)
     * @param inputSetType Type of Input Set needed: \&quot;INPUT_SET\&quot;, or \&quot;OVERLAY_INPUT_SET\&quot;, or \&quot;ALL\&quot;. If nothing is sent, ALL is considered. (optional, default to ALL)
     * @param searchTerm Search term to filter out Input Sets based on name, identifier, tags. (optional)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOPageResponseInputSetSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOPageResponseInputSetSummaryResponse> listInputSetWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, Integer pageIndex, Integer pageSize, String inputSetType, String searchTerm, List<String> sortOrders, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = listInputSetValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pageIndex, pageSize, inputSetType, searchTerm, sortOrders, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseInputSetSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Input Sets for a pipeline (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for which we need the Input Sets list. (required)
     * @param pageIndex Indicates the number of pages. Results for these pages will be retrieved. (optional, default to 0)
     * @param pageSize The number of the elements to fetch (optional, default to 100)
     * @param inputSetType Type of Input Set needed: \&quot;INPUT_SET\&quot;, or \&quot;OVERLAY_INPUT_SET\&quot;, or \&quot;ALL\&quot;. If nothing is sent, ALL is considered. (optional, default to ALL)
     * @param searchTerm Search term to filter out Input Sets based on name, identifier, tags. (optional)
     * @param sortOrders Sort criteria for the elements. (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInputSetAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, Integer pageIndex, Integer pageSize, String inputSetType, String searchTerm, List<String> sortOrders, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOPageResponseInputSetSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInputSetValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pageIndex, pageSize, inputSetType, searchTerm, sortOrders, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOPageResponseInputSetSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mergeInputSets
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Identifier of the Pipeline to which the Input Sets belong (required)
     * @param pipelineBranch Github branch of the Pipeline to which the Input Sets belong (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline to which the Input Sets belong (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeInputSetsCall(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/merge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (pipelineBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineBranch", pipelineBranch));
        if (pipelineRepoID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineRepoID", pipelineRepoID));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mergeInputSetsValidateBeforeCall(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mergeInputSets(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling mergeInputSets(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling mergeInputSets(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling mergeInputSets(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling mergeInputSets(Async)");
        }
        
        com.squareup.okhttp.Call call = mergeInputSetsCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merge given Input Sets into a single Runtime Input YAML
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Identifier of the Pipeline to which the Input Sets belong (required)
     * @param pipelineBranch Github branch of the Pipeline to which the Input Sets belong (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline to which the Input Sets belong (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOMergeInputSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOMergeInputSetResponse mergeInputSets(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOMergeInputSetResponse> resp = mergeInputSetsWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Merge given Input Sets into a single Runtime Input YAML
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Identifier of the Pipeline to which the Input Sets belong (required)
     * @param pipelineBranch Github branch of the Pipeline to which the Input Sets belong (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline to which the Input Sets belong (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOMergeInputSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOMergeInputSetResponse> mergeInputSetsWithHttpInfo(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = mergeInputSetsValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOMergeInputSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge given Input Sets into a single Runtime Input YAML (asynchronously)
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Identifier of the Pipeline to which the Input Sets belong (required)
     * @param pipelineBranch Github branch of the Pipeline to which the Input Sets belong (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline to which the Input Sets belong (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeInputSetsAsync(MergeInputSetRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOMergeInputSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeInputSetsValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOMergeInputSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mergeRuntimeInputIntoPipeline
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Identifier of the Pipeline to which the Input Sets belong (required)
     * @param pipelineBranch Github branch of the Pipeline to which the Input Sets belong (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline to which the Input Sets belong (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeRuntimeInputIntoPipelineCall(MergeInputSetTemplateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/mergeWithTemplateYaml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (pipelineBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineBranch", pipelineBranch));
        if (pipelineRepoID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineRepoID", pipelineRepoID));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mergeRuntimeInputIntoPipelineValidateBeforeCall(MergeInputSetTemplateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mergeRuntimeInputIntoPipeline(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling mergeRuntimeInputIntoPipeline(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling mergeRuntimeInputIntoPipeline(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling mergeRuntimeInputIntoPipeline(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling mergeRuntimeInputIntoPipeline(Async)");
        }
        
        com.squareup.okhttp.Call call = mergeRuntimeInputIntoPipelineCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merge given Runtime Input YAML into the Pipeline
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Identifier of the Pipeline to which the Input Sets belong (required)
     * @param pipelineBranch Github branch of the Pipeline to which the Input Sets belong (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline to which the Input Sets belong (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOMergeInputSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOMergeInputSetResponse mergeRuntimeInputIntoPipeline(MergeInputSetTemplateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOMergeInputSetResponse> resp = mergeRuntimeInputIntoPipelineWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Merge given Runtime Input YAML into the Pipeline
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Identifier of the Pipeline to which the Input Sets belong (required)
     * @param pipelineBranch Github branch of the Pipeline to which the Input Sets belong (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline to which the Input Sets belong (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOMergeInputSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOMergeInputSetResponse> mergeRuntimeInputIntoPipelineWithHttpInfo(MergeInputSetTemplateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = mergeRuntimeInputIntoPipelineValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOMergeInputSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge given Runtime Input YAML into the Pipeline (asynchronously)
     * 
     * @param body  (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Identifier of the Pipeline to which the Input Sets belong (required)
     * @param pipelineBranch Github branch of the Pipeline to which the Input Sets belong (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline to which the Input Sets belong (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeRuntimeInputIntoPipelineAsync(MergeInputSetTemplateRequest body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOMergeInputSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeRuntimeInputIntoPipelineValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOMergeInputSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInputSet
     * @param body Input set YAML to be created. The account, org, project, and pipeline identifiers inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the input set. The input set will work only for the pipeline corresponding to this identifier. (required)
     * @param pipelineBranch Github branch of the Pipeline for which the Input Set is to be created (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline for which the Input Set is to be created (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInputSetCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (pipelineBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineBranch", pipelineBranch));
        if (pipelineRepoID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineRepoID", pipelineRepoID));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (isNewBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isNewBranch", isNewBranch));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInputSetValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postInputSet(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postInputSet(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postInputSet(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postInputSet(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling postInputSet(Async)");
        }
        
        com.squareup.okhttp.Call call = postInputSetCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an Input Set for a Pipeline
     * 
     * @param body Input set YAML to be created. The account, org, project, and pipeline identifiers inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the input set. The input set will work only for the pipeline corresponding to this identifier. (required)
     * @param pipelineBranch Github branch of the Pipeline for which the Input Set is to be created (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline for which the Input Set is to be created (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOInputSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInputSetResponse postInputSet(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOInputSetResponse> resp = postInputSetWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch);
        return resp.getData();
    }

    /**
     * Create an Input Set for a Pipeline
     * 
     * @param body Input set YAML to be created. The account, org, project, and pipeline identifiers inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the input set. The input set will work only for the pipeline corresponding to this identifier. (required)
     * @param pipelineBranch Github branch of the Pipeline for which the Input Set is to be created (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline for which the Input Set is to be created (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOInputSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInputSetResponse> postInputSetWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = postInputSetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Input Set for a Pipeline (asynchronously)
     * 
     * @param body Input set YAML to be created. The account, org, project, and pipeline identifiers inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the input set. The input set will work only for the pipeline corresponding to this identifier. (required)
     * @param pipelineBranch Github branch of the Pipeline for which the Input Set is to be created (optional)
     * @param pipelineRepoID Github Repo identifier of the Pipeline for which the Input Set is to be created (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInputSetAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ApiCallback<ResponseDTOInputSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInputSetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, pipelineBranch, pipelineRepoID, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOverlayInputSet
     * @param body Overlay Input Set YAML to be created. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the overlay input set. The Overlay Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOverlayInputSetCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/overlay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (isNewBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isNewBranch", isNewBranch));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOverlayInputSetValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOverlayInputSet(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling postOverlayInputSet(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling postOverlayInputSet(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling postOverlayInputSet(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling postOverlayInputSet(Async)");
        }
        
        com.squareup.okhttp.Call call = postOverlayInputSetCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an Overlay Input Set for a pipeline
     * 
     * @param body Overlay Input Set YAML to be created. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the overlay input set. The Overlay Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOOverlayInputSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOOverlayInputSetResponse postOverlayInputSet(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOOverlayInputSetResponse> resp = postOverlayInputSetWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch);
        return resp.getData();
    }

    /**
     * Create an Overlay Input Set for a pipeline
     * 
     * @param body Overlay Input Set YAML to be created. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the overlay input set. The Overlay Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOOverlayInputSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOOverlayInputSetResponse> postOverlayInputSetWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = postOverlayInputSetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOOverlayInputSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Overlay Input Set for a pipeline (asynchronously)
     * 
     * @param body Overlay Input Set YAML to be created. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the overlay input set. The Overlay Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath File Path of the Entity (optional)
     * @param commitMsg File Path of the Entity (optional)
     * @param isNewBranch Checks the new branch (optional, default to false)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOverlayInputSetAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, Boolean isNewBranch, String baseBranch, final ApiCallback<ResponseDTOOverlayInputSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOverlayInputSetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, branch, repoIdentifier, rootFolder, filePath, commitMsg, isNewBranch, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOOverlayInputSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putInputSet
     * @param body Input set YAML to be updated. The Account, Org, Project, and Pipeline Ids inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Id for the Input Set. The Input Set will work only for the Pipeline corresponding to this Id. (required)
     * @param inputSetIdentifier Identifier for the Input Set that needs to be updated. An Input Set corresponding to this identifier should already exist. (required)
     * @param ifMatch Version of entity to match (optional)
     * @param pipelineBranch Github branch of the Pipeline for which the Input Set is to be created (optional)
     * @param pipelineRepoID Github Repo Id of the Pipeline for which the Input Set is to be created (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putInputSetCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/{inputSetIdentifier}"
            .replaceAll("\\{" + "inputSetIdentifier" + "\\}", apiClient.escapeString(inputSetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (pipelineBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineBranch", pipelineBranch));
        if (pipelineRepoID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineRepoID", pipelineRepoID));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (lastObjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastObjectId", lastObjectId));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putInputSetValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putInputSet(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling putInputSet(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling putInputSet(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling putInputSet(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling putInputSet(Async)");
        }
        // verify the required parameter 'inputSetIdentifier' is set
        if (inputSetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'inputSetIdentifier' when calling putInputSet(Async)");
        }
        
        com.squareup.okhttp.Call call = putInputSetCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, inputSetIdentifier, ifMatch, pipelineBranch, pipelineRepoID, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Input Set for Pipeline
     * 
     * @param body Input set YAML to be updated. The Account, Org, Project, and Pipeline Ids inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Id for the Input Set. The Input Set will work only for the Pipeline corresponding to this Id. (required)
     * @param inputSetIdentifier Identifier for the Input Set that needs to be updated. An Input Set corresponding to this identifier should already exist. (required)
     * @param ifMatch Version of entity to match (optional)
     * @param pipelineBranch Github branch of the Pipeline for which the Input Set is to be created (optional)
     * @param pipelineRepoID Github Repo Id of the Pipeline for which the Input Set is to be created (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOInputSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInputSetResponse putInputSet(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOInputSetResponse> resp = putInputSetWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, inputSetIdentifier, ifMatch, pipelineBranch, pipelineRepoID, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch);
        return resp.getData();
    }

    /**
     * Update Input Set for Pipeline
     * 
     * @param body Input set YAML to be updated. The Account, Org, Project, and Pipeline Ids inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Id for the Input Set. The Input Set will work only for the Pipeline corresponding to this Id. (required)
     * @param inputSetIdentifier Identifier for the Input Set that needs to be updated. An Input Set corresponding to this identifier should already exist. (required)
     * @param ifMatch Version of entity to match (optional)
     * @param pipelineBranch Github branch of the Pipeline for which the Input Set is to be created (optional)
     * @param pipelineRepoID Github Repo Id of the Pipeline for which the Input Set is to be created (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOInputSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInputSetResponse> putInputSetWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = putInputSetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, inputSetIdentifier, ifMatch, pipelineBranch, pipelineRepoID, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Input Set for Pipeline (asynchronously)
     * 
     * @param body Input set YAML to be updated. The Account, Org, Project, and Pipeline Ids inside the YAML should match the query parameters (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline Id for the Input Set. The Input Set will work only for the Pipeline corresponding to this Id. (required)
     * @param inputSetIdentifier Identifier for the Input Set that needs to be updated. An Input Set corresponding to this identifier should already exist. (required)
     * @param ifMatch Version of entity to match (optional)
     * @param pipelineBranch Github branch of the Pipeline for which the Input Set is to be created (optional)
     * @param pipelineRepoID Github Repo Id of the Pipeline for which the Input Set is to be created (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putInputSetAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String pipelineBranch, String pipelineRepoID, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ApiCallback<ResponseDTOInputSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putInputSetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, inputSetIdentifier, ifMatch, pipelineBranch, pipelineRepoID, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putOverlayInputSet
     * @param body Overlay Input Set YAML to be updated. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters, and the Overlay Input Set identifier cannot be changed. (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the Overlay Input Set. The Overlay Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param inputSetIdentifier Identifier for the Overlay Input Set that needs to be updated. An Overlay Input Set corresponding to this identifier should already exist. (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putOverlayInputSetCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/overlay/{inputSetIdentifier}"
            .replaceAll("\\{" + "inputSetIdentifier" + "\\}", apiClient.escapeString(inputSetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (rootFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFolder", rootFolder));
        if (filePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filePath", filePath));
        if (commitMsg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("commitMsg", commitMsg));
        if (lastObjectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastObjectId", lastObjectId));
        if (baseBranch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("baseBranch", baseBranch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putOverlayInputSetValidateBeforeCall(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOverlayInputSet(Async)");
        }
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling putOverlayInputSet(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling putOverlayInputSet(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling putOverlayInputSet(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling putOverlayInputSet(Async)");
        }
        // verify the required parameter 'inputSetIdentifier' is set
        if (inputSetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'inputSetIdentifier' when calling putOverlayInputSet(Async)");
        }
        
        com.squareup.okhttp.Call call = putOverlayInputSetCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, inputSetIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an Overlay Input Set for a pipeline
     * 
     * @param body Overlay Input Set YAML to be updated. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters, and the Overlay Input Set identifier cannot be changed. (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the Overlay Input Set. The Overlay Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param inputSetIdentifier Identifier for the Overlay Input Set that needs to be updated. An Overlay Input Set corresponding to this identifier should already exist. (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ResponseDTOOverlayInputSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOOverlayInputSetResponse putOverlayInputSet(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        ApiResponse<ResponseDTOOverlayInputSetResponse> resp = putOverlayInputSetWithHttpInfo(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, inputSetIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch);
        return resp.getData();
    }

    /**
     * Update an Overlay Input Set for a pipeline
     * 
     * @param body Overlay Input Set YAML to be updated. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters, and the Overlay Input Set identifier cannot be changed. (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the Overlay Input Set. The Overlay Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param inputSetIdentifier Identifier for the Overlay Input Set that needs to be updated. An Overlay Input Set corresponding to this identifier should already exist. (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @return ApiResponse&lt;ResponseDTOOverlayInputSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOOverlayInputSetResponse> putOverlayInputSetWithHttpInfo(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch) throws ApiException {
        com.squareup.okhttp.Call call = putOverlayInputSetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, inputSetIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOOverlayInputSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an Overlay Input Set for a pipeline (asynchronously)
     * 
     * @param body Overlay Input Set YAML to be updated. The Account, Org, Project, and Pipeline identifiers inside the YAML should match the query parameters, and the Overlay Input Set identifier cannot be changed. (required)
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for the Overlay Input Set. The Overlay Input Set will work only for the Pipeline corresponding to this identifier. (required)
     * @param inputSetIdentifier Identifier for the Overlay Input Set that needs to be updated. An Overlay Input Set corresponding to this identifier should already exist. (required)
     * @param ifMatch Version of entity to match (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param rootFolder Root Folder Path of the Entity (optional)
     * @param filePath Root Folder Path of the Entity (optional)
     * @param commitMsg Commit Message (optional)
     * @param lastObjectId Last Object Id (optional)
     * @param baseBranch Default Branch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putOverlayInputSetAsync(String body, String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, String inputSetIdentifier, String ifMatch, String branch, String repoIdentifier, String rootFolder, String filePath, String commitMsg, String lastObjectId, String baseBranch, final ApiCallback<ResponseDTOOverlayInputSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putOverlayInputSetValidateBeforeCall(body, accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, inputSetIdentifier, ifMatch, branch, repoIdentifier, rootFolder, filePath, commitMsg, lastObjectId, baseBranch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOOverlayInputSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runtimeInputTemplate
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for which we need the Runtime Input Template. (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runtimeInputTemplateCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, InputSetTemplateRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pipeline/api/inputSets/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accountIdentifier", accountIdentifier));
        if (orgIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgIdentifier", orgIdentifier));
        if (projectIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectIdentifier", projectIdentifier));
        if (pipelineIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pipelineIdentifier", pipelineIdentifier));
        if (branch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (repoIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repoIdentifier", repoIdentifier));
        if (getDefaultFromOtherRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getDefaultFromOtherRepo", getDefaultFromOtherRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runtimeInputTemplateValidateBeforeCall(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, InputSetTemplateRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountIdentifier' is set
        if (accountIdentifier == null) {
            throw new ApiException("Missing the required parameter 'accountIdentifier' when calling runtimeInputTemplate(Async)");
        }
        // verify the required parameter 'orgIdentifier' is set
        if (orgIdentifier == null) {
            throw new ApiException("Missing the required parameter 'orgIdentifier' when calling runtimeInputTemplate(Async)");
        }
        // verify the required parameter 'projectIdentifier' is set
        if (projectIdentifier == null) {
            throw new ApiException("Missing the required parameter 'projectIdentifier' when calling runtimeInputTemplate(Async)");
        }
        // verify the required parameter 'pipelineIdentifier' is set
        if (pipelineIdentifier == null) {
            throw new ApiException("Missing the required parameter 'pipelineIdentifier' when calling runtimeInputTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = runtimeInputTemplateCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch Runtime Input Template for a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for which we need the Runtime Input Template. (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ResponseDTOInputSetTemplateWithReplacedExpressionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseDTOInputSetTemplateWithReplacedExpressionsResponse runtimeInputTemplate(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, InputSetTemplateRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        ApiResponse<ResponseDTOInputSetTemplateWithReplacedExpressionsResponse> resp = runtimeInputTemplateWithHttpInfo(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, body, branch, repoIdentifier, getDefaultFromOtherRepo);
        return resp.getData();
    }

    /**
     * Fetch Runtime Input Template for a Pipeline
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for which we need the Runtime Input Template. (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @return ApiResponse&lt;ResponseDTOInputSetTemplateWithReplacedExpressionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseDTOInputSetTemplateWithReplacedExpressionsResponse> runtimeInputTemplateWithHttpInfo(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, InputSetTemplateRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo) throws ApiException {
        com.squareup.okhttp.Call call = runtimeInputTemplateValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, null, null);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetTemplateWithReplacedExpressionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch Runtime Input Template for a Pipeline (asynchronously)
     * 
     * @param accountIdentifier Account Identifier for the entity. (required)
     * @param orgIdentifier Organization Identifier for the entity. (required)
     * @param projectIdentifier Project Identifier for the entity. (required)
     * @param pipelineIdentifier Pipeline identifier for which we need the Runtime Input Template. (required)
     * @param body  (optional)
     * @param branch Branch Name (optional)
     * @param repoIdentifier Git Sync Config Id (optional)
     * @param getDefaultFromOtherRepo if true, return all the default entities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runtimeInputTemplateAsync(String accountIdentifier, String orgIdentifier, String projectIdentifier, String pipelineIdentifier, InputSetTemplateRequest body, String branch, String repoIdentifier, Boolean getDefaultFromOtherRepo, final ApiCallback<ResponseDTOInputSetTemplateWithReplacedExpressionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runtimeInputTemplateValidateBeforeCall(accountIdentifier, orgIdentifier, projectIdentifier, pipelineIdentifier, body, branch, repoIdentifier, getDefaultFromOtherRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseDTOInputSetTemplateWithReplacedExpressionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
