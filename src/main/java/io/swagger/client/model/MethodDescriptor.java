/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.FileDescriptor;
import io.swagger.client.model.MethodDescriptorProto;
import io.swagger.client.model.MethodOptions;
import io.swagger.client.model.ServiceDescriptor;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * MethodDescriptor
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class MethodDescriptor {
  @SerializedName("index")
  private Integer index = null;

  @SerializedName("proto")
  private MethodDescriptorProto proto = null;

  @SerializedName("fullName")
  private String fullName = null;

  @SerializedName("file")
  private FileDescriptor file = null;

  @SerializedName("service")
  private ServiceDescriptor service = null;

  @SerializedName("inputType")
  private Descriptor inputType = null;

  @SerializedName("outputType")
  private Descriptor outputType = null;

  @SerializedName("options")
  private MethodOptions options = null;

  @SerializedName("serverStreaming")
  private Boolean serverStreaming = null;

  @SerializedName("clientStreaming")
  private Boolean clientStreaming = null;

  @SerializedName("name")
  private String name = null;

  public MethodDescriptor index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @Schema(description = "")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public MethodDescriptor proto(MethodDescriptorProto proto) {
    this.proto = proto;
    return this;
  }

   /**
   * Get proto
   * @return proto
  **/
  @Schema(description = "")
  public MethodDescriptorProto getProto() {
    return proto;
  }

  public void setProto(MethodDescriptorProto proto) {
    this.proto = proto;
  }

  public MethodDescriptor fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @Schema(description = "")
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  public MethodDescriptor file(FileDescriptor file) {
    this.file = file;
    return this;
  }

   /**
   * Get file
   * @return file
  **/
  @Schema(description = "")
  public FileDescriptor getFile() {
    return file;
  }

  public void setFile(FileDescriptor file) {
    this.file = file;
  }

  public MethodDescriptor service(ServiceDescriptor service) {
    this.service = service;
    return this;
  }

   /**
   * Get service
   * @return service
  **/
  @Schema(description = "")
  public ServiceDescriptor getService() {
    return service;
  }

  public void setService(ServiceDescriptor service) {
    this.service = service;
  }

  public MethodDescriptor inputType(Descriptor inputType) {
    this.inputType = inputType;
    return this;
  }

   /**
   * Get inputType
   * @return inputType
  **/
  @Schema(description = "")
  public Descriptor getInputType() {
    return inputType;
  }

  public void setInputType(Descriptor inputType) {
    this.inputType = inputType;
  }

  public MethodDescriptor outputType(Descriptor outputType) {
    this.outputType = outputType;
    return this;
  }

   /**
   * Get outputType
   * @return outputType
  **/
  @Schema(description = "")
  public Descriptor getOutputType() {
    return outputType;
  }

  public void setOutputType(Descriptor outputType) {
    this.outputType = outputType;
  }

  public MethodDescriptor options(MethodOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public MethodOptions getOptions() {
    return options;
  }

  public void setOptions(MethodOptions options) {
    this.options = options;
  }

  public MethodDescriptor serverStreaming(Boolean serverStreaming) {
    this.serverStreaming = serverStreaming;
    return this;
  }

   /**
   * Get serverStreaming
   * @return serverStreaming
  **/
  @Schema(description = "")
  public Boolean isServerStreaming() {
    return serverStreaming;
  }

  public void setServerStreaming(Boolean serverStreaming) {
    this.serverStreaming = serverStreaming;
  }

  public MethodDescriptor clientStreaming(Boolean clientStreaming) {
    this.clientStreaming = clientStreaming;
    return this;
  }

   /**
   * Get clientStreaming
   * @return clientStreaming
  **/
  @Schema(description = "")
  public Boolean isClientStreaming() {
    return clientStreaming;
  }

  public void setClientStreaming(Boolean clientStreaming) {
    this.clientStreaming = clientStreaming;
  }

  public MethodDescriptor name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MethodDescriptor methodDescriptor = (MethodDescriptor) o;
    return Objects.equals(this.index, methodDescriptor.index) &&
        Objects.equals(this.proto, methodDescriptor.proto) &&
        Objects.equals(this.fullName, methodDescriptor.fullName) &&
        Objects.equals(this.file, methodDescriptor.file) &&
        Objects.equals(this.service, methodDescriptor.service) &&
        Objects.equals(this.inputType, methodDescriptor.inputType) &&
        Objects.equals(this.outputType, methodDescriptor.outputType) &&
        Objects.equals(this.options, methodDescriptor.options) &&
        Objects.equals(this.serverStreaming, methodDescriptor.serverStreaming) &&
        Objects.equals(this.clientStreaming, methodDescriptor.clientStreaming) &&
        Objects.equals(this.name, methodDescriptor.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, proto, fullName, file, service, inputType, outputType, options, serverStreaming, clientStreaming, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MethodDescriptor {\n");
    
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    proto: ").append(toIndentedString(proto)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    inputType: ").append(toIndentedString(inputType)).append("\n");
    sb.append("    outputType: ").append(toIndentedString(outputType)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    serverStreaming: ").append(toIndentedString(serverStreaming)).append("\n");
    sb.append("    clientStreaming: ").append(toIndentedString(clientStreaming)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
