/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This result object shows details of how many times a variation has been evaluated
 */
@Schema(description = "This result object shows details of how many times a variation has been evaluated")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class Results {
  @SerializedName("count")
  private Integer count = null;

  @SerializedName("variationIdentifier")
  private String variationIdentifier = null;

  @SerializedName("variationName")
  private String variationName = null;

  public Results count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * The number of times this variation has been returned in a evaluation
   * @return count
  **/
  @Schema(required = true, description = "The number of times this variation has been returned in a evaluation")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public Results variationIdentifier(String variationIdentifier) {
    this.variationIdentifier = variationIdentifier;
    return this;
  }

   /**
   * The unique variation identifier
   * @return variationIdentifier
  **/
  @Schema(example = "defaultOnVariation", required = true, description = "The unique variation identifier")
  public String getVariationIdentifier() {
    return variationIdentifier;
  }

  public void setVariationIdentifier(String variationIdentifier) {
    this.variationIdentifier = variationIdentifier;
  }

  public Results variationName(String variationName) {
    this.variationName = variationName;
    return this;
  }

   /**
   * The user friendly variation name
   * @return variationName
  **/
  @Schema(example = "Default On Variation", required = true, description = "The user friendly variation name")
  public String getVariationName() {
    return variationName;
  }

  public void setVariationName(String variationName) {
    this.variationName = variationName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Results results = (Results) o;
    return Objects.equals(this.count, results.count) &&
        Objects.equals(this.variationIdentifier, results.variationIdentifier) &&
        Objects.equals(this.variationName, results.variationName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, variationIdentifier, variationName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Results {\n");
    
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    variationIdentifier: ").append(toIndentedString(variationIdentifier)).append("\n");
    sb.append("    variationName: ").append(toIndentedString(variationName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
