/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A clause describes what conditions are used to evaluate a flag
 */
@Schema(description = "A clause describes what conditions are used to evaluate a flag")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class Clause {
  @SerializedName("attribute")
  private String attribute = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("negate")
  private Boolean negate = null;

  @SerializedName("op")
  private String op = null;

  @SerializedName("values")
  private List<String> values = new ArrayList<String>();

  public Clause attribute(String attribute) {
    this.attribute = attribute;
    return this;
  }

   /**
   * The attribute to use in the clause.  This can be any target attribute
   * @return attribute
  **/
  @Schema(example = "identifier", required = true, description = "The attribute to use in the clause.  This can be any target attribute")
  public String getAttribute() {
    return attribute;
  }

  public void setAttribute(String attribute) {
    this.attribute = attribute;
  }

  public Clause id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique ID for the clause
   * @return id
  **/
  @Schema(example = "32434243", required = true, description = "The unique ID for the clause")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Clause negate(Boolean negate) {
    this.negate = negate;
    return this;
  }

   /**
   * Is the operation negated?
   * @return negate
  **/
  @Schema(example = "false", required = true, description = "Is the operation negated?")
  public Boolean isNegate() {
    return negate;
  }

  public void setNegate(Boolean negate) {
    this.negate = negate;
  }

  public Clause op(String op) {
    this.op = op;
    return this;
  }

   /**
   * The type of operation such as equals, starts_with, contains
   * @return op
  **/
  @Schema(example = "starts_with", required = true, description = "The type of operation such as equals, starts_with, contains")
  public String getOp() {
    return op;
  }

  public void setOp(String op) {
    this.op = op;
  }

  public Clause values(List<String> values) {
    this.values = values;
    return this;
  }

  public Clause addValuesItem(String valuesItem) {
    this.values.add(valuesItem);
    return this;
  }

   /**
   * The values that are compared against the operator
   * @return values
  **/
  @Schema(required = true, description = "The values that are compared against the operator")
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Clause clause = (Clause) o;
    return Objects.equals(this.attribute, clause.attribute) &&
        Objects.equals(this.id, clause.id) &&
        Objects.equals(this.negate, clause.negate) &&
        Objects.equals(this.op, clause.op) &&
        Objects.equals(this.values, clause.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, id, negate, op, values);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Clause {\n");
    
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
