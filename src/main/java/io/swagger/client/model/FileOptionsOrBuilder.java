/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.Message;
import io.swagger.client.model.UninterpretedOption;
import io.swagger.client.model.UninterpretedOptionOrBuilder;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * FileOptionsOrBuilder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class FileOptionsOrBuilder {
  @SerializedName("javaPackage")
  private String javaPackage = null;

  @SerializedName("javaStringCheckUtf8")
  private Boolean javaStringCheckUtf8 = null;

  @SerializedName("javaPackageBytes")
  private ByteString javaPackageBytes = null;

  @SerializedName("javaOuterClassname")
  private String javaOuterClassname = null;

  @SerializedName("javaOuterClassnameBytes")
  private ByteString javaOuterClassnameBytes = null;

  @SerializedName("javaMultipleFiles")
  private Boolean javaMultipleFiles = null;

  @SerializedName("javaGenerateEqualsAndHash")
  private Boolean javaGenerateEqualsAndHash = null;

  /**
   * Gets or Sets optimizeFor
   */
  @JsonAdapter(OptimizeForEnum.Adapter.class)
  public enum OptimizeForEnum {
    SPEED("SPEED"),
    CODE_SIZE("CODE_SIZE"),
    LITE_RUNTIME("LITE_RUNTIME");

    private String value;

    OptimizeForEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OptimizeForEnum fromValue(String input) {
      for (OptimizeForEnum b : OptimizeForEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OptimizeForEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptimizeForEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OptimizeForEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OptimizeForEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("optimizeFor")
  private OptimizeForEnum optimizeFor = null;

  @SerializedName("goPackage")
  private String goPackage = null;

  @SerializedName("goPackageBytes")
  private ByteString goPackageBytes = null;

  @SerializedName("ccGenericServices")
  private Boolean ccGenericServices = null;

  @SerializedName("javaGenericServices")
  private Boolean javaGenericServices = null;

  @SerializedName("pyGenericServices")
  private Boolean pyGenericServices = null;

  @SerializedName("phpGenericServices")
  private Boolean phpGenericServices = null;

  @SerializedName("deprecated")
  private Boolean deprecated = null;

  @SerializedName("ccEnableArenas")
  private Boolean ccEnableArenas = null;

  @SerializedName("objcClassPrefix")
  private String objcClassPrefix = null;

  @SerializedName("objcClassPrefixBytes")
  private ByteString objcClassPrefixBytes = null;

  @SerializedName("csharpNamespace")
  private String csharpNamespace = null;

  @SerializedName("csharpNamespaceBytes")
  private ByteString csharpNamespaceBytes = null;

  @SerializedName("swiftPrefix")
  private String swiftPrefix = null;

  @SerializedName("swiftPrefixBytes")
  private ByteString swiftPrefixBytes = null;

  @SerializedName("phpClassPrefix")
  private String phpClassPrefix = null;

  @SerializedName("phpClassPrefixBytes")
  private ByteString phpClassPrefixBytes = null;

  @SerializedName("phpNamespace")
  private String phpNamespace = null;

  @SerializedName("phpNamespaceBytes")
  private ByteString phpNamespaceBytes = null;

  @SerializedName("phpMetadataNamespace")
  private String phpMetadataNamespace = null;

  @SerializedName("phpMetadataNamespaceBytes")
  private ByteString phpMetadataNamespaceBytes = null;

  @SerializedName("rubyPackage")
  private String rubyPackage = null;

  @SerializedName("rubyPackageBytes")
  private ByteString rubyPackageBytes = null;

  @SerializedName("uninterpretedOptionList")
  private List<UninterpretedOption> uninterpretedOptionList = null;

  @SerializedName("uninterpretedOptionCount")
  private Integer uninterpretedOptionCount = null;

  @SerializedName("uninterpretedOptionOrBuilderList")
  private List<UninterpretedOptionOrBuilder> uninterpretedOptionOrBuilderList = null;

  @SerializedName("defaultInstanceForType")
  private Message defaultInstanceForType = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  public FileOptionsOrBuilder javaPackage(String javaPackage) {
    this.javaPackage = javaPackage;
    return this;
  }

   /**
   * Get javaPackage
   * @return javaPackage
  **/
  @Schema(description = "")
  public String getJavaPackage() {
    return javaPackage;
  }

  public void setJavaPackage(String javaPackage) {
    this.javaPackage = javaPackage;
  }

  public FileOptionsOrBuilder javaStringCheckUtf8(Boolean javaStringCheckUtf8) {
    this.javaStringCheckUtf8 = javaStringCheckUtf8;
    return this;
  }

   /**
   * Get javaStringCheckUtf8
   * @return javaStringCheckUtf8
  **/
  @Schema(description = "")
  public Boolean isJavaStringCheckUtf8() {
    return javaStringCheckUtf8;
  }

  public void setJavaStringCheckUtf8(Boolean javaStringCheckUtf8) {
    this.javaStringCheckUtf8 = javaStringCheckUtf8;
  }

  public FileOptionsOrBuilder javaPackageBytes(ByteString javaPackageBytes) {
    this.javaPackageBytes = javaPackageBytes;
    return this;
  }

   /**
   * Get javaPackageBytes
   * @return javaPackageBytes
  **/
  @Schema(description = "")
  public ByteString getJavaPackageBytes() {
    return javaPackageBytes;
  }

  public void setJavaPackageBytes(ByteString javaPackageBytes) {
    this.javaPackageBytes = javaPackageBytes;
  }

  public FileOptionsOrBuilder javaOuterClassname(String javaOuterClassname) {
    this.javaOuterClassname = javaOuterClassname;
    return this;
  }

   /**
   * Get javaOuterClassname
   * @return javaOuterClassname
  **/
  @Schema(description = "")
  public String getJavaOuterClassname() {
    return javaOuterClassname;
  }

  public void setJavaOuterClassname(String javaOuterClassname) {
    this.javaOuterClassname = javaOuterClassname;
  }

  public FileOptionsOrBuilder javaOuterClassnameBytes(ByteString javaOuterClassnameBytes) {
    this.javaOuterClassnameBytes = javaOuterClassnameBytes;
    return this;
  }

   /**
   * Get javaOuterClassnameBytes
   * @return javaOuterClassnameBytes
  **/
  @Schema(description = "")
  public ByteString getJavaOuterClassnameBytes() {
    return javaOuterClassnameBytes;
  }

  public void setJavaOuterClassnameBytes(ByteString javaOuterClassnameBytes) {
    this.javaOuterClassnameBytes = javaOuterClassnameBytes;
  }

  public FileOptionsOrBuilder javaMultipleFiles(Boolean javaMultipleFiles) {
    this.javaMultipleFiles = javaMultipleFiles;
    return this;
  }

   /**
   * Get javaMultipleFiles
   * @return javaMultipleFiles
  **/
  @Schema(description = "")
  public Boolean isJavaMultipleFiles() {
    return javaMultipleFiles;
  }

  public void setJavaMultipleFiles(Boolean javaMultipleFiles) {
    this.javaMultipleFiles = javaMultipleFiles;
  }

  public FileOptionsOrBuilder javaGenerateEqualsAndHash(Boolean javaGenerateEqualsAndHash) {
    this.javaGenerateEqualsAndHash = javaGenerateEqualsAndHash;
    return this;
  }

   /**
   * Get javaGenerateEqualsAndHash
   * @return javaGenerateEqualsAndHash
  **/
  @Schema(description = "")
  public Boolean isJavaGenerateEqualsAndHash() {
    return javaGenerateEqualsAndHash;
  }

  public void setJavaGenerateEqualsAndHash(Boolean javaGenerateEqualsAndHash) {
    this.javaGenerateEqualsAndHash = javaGenerateEqualsAndHash;
  }

  public FileOptionsOrBuilder optimizeFor(OptimizeForEnum optimizeFor) {
    this.optimizeFor = optimizeFor;
    return this;
  }

   /**
   * Get optimizeFor
   * @return optimizeFor
  **/
  @Schema(description = "")
  public OptimizeForEnum getOptimizeFor() {
    return optimizeFor;
  }

  public void setOptimizeFor(OptimizeForEnum optimizeFor) {
    this.optimizeFor = optimizeFor;
  }

  public FileOptionsOrBuilder goPackage(String goPackage) {
    this.goPackage = goPackage;
    return this;
  }

   /**
   * Get goPackage
   * @return goPackage
  **/
  @Schema(description = "")
  public String getGoPackage() {
    return goPackage;
  }

  public void setGoPackage(String goPackage) {
    this.goPackage = goPackage;
  }

  public FileOptionsOrBuilder goPackageBytes(ByteString goPackageBytes) {
    this.goPackageBytes = goPackageBytes;
    return this;
  }

   /**
   * Get goPackageBytes
   * @return goPackageBytes
  **/
  @Schema(description = "")
  public ByteString getGoPackageBytes() {
    return goPackageBytes;
  }

  public void setGoPackageBytes(ByteString goPackageBytes) {
    this.goPackageBytes = goPackageBytes;
  }

  public FileOptionsOrBuilder ccGenericServices(Boolean ccGenericServices) {
    this.ccGenericServices = ccGenericServices;
    return this;
  }

   /**
   * Get ccGenericServices
   * @return ccGenericServices
  **/
  @Schema(description = "")
  public Boolean isCcGenericServices() {
    return ccGenericServices;
  }

  public void setCcGenericServices(Boolean ccGenericServices) {
    this.ccGenericServices = ccGenericServices;
  }

  public FileOptionsOrBuilder javaGenericServices(Boolean javaGenericServices) {
    this.javaGenericServices = javaGenericServices;
    return this;
  }

   /**
   * Get javaGenericServices
   * @return javaGenericServices
  **/
  @Schema(description = "")
  public Boolean isJavaGenericServices() {
    return javaGenericServices;
  }

  public void setJavaGenericServices(Boolean javaGenericServices) {
    this.javaGenericServices = javaGenericServices;
  }

  public FileOptionsOrBuilder pyGenericServices(Boolean pyGenericServices) {
    this.pyGenericServices = pyGenericServices;
    return this;
  }

   /**
   * Get pyGenericServices
   * @return pyGenericServices
  **/
  @Schema(description = "")
  public Boolean isPyGenericServices() {
    return pyGenericServices;
  }

  public void setPyGenericServices(Boolean pyGenericServices) {
    this.pyGenericServices = pyGenericServices;
  }

  public FileOptionsOrBuilder phpGenericServices(Boolean phpGenericServices) {
    this.phpGenericServices = phpGenericServices;
    return this;
  }

   /**
   * Get phpGenericServices
   * @return phpGenericServices
  **/
  @Schema(description = "")
  public Boolean isPhpGenericServices() {
    return phpGenericServices;
  }

  public void setPhpGenericServices(Boolean phpGenericServices) {
    this.phpGenericServices = phpGenericServices;
  }

  public FileOptionsOrBuilder deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * Get deprecated
   * @return deprecated
  **/
  @Schema(description = "")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public FileOptionsOrBuilder ccEnableArenas(Boolean ccEnableArenas) {
    this.ccEnableArenas = ccEnableArenas;
    return this;
  }

   /**
   * Get ccEnableArenas
   * @return ccEnableArenas
  **/
  @Schema(description = "")
  public Boolean isCcEnableArenas() {
    return ccEnableArenas;
  }

  public void setCcEnableArenas(Boolean ccEnableArenas) {
    this.ccEnableArenas = ccEnableArenas;
  }

  public FileOptionsOrBuilder objcClassPrefix(String objcClassPrefix) {
    this.objcClassPrefix = objcClassPrefix;
    return this;
  }

   /**
   * Get objcClassPrefix
   * @return objcClassPrefix
  **/
  @Schema(description = "")
  public String getObjcClassPrefix() {
    return objcClassPrefix;
  }

  public void setObjcClassPrefix(String objcClassPrefix) {
    this.objcClassPrefix = objcClassPrefix;
  }

  public FileOptionsOrBuilder objcClassPrefixBytes(ByteString objcClassPrefixBytes) {
    this.objcClassPrefixBytes = objcClassPrefixBytes;
    return this;
  }

   /**
   * Get objcClassPrefixBytes
   * @return objcClassPrefixBytes
  **/
  @Schema(description = "")
  public ByteString getObjcClassPrefixBytes() {
    return objcClassPrefixBytes;
  }

  public void setObjcClassPrefixBytes(ByteString objcClassPrefixBytes) {
    this.objcClassPrefixBytes = objcClassPrefixBytes;
  }

  public FileOptionsOrBuilder csharpNamespace(String csharpNamespace) {
    this.csharpNamespace = csharpNamespace;
    return this;
  }

   /**
   * Get csharpNamespace
   * @return csharpNamespace
  **/
  @Schema(description = "")
  public String getCsharpNamespace() {
    return csharpNamespace;
  }

  public void setCsharpNamespace(String csharpNamespace) {
    this.csharpNamespace = csharpNamespace;
  }

  public FileOptionsOrBuilder csharpNamespaceBytes(ByteString csharpNamespaceBytes) {
    this.csharpNamespaceBytes = csharpNamespaceBytes;
    return this;
  }

   /**
   * Get csharpNamespaceBytes
   * @return csharpNamespaceBytes
  **/
  @Schema(description = "")
  public ByteString getCsharpNamespaceBytes() {
    return csharpNamespaceBytes;
  }

  public void setCsharpNamespaceBytes(ByteString csharpNamespaceBytes) {
    this.csharpNamespaceBytes = csharpNamespaceBytes;
  }

  public FileOptionsOrBuilder swiftPrefix(String swiftPrefix) {
    this.swiftPrefix = swiftPrefix;
    return this;
  }

   /**
   * Get swiftPrefix
   * @return swiftPrefix
  **/
  @Schema(description = "")
  public String getSwiftPrefix() {
    return swiftPrefix;
  }

  public void setSwiftPrefix(String swiftPrefix) {
    this.swiftPrefix = swiftPrefix;
  }

  public FileOptionsOrBuilder swiftPrefixBytes(ByteString swiftPrefixBytes) {
    this.swiftPrefixBytes = swiftPrefixBytes;
    return this;
  }

   /**
   * Get swiftPrefixBytes
   * @return swiftPrefixBytes
  **/
  @Schema(description = "")
  public ByteString getSwiftPrefixBytes() {
    return swiftPrefixBytes;
  }

  public void setSwiftPrefixBytes(ByteString swiftPrefixBytes) {
    this.swiftPrefixBytes = swiftPrefixBytes;
  }

  public FileOptionsOrBuilder phpClassPrefix(String phpClassPrefix) {
    this.phpClassPrefix = phpClassPrefix;
    return this;
  }

   /**
   * Get phpClassPrefix
   * @return phpClassPrefix
  **/
  @Schema(description = "")
  public String getPhpClassPrefix() {
    return phpClassPrefix;
  }

  public void setPhpClassPrefix(String phpClassPrefix) {
    this.phpClassPrefix = phpClassPrefix;
  }

  public FileOptionsOrBuilder phpClassPrefixBytes(ByteString phpClassPrefixBytes) {
    this.phpClassPrefixBytes = phpClassPrefixBytes;
    return this;
  }

   /**
   * Get phpClassPrefixBytes
   * @return phpClassPrefixBytes
  **/
  @Schema(description = "")
  public ByteString getPhpClassPrefixBytes() {
    return phpClassPrefixBytes;
  }

  public void setPhpClassPrefixBytes(ByteString phpClassPrefixBytes) {
    this.phpClassPrefixBytes = phpClassPrefixBytes;
  }

  public FileOptionsOrBuilder phpNamespace(String phpNamespace) {
    this.phpNamespace = phpNamespace;
    return this;
  }

   /**
   * Get phpNamespace
   * @return phpNamespace
  **/
  @Schema(description = "")
  public String getPhpNamespace() {
    return phpNamespace;
  }

  public void setPhpNamespace(String phpNamespace) {
    this.phpNamespace = phpNamespace;
  }

  public FileOptionsOrBuilder phpNamespaceBytes(ByteString phpNamespaceBytes) {
    this.phpNamespaceBytes = phpNamespaceBytes;
    return this;
  }

   /**
   * Get phpNamespaceBytes
   * @return phpNamespaceBytes
  **/
  @Schema(description = "")
  public ByteString getPhpNamespaceBytes() {
    return phpNamespaceBytes;
  }

  public void setPhpNamespaceBytes(ByteString phpNamespaceBytes) {
    this.phpNamespaceBytes = phpNamespaceBytes;
  }

  public FileOptionsOrBuilder phpMetadataNamespace(String phpMetadataNamespace) {
    this.phpMetadataNamespace = phpMetadataNamespace;
    return this;
  }

   /**
   * Get phpMetadataNamespace
   * @return phpMetadataNamespace
  **/
  @Schema(description = "")
  public String getPhpMetadataNamespace() {
    return phpMetadataNamespace;
  }

  public void setPhpMetadataNamespace(String phpMetadataNamespace) {
    this.phpMetadataNamespace = phpMetadataNamespace;
  }

  public FileOptionsOrBuilder phpMetadataNamespaceBytes(ByteString phpMetadataNamespaceBytes) {
    this.phpMetadataNamespaceBytes = phpMetadataNamespaceBytes;
    return this;
  }

   /**
   * Get phpMetadataNamespaceBytes
   * @return phpMetadataNamespaceBytes
  **/
  @Schema(description = "")
  public ByteString getPhpMetadataNamespaceBytes() {
    return phpMetadataNamespaceBytes;
  }

  public void setPhpMetadataNamespaceBytes(ByteString phpMetadataNamespaceBytes) {
    this.phpMetadataNamespaceBytes = phpMetadataNamespaceBytes;
  }

  public FileOptionsOrBuilder rubyPackage(String rubyPackage) {
    this.rubyPackage = rubyPackage;
    return this;
  }

   /**
   * Get rubyPackage
   * @return rubyPackage
  **/
  @Schema(description = "")
  public String getRubyPackage() {
    return rubyPackage;
  }

  public void setRubyPackage(String rubyPackage) {
    this.rubyPackage = rubyPackage;
  }

  public FileOptionsOrBuilder rubyPackageBytes(ByteString rubyPackageBytes) {
    this.rubyPackageBytes = rubyPackageBytes;
    return this;
  }

   /**
   * Get rubyPackageBytes
   * @return rubyPackageBytes
  **/
  @Schema(description = "")
  public ByteString getRubyPackageBytes() {
    return rubyPackageBytes;
  }

  public void setRubyPackageBytes(ByteString rubyPackageBytes) {
    this.rubyPackageBytes = rubyPackageBytes;
  }

  public FileOptionsOrBuilder uninterpretedOptionList(List<UninterpretedOption> uninterpretedOptionList) {
    this.uninterpretedOptionList = uninterpretedOptionList;
    return this;
  }

  public FileOptionsOrBuilder addUninterpretedOptionListItem(UninterpretedOption uninterpretedOptionListItem) {
    if (this.uninterpretedOptionList == null) {
      this.uninterpretedOptionList = new ArrayList<UninterpretedOption>();
    }
    this.uninterpretedOptionList.add(uninterpretedOptionListItem);
    return this;
  }

   /**
   * Get uninterpretedOptionList
   * @return uninterpretedOptionList
  **/
  @Schema(description = "")
  public List<UninterpretedOption> getUninterpretedOptionList() {
    return uninterpretedOptionList;
  }

  public void setUninterpretedOptionList(List<UninterpretedOption> uninterpretedOptionList) {
    this.uninterpretedOptionList = uninterpretedOptionList;
  }

  public FileOptionsOrBuilder uninterpretedOptionCount(Integer uninterpretedOptionCount) {
    this.uninterpretedOptionCount = uninterpretedOptionCount;
    return this;
  }

   /**
   * Get uninterpretedOptionCount
   * @return uninterpretedOptionCount
  **/
  @Schema(description = "")
  public Integer getUninterpretedOptionCount() {
    return uninterpretedOptionCount;
  }

  public void setUninterpretedOptionCount(Integer uninterpretedOptionCount) {
    this.uninterpretedOptionCount = uninterpretedOptionCount;
  }

  public FileOptionsOrBuilder uninterpretedOptionOrBuilderList(List<UninterpretedOptionOrBuilder> uninterpretedOptionOrBuilderList) {
    this.uninterpretedOptionOrBuilderList = uninterpretedOptionOrBuilderList;
    return this;
  }

  public FileOptionsOrBuilder addUninterpretedOptionOrBuilderListItem(UninterpretedOptionOrBuilder uninterpretedOptionOrBuilderListItem) {
    if (this.uninterpretedOptionOrBuilderList == null) {
      this.uninterpretedOptionOrBuilderList = new ArrayList<UninterpretedOptionOrBuilder>();
    }
    this.uninterpretedOptionOrBuilderList.add(uninterpretedOptionOrBuilderListItem);
    return this;
  }

   /**
   * Get uninterpretedOptionOrBuilderList
   * @return uninterpretedOptionOrBuilderList
  **/
  @Schema(description = "")
  public List<UninterpretedOptionOrBuilder> getUninterpretedOptionOrBuilderList() {
    return uninterpretedOptionOrBuilderList;
  }

  public void setUninterpretedOptionOrBuilderList(List<UninterpretedOptionOrBuilder> uninterpretedOptionOrBuilderList) {
    this.uninterpretedOptionOrBuilderList = uninterpretedOptionOrBuilderList;
  }

  public FileOptionsOrBuilder defaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public Message getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public FileOptionsOrBuilder allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public FileOptionsOrBuilder putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public FileOptionsOrBuilder initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public FileOptionsOrBuilder descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public FileOptionsOrBuilder unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public FileOptionsOrBuilder initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileOptionsOrBuilder fileOptionsOrBuilder = (FileOptionsOrBuilder) o;
    return Objects.equals(this.javaPackage, fileOptionsOrBuilder.javaPackage) &&
        Objects.equals(this.javaStringCheckUtf8, fileOptionsOrBuilder.javaStringCheckUtf8) &&
        Objects.equals(this.javaPackageBytes, fileOptionsOrBuilder.javaPackageBytes) &&
        Objects.equals(this.javaOuterClassname, fileOptionsOrBuilder.javaOuterClassname) &&
        Objects.equals(this.javaOuterClassnameBytes, fileOptionsOrBuilder.javaOuterClassnameBytes) &&
        Objects.equals(this.javaMultipleFiles, fileOptionsOrBuilder.javaMultipleFiles) &&
        Objects.equals(this.javaGenerateEqualsAndHash, fileOptionsOrBuilder.javaGenerateEqualsAndHash) &&
        Objects.equals(this.optimizeFor, fileOptionsOrBuilder.optimizeFor) &&
        Objects.equals(this.goPackage, fileOptionsOrBuilder.goPackage) &&
        Objects.equals(this.goPackageBytes, fileOptionsOrBuilder.goPackageBytes) &&
        Objects.equals(this.ccGenericServices, fileOptionsOrBuilder.ccGenericServices) &&
        Objects.equals(this.javaGenericServices, fileOptionsOrBuilder.javaGenericServices) &&
        Objects.equals(this.pyGenericServices, fileOptionsOrBuilder.pyGenericServices) &&
        Objects.equals(this.phpGenericServices, fileOptionsOrBuilder.phpGenericServices) &&
        Objects.equals(this.deprecated, fileOptionsOrBuilder.deprecated) &&
        Objects.equals(this.ccEnableArenas, fileOptionsOrBuilder.ccEnableArenas) &&
        Objects.equals(this.objcClassPrefix, fileOptionsOrBuilder.objcClassPrefix) &&
        Objects.equals(this.objcClassPrefixBytes, fileOptionsOrBuilder.objcClassPrefixBytes) &&
        Objects.equals(this.csharpNamespace, fileOptionsOrBuilder.csharpNamespace) &&
        Objects.equals(this.csharpNamespaceBytes, fileOptionsOrBuilder.csharpNamespaceBytes) &&
        Objects.equals(this.swiftPrefix, fileOptionsOrBuilder.swiftPrefix) &&
        Objects.equals(this.swiftPrefixBytes, fileOptionsOrBuilder.swiftPrefixBytes) &&
        Objects.equals(this.phpClassPrefix, fileOptionsOrBuilder.phpClassPrefix) &&
        Objects.equals(this.phpClassPrefixBytes, fileOptionsOrBuilder.phpClassPrefixBytes) &&
        Objects.equals(this.phpNamespace, fileOptionsOrBuilder.phpNamespace) &&
        Objects.equals(this.phpNamespaceBytes, fileOptionsOrBuilder.phpNamespaceBytes) &&
        Objects.equals(this.phpMetadataNamespace, fileOptionsOrBuilder.phpMetadataNamespace) &&
        Objects.equals(this.phpMetadataNamespaceBytes, fileOptionsOrBuilder.phpMetadataNamespaceBytes) &&
        Objects.equals(this.rubyPackage, fileOptionsOrBuilder.rubyPackage) &&
        Objects.equals(this.rubyPackageBytes, fileOptionsOrBuilder.rubyPackageBytes) &&
        Objects.equals(this.uninterpretedOptionList, fileOptionsOrBuilder.uninterpretedOptionList) &&
        Objects.equals(this.uninterpretedOptionCount, fileOptionsOrBuilder.uninterpretedOptionCount) &&
        Objects.equals(this.uninterpretedOptionOrBuilderList, fileOptionsOrBuilder.uninterpretedOptionOrBuilderList) &&
        Objects.equals(this.defaultInstanceForType, fileOptionsOrBuilder.defaultInstanceForType) &&
        Objects.equals(this.allFields, fileOptionsOrBuilder.allFields) &&
        Objects.equals(this.initializationErrorString, fileOptionsOrBuilder.initializationErrorString) &&
        Objects.equals(this.descriptorForType, fileOptionsOrBuilder.descriptorForType) &&
        Objects.equals(this.unknownFields, fileOptionsOrBuilder.unknownFields) &&
        Objects.equals(this.initialized, fileOptionsOrBuilder.initialized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(javaPackage, javaStringCheckUtf8, javaPackageBytes, javaOuterClassname, javaOuterClassnameBytes, javaMultipleFiles, javaGenerateEqualsAndHash, optimizeFor, goPackage, goPackageBytes, ccGenericServices, javaGenericServices, pyGenericServices, phpGenericServices, deprecated, ccEnableArenas, objcClassPrefix, objcClassPrefixBytes, csharpNamespace, csharpNamespaceBytes, swiftPrefix, swiftPrefixBytes, phpClassPrefix, phpClassPrefixBytes, phpNamespace, phpNamespaceBytes, phpMetadataNamespace, phpMetadataNamespaceBytes, rubyPackage, rubyPackageBytes, uninterpretedOptionList, uninterpretedOptionCount, uninterpretedOptionOrBuilderList, defaultInstanceForType, allFields, initializationErrorString, descriptorForType, unknownFields, initialized);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileOptionsOrBuilder {\n");
    
    sb.append("    javaPackage: ").append(toIndentedString(javaPackage)).append("\n");
    sb.append("    javaStringCheckUtf8: ").append(toIndentedString(javaStringCheckUtf8)).append("\n");
    sb.append("    javaPackageBytes: ").append(toIndentedString(javaPackageBytes)).append("\n");
    sb.append("    javaOuterClassname: ").append(toIndentedString(javaOuterClassname)).append("\n");
    sb.append("    javaOuterClassnameBytes: ").append(toIndentedString(javaOuterClassnameBytes)).append("\n");
    sb.append("    javaMultipleFiles: ").append(toIndentedString(javaMultipleFiles)).append("\n");
    sb.append("    javaGenerateEqualsAndHash: ").append(toIndentedString(javaGenerateEqualsAndHash)).append("\n");
    sb.append("    optimizeFor: ").append(toIndentedString(optimizeFor)).append("\n");
    sb.append("    goPackage: ").append(toIndentedString(goPackage)).append("\n");
    sb.append("    goPackageBytes: ").append(toIndentedString(goPackageBytes)).append("\n");
    sb.append("    ccGenericServices: ").append(toIndentedString(ccGenericServices)).append("\n");
    sb.append("    javaGenericServices: ").append(toIndentedString(javaGenericServices)).append("\n");
    sb.append("    pyGenericServices: ").append(toIndentedString(pyGenericServices)).append("\n");
    sb.append("    phpGenericServices: ").append(toIndentedString(phpGenericServices)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    ccEnableArenas: ").append(toIndentedString(ccEnableArenas)).append("\n");
    sb.append("    objcClassPrefix: ").append(toIndentedString(objcClassPrefix)).append("\n");
    sb.append("    objcClassPrefixBytes: ").append(toIndentedString(objcClassPrefixBytes)).append("\n");
    sb.append("    csharpNamespace: ").append(toIndentedString(csharpNamespace)).append("\n");
    sb.append("    csharpNamespaceBytes: ").append(toIndentedString(csharpNamespaceBytes)).append("\n");
    sb.append("    swiftPrefix: ").append(toIndentedString(swiftPrefix)).append("\n");
    sb.append("    swiftPrefixBytes: ").append(toIndentedString(swiftPrefixBytes)).append("\n");
    sb.append("    phpClassPrefix: ").append(toIndentedString(phpClassPrefix)).append("\n");
    sb.append("    phpClassPrefixBytes: ").append(toIndentedString(phpClassPrefixBytes)).append("\n");
    sb.append("    phpNamespace: ").append(toIndentedString(phpNamespace)).append("\n");
    sb.append("    phpNamespaceBytes: ").append(toIndentedString(phpNamespaceBytes)).append("\n");
    sb.append("    phpMetadataNamespace: ").append(toIndentedString(phpMetadataNamespace)).append("\n");
    sb.append("    phpMetadataNamespaceBytes: ").append(toIndentedString(phpMetadataNamespaceBytes)).append("\n");
    sb.append("    rubyPackage: ").append(toIndentedString(rubyPackage)).append("\n");
    sb.append("    rubyPackageBytes: ").append(toIndentedString(rubyPackageBytes)).append("\n");
    sb.append("    uninterpretedOptionList: ").append(toIndentedString(uninterpretedOptionList)).append("\n");
    sb.append("    uninterpretedOptionCount: ").append(toIndentedString(uninterpretedOptionCount)).append("\n");
    sb.append("    uninterpretedOptionOrBuilderList: ").append(toIndentedString(uninterpretedOptionOrBuilderList)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
