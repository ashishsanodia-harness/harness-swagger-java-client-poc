/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ResponseMessage;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FailureInfoDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class FailureInfoDTO {
  @SerializedName("message")
  private String message = null;

  /**
   * Gets or Sets failureTypeList
   */
  @JsonAdapter(FailureTypeListEnum.Adapter.class)
  public enum FailureTypeListEnum {
    EXPIRED("EXPIRED"),
    DELEGATE_PROVISIONING("DELEGATE_PROVISIONING"),
    CONNECTIVITY("CONNECTIVITY"),
    AUTHENTICATION("AUTHENTICATION"),
    VERIFICATION_FAILURE("VERIFICATION_FAILURE"),
    APPLICATION_ERROR("APPLICATION_ERROR"),
    AUTHORIZATION_ERROR("AUTHORIZATION_ERROR"),
    TIMEOUT_ERROR("TIMEOUT_ERROR");

    private String value;

    FailureTypeListEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FailureTypeListEnum fromValue(String input) {
      for (FailureTypeListEnum b : FailureTypeListEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FailureTypeListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailureTypeListEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FailureTypeListEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FailureTypeListEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("failureTypeList")
  private List<FailureTypeListEnum> failureTypeList = null;

  @SerializedName("responseMessages")
  private List<ResponseMessage> responseMessages = null;

  public FailureInfoDTO message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public FailureInfoDTO failureTypeList(List<FailureTypeListEnum> failureTypeList) {
    this.failureTypeList = failureTypeList;
    return this;
  }

  public FailureInfoDTO addFailureTypeListItem(FailureTypeListEnum failureTypeListItem) {
    if (this.failureTypeList == null) {
      this.failureTypeList = new ArrayList<FailureTypeListEnum>();
    }
    this.failureTypeList.add(failureTypeListItem);
    return this;
  }

   /**
   * Get failureTypeList
   * @return failureTypeList
  **/
  @Schema(description = "")
  public List<FailureTypeListEnum> getFailureTypeList() {
    return failureTypeList;
  }

  public void setFailureTypeList(List<FailureTypeListEnum> failureTypeList) {
    this.failureTypeList = failureTypeList;
  }

  public FailureInfoDTO responseMessages(List<ResponseMessage> responseMessages) {
    this.responseMessages = responseMessages;
    return this;
  }

  public FailureInfoDTO addResponseMessagesItem(ResponseMessage responseMessagesItem) {
    if (this.responseMessages == null) {
      this.responseMessages = new ArrayList<ResponseMessage>();
    }
    this.responseMessages.add(responseMessagesItem);
    return this;
  }

   /**
   * Get responseMessages
   * @return responseMessages
  **/
  @Schema(description = "")
  public List<ResponseMessage> getResponseMessages() {
    return responseMessages;
  }

  public void setResponseMessages(List<ResponseMessage> responseMessages) {
    this.responseMessages = responseMessages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailureInfoDTO failureInfoDTO = (FailureInfoDTO) o;
    return Objects.equals(this.message, failureInfoDTO.message) &&
        Objects.equals(this.failureTypeList, failureInfoDTO.failureTypeList) &&
        Objects.equals(this.responseMessages, failureInfoDTO.responseMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, failureTypeList, responseMessages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailureInfoDTO {\n");
    
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    failureTypeList: ").append(toIndentedString(failureTypeList)).append("\n");
    sb.append("    responseMessages: ").append(toIndentedString(responseMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
