/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.EnumDescriptorProto;
import io.swagger.client.model.EnumOptions;
import io.swagger.client.model.EnumValueDescriptor;
import io.swagger.client.model.FileDescriptor;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * EnumDescriptor
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class EnumDescriptor {
  @SerializedName("index")
  private Integer index = null;

  @SerializedName("proto")
  private EnumDescriptorProto proto = null;

  @SerializedName("fullName")
  private String fullName = null;

  @SerializedName("file")
  private FileDescriptor file = null;

  @SerializedName("containingType")
  private Descriptor containingType = null;

  @SerializedName("values")
  private List<EnumValueDescriptor> values = null;

  @SerializedName("options")
  private EnumOptions options = null;

  @SerializedName("name")
  private String name = null;

  public EnumDescriptor index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @Schema(description = "")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public EnumDescriptor proto(EnumDescriptorProto proto) {
    this.proto = proto;
    return this;
  }

   /**
   * Get proto
   * @return proto
  **/
  @Schema(description = "")
  public EnumDescriptorProto getProto() {
    return proto;
  }

  public void setProto(EnumDescriptorProto proto) {
    this.proto = proto;
  }

  public EnumDescriptor fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @Schema(description = "")
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  public EnumDescriptor file(FileDescriptor file) {
    this.file = file;
    return this;
  }

   /**
   * Get file
   * @return file
  **/
  @Schema(description = "")
  public FileDescriptor getFile() {
    return file;
  }

  public void setFile(FileDescriptor file) {
    this.file = file;
  }

  public EnumDescriptor containingType(Descriptor containingType) {
    this.containingType = containingType;
    return this;
  }

   /**
   * Get containingType
   * @return containingType
  **/
  @Schema(description = "")
  public Descriptor getContainingType() {
    return containingType;
  }

  public void setContainingType(Descriptor containingType) {
    this.containingType = containingType;
  }

  public EnumDescriptor values(List<EnumValueDescriptor> values) {
    this.values = values;
    return this;
  }

  public EnumDescriptor addValuesItem(EnumValueDescriptor valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<EnumValueDescriptor>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @Schema(description = "")
  public List<EnumValueDescriptor> getValues() {
    return values;
  }

  public void setValues(List<EnumValueDescriptor> values) {
    this.values = values;
  }

  public EnumDescriptor options(EnumOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public EnumOptions getOptions() {
    return options;
  }

  public void setOptions(EnumOptions options) {
    this.options = options;
  }

  public EnumDescriptor name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnumDescriptor enumDescriptor = (EnumDescriptor) o;
    return Objects.equals(this.index, enumDescriptor.index) &&
        Objects.equals(this.proto, enumDescriptor.proto) &&
        Objects.equals(this.fullName, enumDescriptor.fullName) &&
        Objects.equals(this.file, enumDescriptor.file) &&
        Objects.equals(this.containingType, enumDescriptor.containingType) &&
        Objects.equals(this.values, enumDescriptor.values) &&
        Objects.equals(this.options, enumDescriptor.options) &&
        Objects.equals(this.name, enumDescriptor.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, proto, fullName, file, containingType, values, options, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnumDescriptor {\n");
    
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    proto: ").append(toIndentedString(proto)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    containingType: ").append(toIndentedString(containingType)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
