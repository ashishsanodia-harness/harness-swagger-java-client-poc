/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EntityReference;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This contains details of the Git Sync Entity
 */
@Schema(description = "This contains details of the Git Sync Entity")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class GitSyncEntity {
  @SerializedName("entityName")
  private String entityName = null;

  /**
   * Entity Type
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    PROJECTS("Projects"),
    PIPELINES("Pipelines"),
    PIPELINESTEPS("PipelineSteps"),
    HTTP("Http"),
    JIRACREATE("JiraCreate"),
    JIRAUPDATE("JiraUpdate"),
    JIRAAPPROVAL("JiraApproval"),
    HARNESSAPPROVAL("HarnessApproval"),
    BARRIER("Barrier"),
    SHELLSCRIPT("ShellScript"),
    K8SCANARYDEPLOY("K8sCanaryDeploy"),
    CONNECTORS("Connectors"),
    SECRETS("Secrets"),
    SERVICE("Service"),
    ENVIRONMENT("Environment"),
    INPUTSETS("InputSets"),
    CVCONFIG("CvConfig"),
    VERIFY("Verify"),
    DELEGATES("Delegates"),
    DELEGATECONFIGURATIONS("DelegateConfigurations"),
    CVVERIFICATIONJOB("CvVerificationJob"),
    INTEGRATIONSTAGE("IntegrationStage"),
    INTEGRATIONSTEPS("IntegrationSteps"),
    CVKUBERNETESACTIVITYSOURCE("CvKubernetesActivitySource"),
    DEPLOYMENTSTEPS("DeploymentSteps"),
    DEPLOYMENTSTAGE("DeploymentStage"),
    APPROVALSTAGE("ApprovalStage"),
    FEATUREFLAGSTAGE("FeatureFlagStage"),
    TEMPLATE("Template"),
    TRIGGERS("Triggers"),
    MONITOREDSERVICE("MonitoredService"),
    GITREPOSITORIES("GitRepositories"),
    FEATUREFLAGS("FeatureFlags"),
    SERVICENOWAPPROVAL("ServiceNowApproval");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EntityTypeEnum fromValue(String input) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EntityTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("entityType")
  private EntityTypeEnum entityType = null;

  @SerializedName("entityIdentifier")
  private String entityIdentifier = null;

  @SerializedName("gitConnectorId")
  private String gitConnectorId = null;

  @SerializedName("repoUrl")
  private String repoUrl = null;

  @SerializedName("branch")
  private String branch = null;

  @SerializedName("folderPath")
  private String folderPath = null;

  @SerializedName("entityGitPath")
  private String entityGitPath = null;

  /**
   * Type of Git Repo Provider
   */
  @JsonAdapter(RepoProviderTypeEnum.Adapter.class)
  public enum RepoProviderTypeEnum {
    GITHUB("GITHUB"),
    GITLAB("GITLAB"),
    BITBUCKET("BITBUCKET"),
    UNKNOWN("UNKNOWN");

    private String value;

    RepoProviderTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RepoProviderTypeEnum fromValue(String input) {
      for (RepoProviderTypeEnum b : RepoProviderTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RepoProviderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepoProviderTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RepoProviderTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RepoProviderTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("repoProviderType")
  private RepoProviderTypeEnum repoProviderType = null;

  @SerializedName("entityReference")
  private EntityReference entityReference = null;

  @SerializedName("accountId")
  private String accountId = null;

  public GitSyncEntity entityName(String entityName) {
    this.entityName = entityName;
    return this;
  }

   /**
   * Name of the Entity
   * @return entityName
  **/
  @Schema(description = "Name of the Entity")
  public String getEntityName() {
    return entityName;
  }

  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }

  public GitSyncEntity entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Entity Type
   * @return entityType
  **/
  @Schema(description = "Entity Type")
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }

  public GitSyncEntity entityIdentifier(String entityIdentifier) {
    this.entityIdentifier = entityIdentifier;
    return this;
  }

   /**
   * Id of the Entity
   * @return entityIdentifier
  **/
  @Schema(description = "Id of the Entity")
  public String getEntityIdentifier() {
    return entityIdentifier;
  }

  public void setEntityIdentifier(String entityIdentifier) {
    this.entityIdentifier = entityIdentifier;
  }

  public GitSyncEntity gitConnectorId(String gitConnectorId) {
    this.gitConnectorId = gitConnectorId;
    return this;
  }

   /**
   * Id of the Connector referenced in Git
   * @return gitConnectorId
  **/
  @Schema(description = "Id of the Connector referenced in Git")
  public String getGitConnectorId() {
    return gitConnectorId;
  }

  public void setGitConnectorId(String gitConnectorId) {
    this.gitConnectorId = gitConnectorId;
  }

  public GitSyncEntity repoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
    return this;
  }

   /**
   * Repo URL
   * @return repoUrl
  **/
  @Schema(description = "Repo URL")
  public String getRepoUrl() {
    return repoUrl;
  }

  public void setRepoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
  }

  public GitSyncEntity branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Branch Name
   * @return branch
  **/
  @Schema(description = "Branch Name")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public GitSyncEntity folderPath(String folderPath) {
    this.folderPath = folderPath;
    return this;
  }

   /**
   * Root Folder Path of the Entity
   * @return folderPath
  **/
  @Schema(description = "Root Folder Path of the Entity")
  public String getFolderPath() {
    return folderPath;
  }

  public void setFolderPath(String folderPath) {
    this.folderPath = folderPath;
  }

  public GitSyncEntity entityGitPath(String entityGitPath) {
    this.entityGitPath = entityGitPath;
    return this;
  }

   /**
   * File Path of the Entity
   * @return entityGitPath
  **/
  @Schema(description = "File Path of the Entity")
  public String getEntityGitPath() {
    return entityGitPath;
  }

  public void setEntityGitPath(String entityGitPath) {
    this.entityGitPath = entityGitPath;
  }

  public GitSyncEntity repoProviderType(RepoProviderTypeEnum repoProviderType) {
    this.repoProviderType = repoProviderType;
    return this;
  }

   /**
   * Type of Git Repo Provider
   * @return repoProviderType
  **/
  @Schema(description = "Type of Git Repo Provider")
  public RepoProviderTypeEnum getRepoProviderType() {
    return repoProviderType;
  }

  public void setRepoProviderType(RepoProviderTypeEnum repoProviderType) {
    this.repoProviderType = repoProviderType;
  }

  public GitSyncEntity entityReference(EntityReference entityReference) {
    this.entityReference = entityReference;
    return this;
  }

   /**
   * Get entityReference
   * @return entityReference
  **/
  @Schema(description = "")
  public EntityReference getEntityReference() {
    return entityReference;
  }

  public void setEntityReference(EntityReference entityReference) {
    this.entityReference = entityReference;
  }

  public GitSyncEntity accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitSyncEntity gitSyncEntity = (GitSyncEntity) o;
    return Objects.equals(this.entityName, gitSyncEntity.entityName) &&
        Objects.equals(this.entityType, gitSyncEntity.entityType) &&
        Objects.equals(this.entityIdentifier, gitSyncEntity.entityIdentifier) &&
        Objects.equals(this.gitConnectorId, gitSyncEntity.gitConnectorId) &&
        Objects.equals(this.repoUrl, gitSyncEntity.repoUrl) &&
        Objects.equals(this.branch, gitSyncEntity.branch) &&
        Objects.equals(this.folderPath, gitSyncEntity.folderPath) &&
        Objects.equals(this.entityGitPath, gitSyncEntity.entityGitPath) &&
        Objects.equals(this.repoProviderType, gitSyncEntity.repoProviderType) &&
        Objects.equals(this.entityReference, gitSyncEntity.entityReference) &&
        Objects.equals(this.accountId, gitSyncEntity.accountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityName, entityType, entityIdentifier, gitConnectorId, repoUrl, branch, folderPath, entityGitPath, repoProviderType, entityReference, accountId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitSyncEntity {\n");
    
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityIdentifier: ").append(toIndentedString(entityIdentifier)).append("\n");
    sb.append("    gitConnectorId: ").append(toIndentedString(gitConnectorId)).append("\n");
    sb.append("    repoUrl: ").append(toIndentedString(repoUrl)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    folderPath: ").append(toIndentedString(folderPath)).append("\n");
    sb.append("    entityGitPath: ").append(toIndentedString(entityGitPath)).append("\n");
    sb.append("    repoProviderType: ").append(toIndentedString(repoProviderType)).append("\n");
    sb.append("    entityReference: ").append(toIndentedString(entityReference)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
