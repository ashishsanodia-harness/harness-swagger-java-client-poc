/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AdviserIssuer;
import io.swagger.client.model.AdviserIssuerOrBuilder;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.IssuedBy;
import io.swagger.client.model.ManualIssuer;
import io.swagger.client.model.ManualIssuerOrBuilder;
import io.swagger.client.model.ParserIssuedBy;
import io.swagger.client.model.TimeoutIssuer;
import io.swagger.client.model.TimeoutIssuerOrBuilder;
import io.swagger.client.model.TimestampOrBuilder;
import io.swagger.client.model.TriggerIssuer;
import io.swagger.client.model.TriggerIssuerOrBuilder;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * IssuedBy
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class IssuedBy {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  @SerializedName("triggerIssuer")
  private TriggerIssuer triggerIssuer = null;

  @SerializedName("adviserIssuer")
  private AdviserIssuer adviserIssuer = null;

  @SerializedName("adviserIssuerOrBuilder")
  private AdviserIssuerOrBuilder adviserIssuerOrBuilder = null;

  @SerializedName("timeoutIssuer")
  private TimeoutIssuer timeoutIssuer = null;

  @SerializedName("timeoutIssuerOrBuilder")
  private TimeoutIssuerOrBuilder timeoutIssuerOrBuilder = null;

  @SerializedName("triggerIssuerOrBuilder")
  private TriggerIssuerOrBuilder triggerIssuerOrBuilder = null;

  /**
   * Gets or Sets issuerCase
   */
  @JsonAdapter(IssuerCaseEnum.Adapter.class)
  public enum IssuerCaseEnum {
    MANUALISSUER("MANUALISSUER"),
    ADVISERISSUER("ADVISERISSUER"),
    TIMEOUTISSUER("TIMEOUTISSUER"),
    TRIGGERISSUER("TRIGGERISSUER"),
    ISSUER_NOT_SET("ISSUER_NOT_SET");

    private String value;

    IssuerCaseEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IssuerCaseEnum fromValue(String input) {
      for (IssuerCaseEnum b : IssuerCaseEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IssuerCaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssuerCaseEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public IssuerCaseEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return IssuerCaseEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("issuerCase")
  private IssuerCaseEnum issuerCase = null;

  @SerializedName("issueTime")
  private Timestamp issueTime = null;

  @SerializedName("issueTimeOrBuilder")
  private TimestampOrBuilder issueTimeOrBuilder = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserIssuedBy parserForType = null;

  @SerializedName("defaultInstanceForType")
  private IssuedBy defaultInstanceForType = null;

  @SerializedName("manualIssuer")
  private ManualIssuer manualIssuer = null;

  @SerializedName("manualIssuerOrBuilder")
  private ManualIssuerOrBuilder manualIssuerOrBuilder = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public IssuedBy unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public IssuedBy initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public IssuedBy triggerIssuer(TriggerIssuer triggerIssuer) {
    this.triggerIssuer = triggerIssuer;
    return this;
  }

   /**
   * Get triggerIssuer
   * @return triggerIssuer
  **/
  @Schema(description = "")
  public TriggerIssuer getTriggerIssuer() {
    return triggerIssuer;
  }

  public void setTriggerIssuer(TriggerIssuer triggerIssuer) {
    this.triggerIssuer = triggerIssuer;
  }

  public IssuedBy adviserIssuer(AdviserIssuer adviserIssuer) {
    this.adviserIssuer = adviserIssuer;
    return this;
  }

   /**
   * Get adviserIssuer
   * @return adviserIssuer
  **/
  @Schema(description = "")
  public AdviserIssuer getAdviserIssuer() {
    return adviserIssuer;
  }

  public void setAdviserIssuer(AdviserIssuer adviserIssuer) {
    this.adviserIssuer = adviserIssuer;
  }

  public IssuedBy adviserIssuerOrBuilder(AdviserIssuerOrBuilder adviserIssuerOrBuilder) {
    this.adviserIssuerOrBuilder = adviserIssuerOrBuilder;
    return this;
  }

   /**
   * Get adviserIssuerOrBuilder
   * @return adviserIssuerOrBuilder
  **/
  @Schema(description = "")
  public AdviserIssuerOrBuilder getAdviserIssuerOrBuilder() {
    return adviserIssuerOrBuilder;
  }

  public void setAdviserIssuerOrBuilder(AdviserIssuerOrBuilder adviserIssuerOrBuilder) {
    this.adviserIssuerOrBuilder = adviserIssuerOrBuilder;
  }

  public IssuedBy timeoutIssuer(TimeoutIssuer timeoutIssuer) {
    this.timeoutIssuer = timeoutIssuer;
    return this;
  }

   /**
   * Get timeoutIssuer
   * @return timeoutIssuer
  **/
  @Schema(description = "")
  public TimeoutIssuer getTimeoutIssuer() {
    return timeoutIssuer;
  }

  public void setTimeoutIssuer(TimeoutIssuer timeoutIssuer) {
    this.timeoutIssuer = timeoutIssuer;
  }

  public IssuedBy timeoutIssuerOrBuilder(TimeoutIssuerOrBuilder timeoutIssuerOrBuilder) {
    this.timeoutIssuerOrBuilder = timeoutIssuerOrBuilder;
    return this;
  }

   /**
   * Get timeoutIssuerOrBuilder
   * @return timeoutIssuerOrBuilder
  **/
  @Schema(description = "")
  public TimeoutIssuerOrBuilder getTimeoutIssuerOrBuilder() {
    return timeoutIssuerOrBuilder;
  }

  public void setTimeoutIssuerOrBuilder(TimeoutIssuerOrBuilder timeoutIssuerOrBuilder) {
    this.timeoutIssuerOrBuilder = timeoutIssuerOrBuilder;
  }

  public IssuedBy triggerIssuerOrBuilder(TriggerIssuerOrBuilder triggerIssuerOrBuilder) {
    this.triggerIssuerOrBuilder = triggerIssuerOrBuilder;
    return this;
  }

   /**
   * Get triggerIssuerOrBuilder
   * @return triggerIssuerOrBuilder
  **/
  @Schema(description = "")
  public TriggerIssuerOrBuilder getTriggerIssuerOrBuilder() {
    return triggerIssuerOrBuilder;
  }

  public void setTriggerIssuerOrBuilder(TriggerIssuerOrBuilder triggerIssuerOrBuilder) {
    this.triggerIssuerOrBuilder = triggerIssuerOrBuilder;
  }

  public IssuedBy issuerCase(IssuerCaseEnum issuerCase) {
    this.issuerCase = issuerCase;
    return this;
  }

   /**
   * Get issuerCase
   * @return issuerCase
  **/
  @Schema(description = "")
  public IssuerCaseEnum getIssuerCase() {
    return issuerCase;
  }

  public void setIssuerCase(IssuerCaseEnum issuerCase) {
    this.issuerCase = issuerCase;
  }

  public IssuedBy issueTime(Timestamp issueTime) {
    this.issueTime = issueTime;
    return this;
  }

   /**
   * Get issueTime
   * @return issueTime
  **/
  @Schema(description = "")
  public Timestamp getIssueTime() {
    return issueTime;
  }

  public void setIssueTime(Timestamp issueTime) {
    this.issueTime = issueTime;
  }

  public IssuedBy issueTimeOrBuilder(TimestampOrBuilder issueTimeOrBuilder) {
    this.issueTimeOrBuilder = issueTimeOrBuilder;
    return this;
  }

   /**
   * Get issueTimeOrBuilder
   * @return issueTimeOrBuilder
  **/
  @Schema(description = "")
  public TimestampOrBuilder getIssueTimeOrBuilder() {
    return issueTimeOrBuilder;
  }

  public void setIssueTimeOrBuilder(TimestampOrBuilder issueTimeOrBuilder) {
    this.issueTimeOrBuilder = issueTimeOrBuilder;
  }

  public IssuedBy serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public IssuedBy parserForType(ParserIssuedBy parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserIssuedBy getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserIssuedBy parserForType) {
    this.parserForType = parserForType;
  }

  public IssuedBy defaultInstanceForType(IssuedBy defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public IssuedBy getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(IssuedBy defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public IssuedBy manualIssuer(ManualIssuer manualIssuer) {
    this.manualIssuer = manualIssuer;
    return this;
  }

   /**
   * Get manualIssuer
   * @return manualIssuer
  **/
  @Schema(description = "")
  public ManualIssuer getManualIssuer() {
    return manualIssuer;
  }

  public void setManualIssuer(ManualIssuer manualIssuer) {
    this.manualIssuer = manualIssuer;
  }

  public IssuedBy manualIssuerOrBuilder(ManualIssuerOrBuilder manualIssuerOrBuilder) {
    this.manualIssuerOrBuilder = manualIssuerOrBuilder;
    return this;
  }

   /**
   * Get manualIssuerOrBuilder
   * @return manualIssuerOrBuilder
  **/
  @Schema(description = "")
  public ManualIssuerOrBuilder getManualIssuerOrBuilder() {
    return manualIssuerOrBuilder;
  }

  public void setManualIssuerOrBuilder(ManualIssuerOrBuilder manualIssuerOrBuilder) {
    this.manualIssuerOrBuilder = manualIssuerOrBuilder;
  }

  public IssuedBy allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public IssuedBy putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public IssuedBy initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public IssuedBy descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public IssuedBy memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssuedBy issuedBy = (IssuedBy) o;
    return Objects.equals(this.unknownFields, issuedBy.unknownFields) &&
        Objects.equals(this.initialized, issuedBy.initialized) &&
        Objects.equals(this.triggerIssuer, issuedBy.triggerIssuer) &&
        Objects.equals(this.adviserIssuer, issuedBy.adviserIssuer) &&
        Objects.equals(this.adviserIssuerOrBuilder, issuedBy.adviserIssuerOrBuilder) &&
        Objects.equals(this.timeoutIssuer, issuedBy.timeoutIssuer) &&
        Objects.equals(this.timeoutIssuerOrBuilder, issuedBy.timeoutIssuerOrBuilder) &&
        Objects.equals(this.triggerIssuerOrBuilder, issuedBy.triggerIssuerOrBuilder) &&
        Objects.equals(this.issuerCase, issuedBy.issuerCase) &&
        Objects.equals(this.issueTime, issuedBy.issueTime) &&
        Objects.equals(this.issueTimeOrBuilder, issuedBy.issueTimeOrBuilder) &&
        Objects.equals(this.serializedSize, issuedBy.serializedSize) &&
        Objects.equals(this.parserForType, issuedBy.parserForType) &&
        Objects.equals(this.defaultInstanceForType, issuedBy.defaultInstanceForType) &&
        Objects.equals(this.manualIssuer, issuedBy.manualIssuer) &&
        Objects.equals(this.manualIssuerOrBuilder, issuedBy.manualIssuerOrBuilder) &&
        Objects.equals(this.allFields, issuedBy.allFields) &&
        Objects.equals(this.initializationErrorString, issuedBy.initializationErrorString) &&
        Objects.equals(this.descriptorForType, issuedBy.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, issuedBy.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, triggerIssuer, adviserIssuer, adviserIssuerOrBuilder, timeoutIssuer, timeoutIssuerOrBuilder, triggerIssuerOrBuilder, issuerCase, issueTime, issueTimeOrBuilder, serializedSize, parserForType, defaultInstanceForType, manualIssuer, manualIssuerOrBuilder, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssuedBy {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    triggerIssuer: ").append(toIndentedString(triggerIssuer)).append("\n");
    sb.append("    adviserIssuer: ").append(toIndentedString(adviserIssuer)).append("\n");
    sb.append("    adviserIssuerOrBuilder: ").append(toIndentedString(adviserIssuerOrBuilder)).append("\n");
    sb.append("    timeoutIssuer: ").append(toIndentedString(timeoutIssuer)).append("\n");
    sb.append("    timeoutIssuerOrBuilder: ").append(toIndentedString(timeoutIssuerOrBuilder)).append("\n");
    sb.append("    triggerIssuerOrBuilder: ").append(toIndentedString(triggerIssuerOrBuilder)).append("\n");
    sb.append("    issuerCase: ").append(toIndentedString(issuerCase)).append("\n");
    sb.append("    issueTime: ").append(toIndentedString(issueTime)).append("\n");
    sb.append("    issueTimeOrBuilder: ").append(toIndentedString(issueTimeOrBuilder)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    manualIssuer: ").append(toIndentedString(manualIssuer)).append("\n");
    sb.append("    manualIssuerOrBuilder: ").append(toIndentedString(manualIssuerOrBuilder)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
