/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConnectorWrapperResponse;
import io.swagger.client.model.PipelineWrapperResponse;
import io.swagger.client.model.PreFlightErrorInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This contains the response of a Preflight Check for a Pipeline.
 */
@Schema(description = "This contains the response of a Preflight Check for a Pipeline.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class PreFlightDTO {
  @SerializedName("pipelineInputWrapperResponse")
  private PipelineWrapperResponse pipelineInputWrapperResponse = null;

  @SerializedName("connectorWrapperResponse")
  private ConnectorWrapperResponse connectorWrapperResponse = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCESS("SUCCESS"),
    FAILURE("FAILURE"),
    IN_PROGRESS("IN_PROGRESS"),
    UNKNOWN("UNKNOWN");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("errorInfo")
  private PreFlightErrorInfo errorInfo = null;

  public PreFlightDTO pipelineInputWrapperResponse(PipelineWrapperResponse pipelineInputWrapperResponse) {
    this.pipelineInputWrapperResponse = pipelineInputWrapperResponse;
    return this;
  }

   /**
   * Get pipelineInputWrapperResponse
   * @return pipelineInputWrapperResponse
  **/
  @Schema(description = "")
  public PipelineWrapperResponse getPipelineInputWrapperResponse() {
    return pipelineInputWrapperResponse;
  }

  public void setPipelineInputWrapperResponse(PipelineWrapperResponse pipelineInputWrapperResponse) {
    this.pipelineInputWrapperResponse = pipelineInputWrapperResponse;
  }

  public PreFlightDTO connectorWrapperResponse(ConnectorWrapperResponse connectorWrapperResponse) {
    this.connectorWrapperResponse = connectorWrapperResponse;
    return this;
  }

   /**
   * Get connectorWrapperResponse
   * @return connectorWrapperResponse
  **/
  @Schema(description = "")
  public ConnectorWrapperResponse getConnectorWrapperResponse() {
    return connectorWrapperResponse;
  }

  public void setConnectorWrapperResponse(ConnectorWrapperResponse connectorWrapperResponse) {
    this.connectorWrapperResponse = connectorWrapperResponse;
  }

  public PreFlightDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public PreFlightDTO errorInfo(PreFlightErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

   /**
   * Get errorInfo
   * @return errorInfo
  **/
  @Schema(description = "")
  public PreFlightErrorInfo getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(PreFlightErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PreFlightDTO preFlightDTO = (PreFlightDTO) o;
    return Objects.equals(this.pipelineInputWrapperResponse, preFlightDTO.pipelineInputWrapperResponse) &&
        Objects.equals(this.connectorWrapperResponse, preFlightDTO.connectorWrapperResponse) &&
        Objects.equals(this.status, preFlightDTO.status) &&
        Objects.equals(this.errorInfo, preFlightDTO.errorInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pipelineInputWrapperResponse, connectorWrapperResponse, status, errorInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PreFlightDTO {\n");
    
    sb.append("    pipelineInputWrapperResponse: ").append(toIndentedString(pipelineInputWrapperResponse)).append("\n");
    sb.append("    connectorWrapperResponse: ").append(toIndentedString(connectorWrapperResponse)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
