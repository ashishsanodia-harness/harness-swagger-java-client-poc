/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.DescriptorProto;
import io.swagger.client.model.DescriptorProtoOrBuilder;
import io.swagger.client.model.EnumDescriptorProto;
import io.swagger.client.model.EnumDescriptorProtoOrBuilder;
import io.swagger.client.model.FieldDescriptorProto;
import io.swagger.client.model.FieldDescriptorProtoOrBuilder;
import io.swagger.client.model.FileDescriptorProto;
import io.swagger.client.model.FileOptions;
import io.swagger.client.model.FileOptionsOrBuilder;
import io.swagger.client.model.ParserFileDescriptorProto;
import io.swagger.client.model.ServiceDescriptorProto;
import io.swagger.client.model.ServiceDescriptorProtoOrBuilder;
import io.swagger.client.model.SourceCodeInfo;
import io.swagger.client.model.SourceCodeInfoOrBuilder;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * FileDescriptorProto
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class FileDescriptorProto {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  @SerializedName("options")
  private FileOptions options = null;

  @SerializedName("nameBytes")
  private ByteString nameBytes = null;

  @SerializedName("packageBytes")
  private ByteString packageBytes = null;

  @SerializedName("dependencyList")
  private List<String> dependencyList = null;

  @SerializedName("publicDependencyList")
  private List<Integer> publicDependencyList = null;

  @SerializedName("weakDependencyList")
  private List<Integer> weakDependencyList = null;

  @SerializedName("weakDependencyCount")
  private Integer weakDependencyCount = null;

  @SerializedName("messageTypeList")
  private List<DescriptorProto> messageTypeList = null;

  @SerializedName("messageTypeOrBuilderList")
  private List<DescriptorProtoOrBuilder> messageTypeOrBuilderList = null;

  @SerializedName("enumTypeList")
  private List<EnumDescriptorProto> enumTypeList = null;

  @SerializedName("enumTypeOrBuilderList")
  private List<EnumDescriptorProtoOrBuilder> enumTypeOrBuilderList = null;

  @SerializedName("serviceList")
  private List<ServiceDescriptorProto> serviceList = null;

  @SerializedName("serviceOrBuilderList")
  private List<ServiceDescriptorProtoOrBuilder> serviceOrBuilderList = null;

  @SerializedName("enumTypeCount")
  private Integer enumTypeCount = null;

  @SerializedName("extensionCount")
  private Integer extensionCount = null;

  @SerializedName("syntax")
  private String syntax = null;

  @SerializedName("publicDependencyCount")
  private Integer publicDependencyCount = null;

  @SerializedName("dependencyCount")
  private Integer dependencyCount = null;

  @SerializedName("messageTypeCount")
  private Integer messageTypeCount = null;

  @SerializedName("serviceCount")
  private Integer serviceCount = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserFileDescriptorProto parserForType = null;

  @SerializedName("defaultInstanceForType")
  private FileDescriptorProto defaultInstanceForType = null;

  @SerializedName("extensionList")
  private List<FieldDescriptorProto> extensionList = null;

  @SerializedName("extensionOrBuilderList")
  private List<FieldDescriptorProtoOrBuilder> extensionOrBuilderList = null;

  @SerializedName("optionsOrBuilder")
  private FileOptionsOrBuilder optionsOrBuilder = null;

  @SerializedName("sourceCodeInfo")
  private SourceCodeInfo sourceCodeInfo = null;

  @SerializedName("sourceCodeInfoOrBuilder")
  private SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder = null;

  @SerializedName("syntaxBytes")
  private ByteString syntaxBytes = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("package")
  private String _package = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public FileDescriptorProto unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public FileDescriptorProto initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public FileDescriptorProto options(FileOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public FileOptions getOptions() {
    return options;
  }

  public void setOptions(FileOptions options) {
    this.options = options;
  }

  public FileDescriptorProto nameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
    return this;
  }

   /**
   * Get nameBytes
   * @return nameBytes
  **/
  @Schema(description = "")
  public ByteString getNameBytes() {
    return nameBytes;
  }

  public void setNameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
  }

  public FileDescriptorProto packageBytes(ByteString packageBytes) {
    this.packageBytes = packageBytes;
    return this;
  }

   /**
   * Get packageBytes
   * @return packageBytes
  **/
  @Schema(description = "")
  public ByteString getPackageBytes() {
    return packageBytes;
  }

  public void setPackageBytes(ByteString packageBytes) {
    this.packageBytes = packageBytes;
  }

  public FileDescriptorProto dependencyList(List<String> dependencyList) {
    this.dependencyList = dependencyList;
    return this;
  }

  public FileDescriptorProto addDependencyListItem(String dependencyListItem) {
    if (this.dependencyList == null) {
      this.dependencyList = new ArrayList<String>();
    }
    this.dependencyList.add(dependencyListItem);
    return this;
  }

   /**
   * Get dependencyList
   * @return dependencyList
  **/
  @Schema(description = "")
  public List<String> getDependencyList() {
    return dependencyList;
  }

  public void setDependencyList(List<String> dependencyList) {
    this.dependencyList = dependencyList;
  }

  public FileDescriptorProto publicDependencyList(List<Integer> publicDependencyList) {
    this.publicDependencyList = publicDependencyList;
    return this;
  }

  public FileDescriptorProto addPublicDependencyListItem(Integer publicDependencyListItem) {
    if (this.publicDependencyList == null) {
      this.publicDependencyList = new ArrayList<Integer>();
    }
    this.publicDependencyList.add(publicDependencyListItem);
    return this;
  }

   /**
   * Get publicDependencyList
   * @return publicDependencyList
  **/
  @Schema(description = "")
  public List<Integer> getPublicDependencyList() {
    return publicDependencyList;
  }

  public void setPublicDependencyList(List<Integer> publicDependencyList) {
    this.publicDependencyList = publicDependencyList;
  }

  public FileDescriptorProto weakDependencyList(List<Integer> weakDependencyList) {
    this.weakDependencyList = weakDependencyList;
    return this;
  }

  public FileDescriptorProto addWeakDependencyListItem(Integer weakDependencyListItem) {
    if (this.weakDependencyList == null) {
      this.weakDependencyList = new ArrayList<Integer>();
    }
    this.weakDependencyList.add(weakDependencyListItem);
    return this;
  }

   /**
   * Get weakDependencyList
   * @return weakDependencyList
  **/
  @Schema(description = "")
  public List<Integer> getWeakDependencyList() {
    return weakDependencyList;
  }

  public void setWeakDependencyList(List<Integer> weakDependencyList) {
    this.weakDependencyList = weakDependencyList;
  }

  public FileDescriptorProto weakDependencyCount(Integer weakDependencyCount) {
    this.weakDependencyCount = weakDependencyCount;
    return this;
  }

   /**
   * Get weakDependencyCount
   * @return weakDependencyCount
  **/
  @Schema(description = "")
  public Integer getWeakDependencyCount() {
    return weakDependencyCount;
  }

  public void setWeakDependencyCount(Integer weakDependencyCount) {
    this.weakDependencyCount = weakDependencyCount;
  }

  public FileDescriptorProto messageTypeList(List<DescriptorProto> messageTypeList) {
    this.messageTypeList = messageTypeList;
    return this;
  }

  public FileDescriptorProto addMessageTypeListItem(DescriptorProto messageTypeListItem) {
    if (this.messageTypeList == null) {
      this.messageTypeList = new ArrayList<DescriptorProto>();
    }
    this.messageTypeList.add(messageTypeListItem);
    return this;
  }

   /**
   * Get messageTypeList
   * @return messageTypeList
  **/
  @Schema(description = "")
  public List<DescriptorProto> getMessageTypeList() {
    return messageTypeList;
  }

  public void setMessageTypeList(List<DescriptorProto> messageTypeList) {
    this.messageTypeList = messageTypeList;
  }

  public FileDescriptorProto messageTypeOrBuilderList(List<DescriptorProtoOrBuilder> messageTypeOrBuilderList) {
    this.messageTypeOrBuilderList = messageTypeOrBuilderList;
    return this;
  }

  public FileDescriptorProto addMessageTypeOrBuilderListItem(DescriptorProtoOrBuilder messageTypeOrBuilderListItem) {
    if (this.messageTypeOrBuilderList == null) {
      this.messageTypeOrBuilderList = new ArrayList<DescriptorProtoOrBuilder>();
    }
    this.messageTypeOrBuilderList.add(messageTypeOrBuilderListItem);
    return this;
  }

   /**
   * Get messageTypeOrBuilderList
   * @return messageTypeOrBuilderList
  **/
  @Schema(description = "")
  public List<DescriptorProtoOrBuilder> getMessageTypeOrBuilderList() {
    return messageTypeOrBuilderList;
  }

  public void setMessageTypeOrBuilderList(List<DescriptorProtoOrBuilder> messageTypeOrBuilderList) {
    this.messageTypeOrBuilderList = messageTypeOrBuilderList;
  }

  public FileDescriptorProto enumTypeList(List<EnumDescriptorProto> enumTypeList) {
    this.enumTypeList = enumTypeList;
    return this;
  }

  public FileDescriptorProto addEnumTypeListItem(EnumDescriptorProto enumTypeListItem) {
    if (this.enumTypeList == null) {
      this.enumTypeList = new ArrayList<EnumDescriptorProto>();
    }
    this.enumTypeList.add(enumTypeListItem);
    return this;
  }

   /**
   * Get enumTypeList
   * @return enumTypeList
  **/
  @Schema(description = "")
  public List<EnumDescriptorProto> getEnumTypeList() {
    return enumTypeList;
  }

  public void setEnumTypeList(List<EnumDescriptorProto> enumTypeList) {
    this.enumTypeList = enumTypeList;
  }

  public FileDescriptorProto enumTypeOrBuilderList(List<EnumDescriptorProtoOrBuilder> enumTypeOrBuilderList) {
    this.enumTypeOrBuilderList = enumTypeOrBuilderList;
    return this;
  }

  public FileDescriptorProto addEnumTypeOrBuilderListItem(EnumDescriptorProtoOrBuilder enumTypeOrBuilderListItem) {
    if (this.enumTypeOrBuilderList == null) {
      this.enumTypeOrBuilderList = new ArrayList<EnumDescriptorProtoOrBuilder>();
    }
    this.enumTypeOrBuilderList.add(enumTypeOrBuilderListItem);
    return this;
  }

   /**
   * Get enumTypeOrBuilderList
   * @return enumTypeOrBuilderList
  **/
  @Schema(description = "")
  public List<EnumDescriptorProtoOrBuilder> getEnumTypeOrBuilderList() {
    return enumTypeOrBuilderList;
  }

  public void setEnumTypeOrBuilderList(List<EnumDescriptorProtoOrBuilder> enumTypeOrBuilderList) {
    this.enumTypeOrBuilderList = enumTypeOrBuilderList;
  }

  public FileDescriptorProto serviceList(List<ServiceDescriptorProto> serviceList) {
    this.serviceList = serviceList;
    return this;
  }

  public FileDescriptorProto addServiceListItem(ServiceDescriptorProto serviceListItem) {
    if (this.serviceList == null) {
      this.serviceList = new ArrayList<ServiceDescriptorProto>();
    }
    this.serviceList.add(serviceListItem);
    return this;
  }

   /**
   * Get serviceList
   * @return serviceList
  **/
  @Schema(description = "")
  public List<ServiceDescriptorProto> getServiceList() {
    return serviceList;
  }

  public void setServiceList(List<ServiceDescriptorProto> serviceList) {
    this.serviceList = serviceList;
  }

  public FileDescriptorProto serviceOrBuilderList(List<ServiceDescriptorProtoOrBuilder> serviceOrBuilderList) {
    this.serviceOrBuilderList = serviceOrBuilderList;
    return this;
  }

  public FileDescriptorProto addServiceOrBuilderListItem(ServiceDescriptorProtoOrBuilder serviceOrBuilderListItem) {
    if (this.serviceOrBuilderList == null) {
      this.serviceOrBuilderList = new ArrayList<ServiceDescriptorProtoOrBuilder>();
    }
    this.serviceOrBuilderList.add(serviceOrBuilderListItem);
    return this;
  }

   /**
   * Get serviceOrBuilderList
   * @return serviceOrBuilderList
  **/
  @Schema(description = "")
  public List<ServiceDescriptorProtoOrBuilder> getServiceOrBuilderList() {
    return serviceOrBuilderList;
  }

  public void setServiceOrBuilderList(List<ServiceDescriptorProtoOrBuilder> serviceOrBuilderList) {
    this.serviceOrBuilderList = serviceOrBuilderList;
  }

  public FileDescriptorProto enumTypeCount(Integer enumTypeCount) {
    this.enumTypeCount = enumTypeCount;
    return this;
  }

   /**
   * Get enumTypeCount
   * @return enumTypeCount
  **/
  @Schema(description = "")
  public Integer getEnumTypeCount() {
    return enumTypeCount;
  }

  public void setEnumTypeCount(Integer enumTypeCount) {
    this.enumTypeCount = enumTypeCount;
  }

  public FileDescriptorProto extensionCount(Integer extensionCount) {
    this.extensionCount = extensionCount;
    return this;
  }

   /**
   * Get extensionCount
   * @return extensionCount
  **/
  @Schema(description = "")
  public Integer getExtensionCount() {
    return extensionCount;
  }

  public void setExtensionCount(Integer extensionCount) {
    this.extensionCount = extensionCount;
  }

  public FileDescriptorProto syntax(String syntax) {
    this.syntax = syntax;
    return this;
  }

   /**
   * Get syntax
   * @return syntax
  **/
  @Schema(description = "")
  public String getSyntax() {
    return syntax;
  }

  public void setSyntax(String syntax) {
    this.syntax = syntax;
  }

  public FileDescriptorProto publicDependencyCount(Integer publicDependencyCount) {
    this.publicDependencyCount = publicDependencyCount;
    return this;
  }

   /**
   * Get publicDependencyCount
   * @return publicDependencyCount
  **/
  @Schema(description = "")
  public Integer getPublicDependencyCount() {
    return publicDependencyCount;
  }

  public void setPublicDependencyCount(Integer publicDependencyCount) {
    this.publicDependencyCount = publicDependencyCount;
  }

  public FileDescriptorProto dependencyCount(Integer dependencyCount) {
    this.dependencyCount = dependencyCount;
    return this;
  }

   /**
   * Get dependencyCount
   * @return dependencyCount
  **/
  @Schema(description = "")
  public Integer getDependencyCount() {
    return dependencyCount;
  }

  public void setDependencyCount(Integer dependencyCount) {
    this.dependencyCount = dependencyCount;
  }

  public FileDescriptorProto messageTypeCount(Integer messageTypeCount) {
    this.messageTypeCount = messageTypeCount;
    return this;
  }

   /**
   * Get messageTypeCount
   * @return messageTypeCount
  **/
  @Schema(description = "")
  public Integer getMessageTypeCount() {
    return messageTypeCount;
  }

  public void setMessageTypeCount(Integer messageTypeCount) {
    this.messageTypeCount = messageTypeCount;
  }

  public FileDescriptorProto serviceCount(Integer serviceCount) {
    this.serviceCount = serviceCount;
    return this;
  }

   /**
   * Get serviceCount
   * @return serviceCount
  **/
  @Schema(description = "")
  public Integer getServiceCount() {
    return serviceCount;
  }

  public void setServiceCount(Integer serviceCount) {
    this.serviceCount = serviceCount;
  }

  public FileDescriptorProto serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public FileDescriptorProto parserForType(ParserFileDescriptorProto parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserFileDescriptorProto getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserFileDescriptorProto parserForType) {
    this.parserForType = parserForType;
  }

  public FileDescriptorProto defaultInstanceForType(FileDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public FileDescriptorProto getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(FileDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public FileDescriptorProto extensionList(List<FieldDescriptorProto> extensionList) {
    this.extensionList = extensionList;
    return this;
  }

  public FileDescriptorProto addExtensionListItem(FieldDescriptorProto extensionListItem) {
    if (this.extensionList == null) {
      this.extensionList = new ArrayList<FieldDescriptorProto>();
    }
    this.extensionList.add(extensionListItem);
    return this;
  }

   /**
   * Get extensionList
   * @return extensionList
  **/
  @Schema(description = "")
  public List<FieldDescriptorProto> getExtensionList() {
    return extensionList;
  }

  public void setExtensionList(List<FieldDescriptorProto> extensionList) {
    this.extensionList = extensionList;
  }

  public FileDescriptorProto extensionOrBuilderList(List<FieldDescriptorProtoOrBuilder> extensionOrBuilderList) {
    this.extensionOrBuilderList = extensionOrBuilderList;
    return this;
  }

  public FileDescriptorProto addExtensionOrBuilderListItem(FieldDescriptorProtoOrBuilder extensionOrBuilderListItem) {
    if (this.extensionOrBuilderList == null) {
      this.extensionOrBuilderList = new ArrayList<FieldDescriptorProtoOrBuilder>();
    }
    this.extensionOrBuilderList.add(extensionOrBuilderListItem);
    return this;
  }

   /**
   * Get extensionOrBuilderList
   * @return extensionOrBuilderList
  **/
  @Schema(description = "")
  public List<FieldDescriptorProtoOrBuilder> getExtensionOrBuilderList() {
    return extensionOrBuilderList;
  }

  public void setExtensionOrBuilderList(List<FieldDescriptorProtoOrBuilder> extensionOrBuilderList) {
    this.extensionOrBuilderList = extensionOrBuilderList;
  }

  public FileDescriptorProto optionsOrBuilder(FileOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
    return this;
  }

   /**
   * Get optionsOrBuilder
   * @return optionsOrBuilder
  **/
  @Schema(description = "")
  public FileOptionsOrBuilder getOptionsOrBuilder() {
    return optionsOrBuilder;
  }

  public void setOptionsOrBuilder(FileOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
  }

  public FileDescriptorProto sourceCodeInfo(SourceCodeInfo sourceCodeInfo) {
    this.sourceCodeInfo = sourceCodeInfo;
    return this;
  }

   /**
   * Get sourceCodeInfo
   * @return sourceCodeInfo
  **/
  @Schema(description = "")
  public SourceCodeInfo getSourceCodeInfo() {
    return sourceCodeInfo;
  }

  public void setSourceCodeInfo(SourceCodeInfo sourceCodeInfo) {
    this.sourceCodeInfo = sourceCodeInfo;
  }

  public FileDescriptorProto sourceCodeInfoOrBuilder(SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder) {
    this.sourceCodeInfoOrBuilder = sourceCodeInfoOrBuilder;
    return this;
  }

   /**
   * Get sourceCodeInfoOrBuilder
   * @return sourceCodeInfoOrBuilder
  **/
  @Schema(description = "")
  public SourceCodeInfoOrBuilder getSourceCodeInfoOrBuilder() {
    return sourceCodeInfoOrBuilder;
  }

  public void setSourceCodeInfoOrBuilder(SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder) {
    this.sourceCodeInfoOrBuilder = sourceCodeInfoOrBuilder;
  }

  public FileDescriptorProto syntaxBytes(ByteString syntaxBytes) {
    this.syntaxBytes = syntaxBytes;
    return this;
  }

   /**
   * Get syntaxBytes
   * @return syntaxBytes
  **/
  @Schema(description = "")
  public ByteString getSyntaxBytes() {
    return syntaxBytes;
  }

  public void setSyntaxBytes(ByteString syntaxBytes) {
    this.syntaxBytes = syntaxBytes;
  }

  public FileDescriptorProto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FileDescriptorProto _package(String _package) {
    this._package = _package;
    return this;
  }

   /**
   * Get _package
   * @return _package
  **/
  @Schema(description = "")
  public String getPackage() {
    return _package;
  }

  public void setPackage(String _package) {
    this._package = _package;
  }

  public FileDescriptorProto allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public FileDescriptorProto putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public FileDescriptorProto initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public FileDescriptorProto descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public FileDescriptorProto memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileDescriptorProto fileDescriptorProto = (FileDescriptorProto) o;
    return Objects.equals(this.unknownFields, fileDescriptorProto.unknownFields) &&
        Objects.equals(this.initialized, fileDescriptorProto.initialized) &&
        Objects.equals(this.options, fileDescriptorProto.options) &&
        Objects.equals(this.nameBytes, fileDescriptorProto.nameBytes) &&
        Objects.equals(this.packageBytes, fileDescriptorProto.packageBytes) &&
        Objects.equals(this.dependencyList, fileDescriptorProto.dependencyList) &&
        Objects.equals(this.publicDependencyList, fileDescriptorProto.publicDependencyList) &&
        Objects.equals(this.weakDependencyList, fileDescriptorProto.weakDependencyList) &&
        Objects.equals(this.weakDependencyCount, fileDescriptorProto.weakDependencyCount) &&
        Objects.equals(this.messageTypeList, fileDescriptorProto.messageTypeList) &&
        Objects.equals(this.messageTypeOrBuilderList, fileDescriptorProto.messageTypeOrBuilderList) &&
        Objects.equals(this.enumTypeList, fileDescriptorProto.enumTypeList) &&
        Objects.equals(this.enumTypeOrBuilderList, fileDescriptorProto.enumTypeOrBuilderList) &&
        Objects.equals(this.serviceList, fileDescriptorProto.serviceList) &&
        Objects.equals(this.serviceOrBuilderList, fileDescriptorProto.serviceOrBuilderList) &&
        Objects.equals(this.enumTypeCount, fileDescriptorProto.enumTypeCount) &&
        Objects.equals(this.extensionCount, fileDescriptorProto.extensionCount) &&
        Objects.equals(this.syntax, fileDescriptorProto.syntax) &&
        Objects.equals(this.publicDependencyCount, fileDescriptorProto.publicDependencyCount) &&
        Objects.equals(this.dependencyCount, fileDescriptorProto.dependencyCount) &&
        Objects.equals(this.messageTypeCount, fileDescriptorProto.messageTypeCount) &&
        Objects.equals(this.serviceCount, fileDescriptorProto.serviceCount) &&
        Objects.equals(this.serializedSize, fileDescriptorProto.serializedSize) &&
        Objects.equals(this.parserForType, fileDescriptorProto.parserForType) &&
        Objects.equals(this.defaultInstanceForType, fileDescriptorProto.defaultInstanceForType) &&
        Objects.equals(this.extensionList, fileDescriptorProto.extensionList) &&
        Objects.equals(this.extensionOrBuilderList, fileDescriptorProto.extensionOrBuilderList) &&
        Objects.equals(this.optionsOrBuilder, fileDescriptorProto.optionsOrBuilder) &&
        Objects.equals(this.sourceCodeInfo, fileDescriptorProto.sourceCodeInfo) &&
        Objects.equals(this.sourceCodeInfoOrBuilder, fileDescriptorProto.sourceCodeInfoOrBuilder) &&
        Objects.equals(this.syntaxBytes, fileDescriptorProto.syntaxBytes) &&
        Objects.equals(this.name, fileDescriptorProto.name) &&
        Objects.equals(this._package, fileDescriptorProto._package) &&
        Objects.equals(this.allFields, fileDescriptorProto.allFields) &&
        Objects.equals(this.initializationErrorString, fileDescriptorProto.initializationErrorString) &&
        Objects.equals(this.descriptorForType, fileDescriptorProto.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, fileDescriptorProto.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, options, nameBytes, packageBytes, dependencyList, publicDependencyList, weakDependencyList, weakDependencyCount, messageTypeList, messageTypeOrBuilderList, enumTypeList, enumTypeOrBuilderList, serviceList, serviceOrBuilderList, enumTypeCount, extensionCount, syntax, publicDependencyCount, dependencyCount, messageTypeCount, serviceCount, serializedSize, parserForType, defaultInstanceForType, extensionList, extensionOrBuilderList, optionsOrBuilder, sourceCodeInfo, sourceCodeInfoOrBuilder, syntaxBytes, name, _package, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileDescriptorProto {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    nameBytes: ").append(toIndentedString(nameBytes)).append("\n");
    sb.append("    packageBytes: ").append(toIndentedString(packageBytes)).append("\n");
    sb.append("    dependencyList: ").append(toIndentedString(dependencyList)).append("\n");
    sb.append("    publicDependencyList: ").append(toIndentedString(publicDependencyList)).append("\n");
    sb.append("    weakDependencyList: ").append(toIndentedString(weakDependencyList)).append("\n");
    sb.append("    weakDependencyCount: ").append(toIndentedString(weakDependencyCount)).append("\n");
    sb.append("    messageTypeList: ").append(toIndentedString(messageTypeList)).append("\n");
    sb.append("    messageTypeOrBuilderList: ").append(toIndentedString(messageTypeOrBuilderList)).append("\n");
    sb.append("    enumTypeList: ").append(toIndentedString(enumTypeList)).append("\n");
    sb.append("    enumTypeOrBuilderList: ").append(toIndentedString(enumTypeOrBuilderList)).append("\n");
    sb.append("    serviceList: ").append(toIndentedString(serviceList)).append("\n");
    sb.append("    serviceOrBuilderList: ").append(toIndentedString(serviceOrBuilderList)).append("\n");
    sb.append("    enumTypeCount: ").append(toIndentedString(enumTypeCount)).append("\n");
    sb.append("    extensionCount: ").append(toIndentedString(extensionCount)).append("\n");
    sb.append("    syntax: ").append(toIndentedString(syntax)).append("\n");
    sb.append("    publicDependencyCount: ").append(toIndentedString(publicDependencyCount)).append("\n");
    sb.append("    dependencyCount: ").append(toIndentedString(dependencyCount)).append("\n");
    sb.append("    messageTypeCount: ").append(toIndentedString(messageTypeCount)).append("\n");
    sb.append("    serviceCount: ").append(toIndentedString(serviceCount)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    extensionList: ").append(toIndentedString(extensionList)).append("\n");
    sb.append("    extensionOrBuilderList: ").append(toIndentedString(extensionOrBuilderList)).append("\n");
    sb.append("    optionsOrBuilder: ").append(toIndentedString(optionsOrBuilder)).append("\n");
    sb.append("    sourceCodeInfo: ").append(toIndentedString(sourceCodeInfo)).append("\n");
    sb.append("    sourceCodeInfoOrBuilder: ").append(toIndentedString(sourceCodeInfoOrBuilder)).append("\n");
    sb.append("    syntaxBytes: ").append(toIndentedString(syntaxBytes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
