/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SourceCodeManagerAuthentication;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This contains details of Source Code Manager
 */
@Schema(description = "This contains details of Source Code Manager")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")

public class SourceCodeManager {
  @SerializedName("id")
  private String id = null;

  @SerializedName("userIdentifier")
  private String userIdentifier = null;

  @SerializedName("accountIdentifier")
  private String accountIdentifier = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("lastModifiedAt")
  private Long lastModifiedAt = null;

  @SerializedName("authentication")
  private SourceCodeManagerAuthentication authentication = null;

  /**
   * Type of SCM
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BITBUCKET("BITBUCKET"),
    GITHUB("GITHUB"),
    GITLAB("GITLAB"),
    AWS_CODE_COMMIT("AWS_CODE_COMMIT"),
    AZURE_DEV_OPS("AZURE_DEV_OPS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  public SourceCodeManager() {
    this.type = this.getClass().getSimpleName();
  }
  public SourceCodeManager id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Source Code Manager Identifier
   * @return id
  **/
  @Schema(description = "Source Code Manager Identifier")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SourceCodeManager userIdentifier(String userIdentifier) {
    this.userIdentifier = userIdentifier;
    return this;
  }

   /**
   * Id of the User
   * @return userIdentifier
  **/
  @Schema(description = "Id of the User")
  public String getUserIdentifier() {
    return userIdentifier;
  }

  public void setUserIdentifier(String userIdentifier) {
    this.userIdentifier = userIdentifier;
  }

  public SourceCodeManager accountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Account Identifier for the Entity
   * @return accountIdentifier
  **/
  @Schema(description = "Account Identifier for the Entity")
  public String getAccountIdentifier() {
    return accountIdentifier;
  }

  public void setAccountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
  }

  public SourceCodeManager name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of Source Code Manager
   * @return name
  **/
  @Schema(required = true, description = "Name of Source Code Manager")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SourceCodeManager createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Time at which this Source Code Manager was created
   * @return createdAt
  **/
  @Schema(description = "Time at which this Source Code Manager was created")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public SourceCodeManager lastModifiedAt(Long lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

   /**
   * Time at which this Source Code Manager was last Updated
   * @return lastModifiedAt
  **/
  @Schema(description = "Time at which this Source Code Manager was last Updated")
  public Long getLastModifiedAt() {
    return lastModifiedAt;
  }

  public void setLastModifiedAt(Long lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
  }

  public SourceCodeManager authentication(SourceCodeManagerAuthentication authentication) {
    this.authentication = authentication;
    return this;
  }

   /**
   * Get authentication
   * @return authentication
  **/
  @Schema(description = "")
  public SourceCodeManagerAuthentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(SourceCodeManagerAuthentication authentication) {
    this.authentication = authentication;
  }

  public SourceCodeManager type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of SCM
   * @return type
  **/
  @Schema(description = "Type of SCM")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceCodeManager sourceCodeManager = (SourceCodeManager) o;
    return Objects.equals(this.id, sourceCodeManager.id) &&
        Objects.equals(this.userIdentifier, sourceCodeManager.userIdentifier) &&
        Objects.equals(this.accountIdentifier, sourceCodeManager.accountIdentifier) &&
        Objects.equals(this.name, sourceCodeManager.name) &&
        Objects.equals(this.createdAt, sourceCodeManager.createdAt) &&
        Objects.equals(this.lastModifiedAt, sourceCodeManager.lastModifiedAt) &&
        Objects.equals(this.authentication, sourceCodeManager.authentication) &&
        Objects.equals(this.type, sourceCodeManager.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userIdentifier, accountIdentifier, name, createdAt, lastModifiedAt, authentication, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceCodeManager {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userIdentifier: ").append(toIndentedString(userIdentifier)).append("\n");
    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
