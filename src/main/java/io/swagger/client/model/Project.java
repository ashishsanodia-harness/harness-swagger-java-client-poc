/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * This is the Project Entity details defined in Harness
 */
@Schema(description = "This is the Project Entity details defined in Harness")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class Project {
  @SerializedName("orgIdentifier")
  private String orgIdentifier = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("color")
  private String color = null;

  /**
   * List of modules
   */
  @JsonAdapter(ModulesEnum.Adapter.class)
  public enum ModulesEnum {
    CD("CD"),
    CI("CI"),
    CV("CV"),
    CF("CF"),
    CE("CE"),
    CORE("CORE"),
    PMS("PMS"),
    TEMPLATESERVICE("TEMPLATESERVICE");

    private String value;

    ModulesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModulesEnum fromValue(String input) {
      for (ModulesEnum b : ModulesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModulesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModulesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ModulesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ModulesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("modules")
  private List<ModulesEnum> modules = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("tags")
  private Map<String, String> tags = null;

  public Project orgIdentifier(String orgIdentifier) {
    this.orgIdentifier = orgIdentifier;
    return this;
  }

   /**
   * Organization Identifier for the Entity
   * @return orgIdentifier
  **/
  @Schema(description = "Organization Identifier for the Entity")
  public String getOrgIdentifier() {
    return orgIdentifier;
  }

  public void setOrgIdentifier(String orgIdentifier) {
    this.orgIdentifier = orgIdentifier;
  }

  public Project identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Project Identifier for the Entity
   * @return identifier
  **/
  @Schema(description = "Project Identifier for the Entity")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public Project name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Project Name for the entity
   * @return name
  **/
  @Schema(description = "Project Name for the entity")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Project color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Color
   * @return color
  **/
  @Schema(description = "Color")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public Project modules(List<ModulesEnum> modules) {
    this.modules = modules;
    return this;
  }

  public Project addModulesItem(ModulesEnum modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<ModulesEnum>();
    }
    this.modules.add(modulesItem);
    return this;
  }

   /**
   * List of modules
   * @return modules
  **/
  @Schema(description = "List of modules")
  public List<ModulesEnum> getModules() {
    return modules;
  }

  public void setModules(List<ModulesEnum> modules) {
    this.modules = modules;
  }

  public Project description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @Schema(description = "Description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Project tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public Project putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<String, String>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Tags
   * @return tags
  **/
  @Schema(description = "Tags")
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.orgIdentifier, project.orgIdentifier) &&
        Objects.equals(this.identifier, project.identifier) &&
        Objects.equals(this.name, project.name) &&
        Objects.equals(this.color, project.color) &&
        Objects.equals(this.modules, project.modules) &&
        Objects.equals(this.description, project.description) &&
        Objects.equals(this.tags, project.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orgIdentifier, identifier, name, color, modules, description, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    
    sb.append("    orgIdentifier: ").append(toIndentedString(orgIdentifier)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
