/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EmbeddedUser;
import io.swagger.client.model.ViewRule;
import io.swagger.client.model.ViewTimeRange;
import io.swagger.client.model.ViewVisualization;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * This object will contain the complete definition of a Cloud Cost Perspective
 */
@Schema(description = "This object will contain the complete definition of a Cloud Cost Perspective")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class CEView {
  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("viewVersion")
  private String viewVersion = null;

  @SerializedName("viewTimeRange")
  private ViewTimeRange viewTimeRange = null;

  @SerializedName("viewRules")
  private List<ViewRule> viewRules = null;

  /**
   * Perspective filter Category, CLUSTER means Kubernetes
   */
  @JsonAdapter(DataSourcesEnum.Adapter.class)
  public enum DataSourcesEnum {
    CLUSTER("CLUSTER"),
    AWS("AWS"),
    GCP("GCP"),
    AZURE("AZURE"),
    COMMON("COMMON"),
    CUSTOM("CUSTOM"),
    BUSINESS_MAPPING("BUSINESS_MAPPING"),
    LABEL("LABEL");

    private String value;

    DataSourcesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DataSourcesEnum fromValue(String input) {
      for (DataSourcesEnum b : DataSourcesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DataSourcesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSourcesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DataSourcesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DataSourcesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("dataSources")
  private List<DataSourcesEnum> dataSources = null;

  @SerializedName("viewVisualization")
  private ViewVisualization viewVisualization = null;

  /**
   * Gets or Sets viewType
   */
  @JsonAdapter(ViewTypeEnum.Adapter.class)
  public enum ViewTypeEnum {
    SAMPLE("SAMPLE"),
    CUSTOMER("CUSTOMER"),
    DEFAULT_AZURE("DEFAULT_AZURE"),
    DEFAULT("DEFAULT");

    private String value;

    ViewTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ViewTypeEnum fromValue(String input) {
      for (ViewTypeEnum b : ViewTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ViewTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ViewTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ViewTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("viewType")
  private ViewTypeEnum viewType = null;

  /**
   * Gets or Sets viewState
   */
  @JsonAdapter(ViewStateEnum.Adapter.class)
  public enum ViewStateEnum {
    DRAFT("DRAFT"),
    COMPLETED("COMPLETED");

    private String value;

    ViewStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ViewStateEnum fromValue(String input) {
      for (ViewStateEnum b : ViewStateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ViewStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewStateEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ViewStateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ViewStateEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("viewState")
  private ViewStateEnum viewState = null;

  @SerializedName("totalCost")
  private Double totalCost = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("lastUpdatedAt")
  private Long lastUpdatedAt = null;

  @SerializedName("createdBy")
  private EmbeddedUser createdBy = null;

  @SerializedName("lastUpdatedBy")
  private EmbeddedUser lastUpdatedBy = null;

  public CEView uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public CEView name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CEView accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public CEView viewVersion(String viewVersion) {
    this.viewVersion = viewVersion;
    return this;
  }

   /**
   * Get viewVersion
   * @return viewVersion
  **/
  @Schema(description = "")
  public String getViewVersion() {
    return viewVersion;
  }

  public void setViewVersion(String viewVersion) {
    this.viewVersion = viewVersion;
  }

  public CEView viewTimeRange(ViewTimeRange viewTimeRange) {
    this.viewTimeRange = viewTimeRange;
    return this;
  }

   /**
   * Get viewTimeRange
   * @return viewTimeRange
  **/
  @Schema(description = "")
  public ViewTimeRange getViewTimeRange() {
    return viewTimeRange;
  }

  public void setViewTimeRange(ViewTimeRange viewTimeRange) {
    this.viewTimeRange = viewTimeRange;
  }

  public CEView viewRules(List<ViewRule> viewRules) {
    this.viewRules = viewRules;
    return this;
  }

  public CEView addViewRulesItem(ViewRule viewRulesItem) {
    if (this.viewRules == null) {
      this.viewRules = new ArrayList<ViewRule>();
    }
    this.viewRules.add(viewRulesItem);
    return this;
  }

   /**
   * Get viewRules
   * @return viewRules
  **/
  @Schema(description = "")
  public List<ViewRule> getViewRules() {
    return viewRules;
  }

  public void setViewRules(List<ViewRule> viewRules) {
    this.viewRules = viewRules;
  }

  public CEView dataSources(List<DataSourcesEnum> dataSources) {
    this.dataSources = dataSources;
    return this;
  }

  public CEView addDataSourcesItem(DataSourcesEnum dataSourcesItem) {
    if (this.dataSources == null) {
      this.dataSources = new ArrayList<DataSourcesEnum>();
    }
    this.dataSources.add(dataSourcesItem);
    return this;
  }

   /**
   * Get dataSources
   * @return dataSources
  **/
  @Schema(description = "")
  public List<DataSourcesEnum> getDataSources() {
    return dataSources;
  }

  public void setDataSources(List<DataSourcesEnum> dataSources) {
    this.dataSources = dataSources;
  }

  public CEView viewVisualization(ViewVisualization viewVisualization) {
    this.viewVisualization = viewVisualization;
    return this;
  }

   /**
   * Get viewVisualization
   * @return viewVisualization
  **/
  @Schema(description = "")
  public ViewVisualization getViewVisualization() {
    return viewVisualization;
  }

  public void setViewVisualization(ViewVisualization viewVisualization) {
    this.viewVisualization = viewVisualization;
  }

  public CEView viewType(ViewTypeEnum viewType) {
    this.viewType = viewType;
    return this;
  }

   /**
   * Get viewType
   * @return viewType
  **/
  @Schema(description = "")
  public ViewTypeEnum getViewType() {
    return viewType;
  }

  public void setViewType(ViewTypeEnum viewType) {
    this.viewType = viewType;
  }

  public CEView viewState(ViewStateEnum viewState) {
    this.viewState = viewState;
    return this;
  }

   /**
   * Get viewState
   * @return viewState
  **/
  @Schema(description = "")
  public ViewStateEnum getViewState() {
    return viewState;
  }

  public void setViewState(ViewStateEnum viewState) {
    this.viewState = viewState;
  }

  public CEView totalCost(Double totalCost) {
    this.totalCost = totalCost;
    return this;
  }

   /**
   * Get totalCost
   * @return totalCost
  **/
  @Schema(description = "")
  public Double getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(Double totalCost) {
    this.totalCost = totalCost;
  }

  public CEView createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public CEView lastUpdatedAt(Long lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

   /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
  **/
  @Schema(description = "")
  public Long getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(Long lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }

  public CEView createdBy(EmbeddedUser createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(description = "")
  public EmbeddedUser getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(EmbeddedUser createdBy) {
    this.createdBy = createdBy;
  }

  public CEView lastUpdatedBy(EmbeddedUser lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

   /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
  **/
  @Schema(description = "")
  public EmbeddedUser getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(EmbeddedUser lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CEView ceView = (CEView) o;
    return Objects.equals(this.uuid, ceView.uuid) &&
        Objects.equals(this.name, ceView.name) &&
        Objects.equals(this.accountId, ceView.accountId) &&
        Objects.equals(this.viewVersion, ceView.viewVersion) &&
        Objects.equals(this.viewTimeRange, ceView.viewTimeRange) &&
        Objects.equals(this.viewRules, ceView.viewRules) &&
        Objects.equals(this.dataSources, ceView.dataSources) &&
        Objects.equals(this.viewVisualization, ceView.viewVisualization) &&
        Objects.equals(this.viewType, ceView.viewType) &&
        Objects.equals(this.viewState, ceView.viewState) &&
        Objects.equals(this.totalCost, ceView.totalCost) &&
        Objects.equals(this.createdAt, ceView.createdAt) &&
        Objects.equals(this.lastUpdatedAt, ceView.lastUpdatedAt) &&
        Objects.equals(this.createdBy, ceView.createdBy) &&
        Objects.equals(this.lastUpdatedBy, ceView.lastUpdatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, name, accountId, viewVersion, viewTimeRange, viewRules, dataSources, viewVisualization, viewType, viewState, totalCost, createdAt, lastUpdatedAt, createdBy, lastUpdatedBy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CEView {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    viewVersion: ").append(toIndentedString(viewVersion)).append("\n");
    sb.append("    viewTimeRange: ").append(toIndentedString(viewTimeRange)).append("\n");
    sb.append("    viewRules: ").append(toIndentedString(viewRules)).append("\n");
    sb.append("    dataSources: ").append(toIndentedString(dataSources)).append("\n");
    sb.append("    viewVisualization: ").append(toIndentedString(viewVisualization)).append("\n");
    sb.append("    viewType: ").append(toIndentedString(viewType)).append("\n");
    sb.append("    viewState: ").append(toIndentedString(viewState)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
