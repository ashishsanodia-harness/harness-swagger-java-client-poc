/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.Message;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * RerunInfoOrBuilder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class RerunInfoOrBuilder {
  @SerializedName("rootExecutionId")
  private String rootExecutionId = null;

  @SerializedName("rootTriggerTypeValue")
  private Integer rootTriggerTypeValue = null;

  @SerializedName("prevExecutionId")
  private String prevExecutionId = null;

  @SerializedName("prevExecutionIdBytes")
  private ByteString prevExecutionIdBytes = null;

  @SerializedName("prevTriggerTypeValue")
  private Integer prevTriggerTypeValue = null;

  /**
   * Gets or Sets prevTriggerType
   */
  @JsonAdapter(PrevTriggerTypeEnum.Adapter.class)
  public enum PrevTriggerTypeEnum {
    NOOP("NOOP"),
    MANUAL("MANUAL"),
    WEBHOOK("WEBHOOK"),
    WEBHOOK_CUSTOM("WEBHOOK_CUSTOM"),
    SCHEDULER_CRON("SCHEDULER_CRON"),
    UNRECOGNIZED("UNRECOGNIZED");

    private String value;

    PrevTriggerTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PrevTriggerTypeEnum fromValue(String input) {
      for (PrevTriggerTypeEnum b : PrevTriggerTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PrevTriggerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrevTriggerTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PrevTriggerTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PrevTriggerTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("prevTriggerType")
  private PrevTriggerTypeEnum prevTriggerType = null;

  @SerializedName("rootExecutionIdBytes")
  private ByteString rootExecutionIdBytes = null;

  /**
   * Gets or Sets rootTriggerType
   */
  @JsonAdapter(RootTriggerTypeEnum.Adapter.class)
  public enum RootTriggerTypeEnum {
    NOOP("NOOP"),
    MANUAL("MANUAL"),
    WEBHOOK("WEBHOOK"),
    WEBHOOK_CUSTOM("WEBHOOK_CUSTOM"),
    SCHEDULER_CRON("SCHEDULER_CRON"),
    UNRECOGNIZED("UNRECOGNIZED");

    private String value;

    RootTriggerTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RootTriggerTypeEnum fromValue(String input) {
      for (RootTriggerTypeEnum b : RootTriggerTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RootTriggerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RootTriggerTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RootTriggerTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RootTriggerTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("rootTriggerType")
  private RootTriggerTypeEnum rootTriggerType = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("defaultInstanceForType")
  private Message defaultInstanceForType = null;

  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  public RerunInfoOrBuilder rootExecutionId(String rootExecutionId) {
    this.rootExecutionId = rootExecutionId;
    return this;
  }

   /**
   * Get rootExecutionId
   * @return rootExecutionId
  **/
  @Schema(description = "")
  public String getRootExecutionId() {
    return rootExecutionId;
  }

  public void setRootExecutionId(String rootExecutionId) {
    this.rootExecutionId = rootExecutionId;
  }

  public RerunInfoOrBuilder rootTriggerTypeValue(Integer rootTriggerTypeValue) {
    this.rootTriggerTypeValue = rootTriggerTypeValue;
    return this;
  }

   /**
   * Get rootTriggerTypeValue
   * @return rootTriggerTypeValue
  **/
  @Schema(description = "")
  public Integer getRootTriggerTypeValue() {
    return rootTriggerTypeValue;
  }

  public void setRootTriggerTypeValue(Integer rootTriggerTypeValue) {
    this.rootTriggerTypeValue = rootTriggerTypeValue;
  }

  public RerunInfoOrBuilder prevExecutionId(String prevExecutionId) {
    this.prevExecutionId = prevExecutionId;
    return this;
  }

   /**
   * Get prevExecutionId
   * @return prevExecutionId
  **/
  @Schema(description = "")
  public String getPrevExecutionId() {
    return prevExecutionId;
  }

  public void setPrevExecutionId(String prevExecutionId) {
    this.prevExecutionId = prevExecutionId;
  }

  public RerunInfoOrBuilder prevExecutionIdBytes(ByteString prevExecutionIdBytes) {
    this.prevExecutionIdBytes = prevExecutionIdBytes;
    return this;
  }

   /**
   * Get prevExecutionIdBytes
   * @return prevExecutionIdBytes
  **/
  @Schema(description = "")
  public ByteString getPrevExecutionIdBytes() {
    return prevExecutionIdBytes;
  }

  public void setPrevExecutionIdBytes(ByteString prevExecutionIdBytes) {
    this.prevExecutionIdBytes = prevExecutionIdBytes;
  }

  public RerunInfoOrBuilder prevTriggerTypeValue(Integer prevTriggerTypeValue) {
    this.prevTriggerTypeValue = prevTriggerTypeValue;
    return this;
  }

   /**
   * Get prevTriggerTypeValue
   * @return prevTriggerTypeValue
  **/
  @Schema(description = "")
  public Integer getPrevTriggerTypeValue() {
    return prevTriggerTypeValue;
  }

  public void setPrevTriggerTypeValue(Integer prevTriggerTypeValue) {
    this.prevTriggerTypeValue = prevTriggerTypeValue;
  }

  public RerunInfoOrBuilder prevTriggerType(PrevTriggerTypeEnum prevTriggerType) {
    this.prevTriggerType = prevTriggerType;
    return this;
  }

   /**
   * Get prevTriggerType
   * @return prevTriggerType
  **/
  @Schema(description = "")
  public PrevTriggerTypeEnum getPrevTriggerType() {
    return prevTriggerType;
  }

  public void setPrevTriggerType(PrevTriggerTypeEnum prevTriggerType) {
    this.prevTriggerType = prevTriggerType;
  }

  public RerunInfoOrBuilder rootExecutionIdBytes(ByteString rootExecutionIdBytes) {
    this.rootExecutionIdBytes = rootExecutionIdBytes;
    return this;
  }

   /**
   * Get rootExecutionIdBytes
   * @return rootExecutionIdBytes
  **/
  @Schema(description = "")
  public ByteString getRootExecutionIdBytes() {
    return rootExecutionIdBytes;
  }

  public void setRootExecutionIdBytes(ByteString rootExecutionIdBytes) {
    this.rootExecutionIdBytes = rootExecutionIdBytes;
  }

  public RerunInfoOrBuilder rootTriggerType(RootTriggerTypeEnum rootTriggerType) {
    this.rootTriggerType = rootTriggerType;
    return this;
  }

   /**
   * Get rootTriggerType
   * @return rootTriggerType
  **/
  @Schema(description = "")
  public RootTriggerTypeEnum getRootTriggerType() {
    return rootTriggerType;
  }

  public void setRootTriggerType(RootTriggerTypeEnum rootTriggerType) {
    this.rootTriggerType = rootTriggerType;
  }

  public RerunInfoOrBuilder allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public RerunInfoOrBuilder putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public RerunInfoOrBuilder initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public RerunInfoOrBuilder descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public RerunInfoOrBuilder defaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public Message getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public RerunInfoOrBuilder unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public RerunInfoOrBuilder initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RerunInfoOrBuilder rerunInfoOrBuilder = (RerunInfoOrBuilder) o;
    return Objects.equals(this.rootExecutionId, rerunInfoOrBuilder.rootExecutionId) &&
        Objects.equals(this.rootTriggerTypeValue, rerunInfoOrBuilder.rootTriggerTypeValue) &&
        Objects.equals(this.prevExecutionId, rerunInfoOrBuilder.prevExecutionId) &&
        Objects.equals(this.prevExecutionIdBytes, rerunInfoOrBuilder.prevExecutionIdBytes) &&
        Objects.equals(this.prevTriggerTypeValue, rerunInfoOrBuilder.prevTriggerTypeValue) &&
        Objects.equals(this.prevTriggerType, rerunInfoOrBuilder.prevTriggerType) &&
        Objects.equals(this.rootExecutionIdBytes, rerunInfoOrBuilder.rootExecutionIdBytes) &&
        Objects.equals(this.rootTriggerType, rerunInfoOrBuilder.rootTriggerType) &&
        Objects.equals(this.allFields, rerunInfoOrBuilder.allFields) &&
        Objects.equals(this.initializationErrorString, rerunInfoOrBuilder.initializationErrorString) &&
        Objects.equals(this.descriptorForType, rerunInfoOrBuilder.descriptorForType) &&
        Objects.equals(this.defaultInstanceForType, rerunInfoOrBuilder.defaultInstanceForType) &&
        Objects.equals(this.unknownFields, rerunInfoOrBuilder.unknownFields) &&
        Objects.equals(this.initialized, rerunInfoOrBuilder.initialized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootExecutionId, rootTriggerTypeValue, prevExecutionId, prevExecutionIdBytes, prevTriggerTypeValue, prevTriggerType, rootExecutionIdBytes, rootTriggerType, allFields, initializationErrorString, descriptorForType, defaultInstanceForType, unknownFields, initialized);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RerunInfoOrBuilder {\n");
    
    sb.append("    rootExecutionId: ").append(toIndentedString(rootExecutionId)).append("\n");
    sb.append("    rootTriggerTypeValue: ").append(toIndentedString(rootTriggerTypeValue)).append("\n");
    sb.append("    prevExecutionId: ").append(toIndentedString(prevExecutionId)).append("\n");
    sb.append("    prevExecutionIdBytes: ").append(toIndentedString(prevExecutionIdBytes)).append("\n");
    sb.append("    prevTriggerTypeValue: ").append(toIndentedString(prevTriggerTypeValue)).append("\n");
    sb.append("    prevTriggerType: ").append(toIndentedString(prevTriggerType)).append("\n");
    sb.append("    rootExecutionIdBytes: ").append(toIndentedString(rootExecutionIdBytes)).append("\n");
    sb.append("    rootTriggerType: ").append(toIndentedString(rootTriggerType)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
