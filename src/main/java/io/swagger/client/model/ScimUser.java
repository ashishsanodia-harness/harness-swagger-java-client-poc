/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.JsonNode;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ScimUser
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class ScimUser {
  @SerializedName("schemas")
  private List<String> schemas = null;

  @SerializedName("userName")
  private String userName = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("emails")
  private JsonNode emails = null;

  @SerializedName("roles")
  private JsonNode roles = null;

  @SerializedName("name")
  private JsonNode name = null;

  @SerializedName("groups")
  private JsonNode groups = null;

  @SerializedName("password")
  private JsonNode password = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("externalId")
  private String externalId = null;

  @SerializedName("meta")
  private JsonNode meta = null;

  public ScimUser schemas(List<String> schemas) {
    this.schemas = schemas;
    return this;
  }

  public ScimUser addSchemasItem(String schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<String>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @Schema(description = "")
  public List<String> getSchemas() {
    return schemas;
  }

  public void setSchemas(List<String> schemas) {
    this.schemas = schemas;
  }

  public ScimUser userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @Schema(description = "")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public ScimUser displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @Schema(description = "")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public ScimUser active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @Schema(description = "")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public ScimUser emails(JsonNode emails) {
    this.emails = emails;
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @Schema(description = "")
  public JsonNode getEmails() {
    return emails;
  }

  public void setEmails(JsonNode emails) {
    this.emails = emails;
  }

  public ScimUser roles(JsonNode roles) {
    this.roles = roles;
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @Schema(description = "")
  public JsonNode getRoles() {
    return roles;
  }

  public void setRoles(JsonNode roles) {
    this.roles = roles;
  }

  public ScimUser name(JsonNode name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public JsonNode getName() {
    return name;
  }

  public void setName(JsonNode name) {
    this.name = name;
  }

  public ScimUser groups(JsonNode groups) {
    this.groups = groups;
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @Schema(description = "")
  public JsonNode getGroups() {
    return groups;
  }

  public void setGroups(JsonNode groups) {
    this.groups = groups;
  }

  public ScimUser password(JsonNode password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(description = "")
  public JsonNode getPassword() {
    return password;
  }

  public void setPassword(JsonNode password) {
    this.password = password;
  }

  public ScimUser id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ScimUser externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @Schema(description = "")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public ScimUser meta(JsonNode meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @Schema(description = "")
  public JsonNode getMeta() {
    return meta;
  }

  public void setMeta(JsonNode meta) {
    this.meta = meta;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScimUser scimUser = (ScimUser) o;
    return Objects.equals(this.schemas, scimUser.schemas) &&
        Objects.equals(this.userName, scimUser.userName) &&
        Objects.equals(this.displayName, scimUser.displayName) &&
        Objects.equals(this.active, scimUser.active) &&
        Objects.equals(this.emails, scimUser.emails) &&
        Objects.equals(this.roles, scimUser.roles) &&
        Objects.equals(this.name, scimUser.name) &&
        Objects.equals(this.groups, scimUser.groups) &&
        Objects.equals(this.password, scimUser.password) &&
        Objects.equals(this.id, scimUser.id) &&
        Objects.equals(this.externalId, scimUser.externalId) &&
        Objects.equals(this.meta, scimUser.meta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, userName, displayName, active, emails, roles, name, groups, password, id, externalId, meta);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScimUser {\n");
    
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
