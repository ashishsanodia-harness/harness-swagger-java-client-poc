/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ParameterFieldNotificationChannelWrapper;
import io.swagger.client.model.PipelineEvent;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * NotificationRules
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class NotificationRules {
  @SerializedName("name")
  private String name = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("pipelineEvents")
  private List<PipelineEvent> pipelineEvents = null;

  @SerializedName("notificationMethod")
  private ParameterFieldNotificationChannelWrapper notificationMethod = null;

  public NotificationRules name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NotificationRules enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public NotificationRules pipelineEvents(List<PipelineEvent> pipelineEvents) {
    this.pipelineEvents = pipelineEvents;
    return this;
  }

  public NotificationRules addPipelineEventsItem(PipelineEvent pipelineEventsItem) {
    if (this.pipelineEvents == null) {
      this.pipelineEvents = new ArrayList<PipelineEvent>();
    }
    this.pipelineEvents.add(pipelineEventsItem);
    return this;
  }

   /**
   * Get pipelineEvents
   * @return pipelineEvents
  **/
  @Schema(description = "")
  public List<PipelineEvent> getPipelineEvents() {
    return pipelineEvents;
  }

  public void setPipelineEvents(List<PipelineEvent> pipelineEvents) {
    this.pipelineEvents = pipelineEvents;
  }

  public NotificationRules notificationMethod(ParameterFieldNotificationChannelWrapper notificationMethod) {
    this.notificationMethod = notificationMethod;
    return this;
  }

   /**
   * Get notificationMethod
   * @return notificationMethod
  **/
  @Schema(description = "")
  public ParameterFieldNotificationChannelWrapper getNotificationMethod() {
    return notificationMethod;
  }

  public void setNotificationMethod(ParameterFieldNotificationChannelWrapper notificationMethod) {
    this.notificationMethod = notificationMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationRules notificationRules = (NotificationRules) o;
    return Objects.equals(this.name, notificationRules.name) &&
        Objects.equals(this.enabled, notificationRules.enabled) &&
        Objects.equals(this.pipelineEvents, notificationRules.pipelineEvents) &&
        Objects.equals(this.notificationMethod, notificationRules.notificationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, enabled, pipelineEvents, notificationMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationRules {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    pipelineEvents: ").append(toIndentedString(pipelineEvents)).append("\n");
    sb.append("    notificationMethod: ").append(toIndentedString(notificationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
