/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SecretSpec;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This has details of encrypted text secret.
 */
@Schema(description = "This has details of encrypted text secret.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class SecretTextSpec extends SecretSpec {
  @SerializedName("secretManagerIdentifier")
  private String secretManagerIdentifier = null;

  /**
   * This has details to specify if the secret value is inline or referenced.
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
  public enum ValueTypeEnum {
    INLINE("Inline"),
    REFERENCE("Reference");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ValueTypeEnum fromValue(String input) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ValueTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("valueType")
  private ValueTypeEnum valueType = null;

  @SerializedName("value")
  private String value = null;

  public SecretTextSpec secretManagerIdentifier(String secretManagerIdentifier) {
    this.secretManagerIdentifier = secretManagerIdentifier;
    return this;
  }

   /**
   * Identifier of the Secret Manager used to manage the secret.
   * @return secretManagerIdentifier
  **/
  @Schema(required = true, description = "Identifier of the Secret Manager used to manage the secret.")
  public String getSecretManagerIdentifier() {
    return secretManagerIdentifier;
  }

  public void setSecretManagerIdentifier(String secretManagerIdentifier) {
    this.secretManagerIdentifier = secretManagerIdentifier;
  }

  public SecretTextSpec valueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
    return this;
  }

   /**
   * This has details to specify if the secret value is inline or referenced.
   * @return valueType
  **/
  @Schema(required = true, description = "This has details to specify if the secret value is inline or referenced.")
  public ValueTypeEnum getValueType() {
    return valueType;
  }

  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }

  public SecretTextSpec value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Value of the Secret
   * @return value
  **/
  @Schema(description = "Value of the Secret")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretTextSpec secretTextSpec = (SecretTextSpec) o;
    return Objects.equals(this.secretManagerIdentifier, secretTextSpec.secretManagerIdentifier) &&
        Objects.equals(this.valueType, secretTextSpec.valueType) &&
        Objects.equals(this.value, secretTextSpec.value) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secretManagerIdentifier, valueType, value, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretTextSpec {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    secretManagerIdentifier: ").append(toIndentedString(secretManagerIdentifier)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
