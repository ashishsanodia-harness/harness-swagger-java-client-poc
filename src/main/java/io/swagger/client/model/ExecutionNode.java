/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DelegateInfo;
import io.swagger.client.model.ExecutableResponse;
import io.swagger.client.model.FailureInfoDTO;
import io.swagger.client.model.InterruptEffect;
import io.swagger.client.model.NodeRunInfo;
import io.swagger.client.model.OrchestrationMap;
import io.swagger.client.model.SkipInfo;
import io.swagger.client.model.UnitProgress;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ExecutionNode
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class ExecutionNode {
  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("setupId")
  private String setupId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("baseFqn")
  private String baseFqn = null;

  @SerializedName("outcomes")
  private Map<String, OrchestrationMap> outcomes = null;

  @SerializedName("stepParameters")
  private OrchestrationMap stepParameters = null;

  @SerializedName("startTs")
  private Long startTs = null;

  @SerializedName("endTs")
  private Long endTs = null;

  @SerializedName("stepType")
  private String stepType = null;

  /**
   * This is the Execution Status of the entity
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("RUNNING"),
    ASYNCWAITING("ASYNCWAITING"),
    TASKWAITING("TASKWAITING"),
    TIMEDWAITING("TIMEDWAITING"),
    FAILED("FAILED"),
    ERRORED("ERRORED"),
    IGNOREFAILED("IGNOREFAILED"),
    NOTSTARTED("NOTSTARTED"),
    EXPIRED("EXPIRED"),
    ABORTED("ABORTED"),
    DISCONTINUING("DISCONTINUING"),
    QUEUED("QUEUED"),
    PAUSED("PAUSED"),
    RESOURCEWAITING("RESOURCEWAITING"),
    INTERVENTIONWAITING("INTERVENTIONWAITING"),
    APPROVALWAITING("APPROVALWAITING"),
    SUCCESS("SUCCESS"),
    SUSPENDED("SUSPENDED"),
    SKIPPED("SKIPPED"),
    PAUSING("PAUSING"),
    APPROVALREJECTED("APPROVALREJECTED"),
    NOT_STARTED("NOT_STARTED"),
    INTERVENTION_WAITING("INTERVENTION_WAITING"),
    APPROVAL_WAITING("APPROVAL_WAITING"),
    APPROVAL_REJECTED("APPROVAL_REJECTED"),
    WAITING("WAITING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("failureInfo")
  private FailureInfoDTO failureInfo = null;

  @SerializedName("skipInfo")
  private SkipInfo skipInfo = null;

  @SerializedName("nodeRunInfo")
  private NodeRunInfo nodeRunInfo = null;

  @SerializedName("executableResponses")
  private List<ExecutableResponse> executableResponses = null;

  @SerializedName("unitProgresses")
  private List<UnitProgress> unitProgresses = null;

  @SerializedName("progressData")
  private OrchestrationMap progressData = null;

  @SerializedName("delegateInfoList")
  private List<DelegateInfo> delegateInfoList = null;

  @SerializedName("interruptHistories")
  private List<InterruptEffect> interruptHistories = null;

  @SerializedName("stepDetails")
  private Map<String, OrchestrationMap> stepDetails = null;

  public ExecutionNode uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public ExecutionNode setupId(String setupId) {
    this.setupId = setupId;
    return this;
  }

   /**
   * Get setupId
   * @return setupId
  **/
  @Schema(description = "")
  public String getSetupId() {
    return setupId;
  }

  public void setSetupId(String setupId) {
    this.setupId = setupId;
  }

  public ExecutionNode name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ExecutionNode identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @Schema(description = "")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public ExecutionNode baseFqn(String baseFqn) {
    this.baseFqn = baseFqn;
    return this;
  }

   /**
   * Get baseFqn
   * @return baseFqn
  **/
  @Schema(description = "")
  public String getBaseFqn() {
    return baseFqn;
  }

  public void setBaseFqn(String baseFqn) {
    this.baseFqn = baseFqn;
  }

  public ExecutionNode outcomes(Map<String, OrchestrationMap> outcomes) {
    this.outcomes = outcomes;
    return this;
  }

  public ExecutionNode putOutcomesItem(String key, OrchestrationMap outcomesItem) {
    if (this.outcomes == null) {
      this.outcomes = new HashMap<String, OrchestrationMap>();
    }
    this.outcomes.put(key, outcomesItem);
    return this;
  }

   /**
   * Get outcomes
   * @return outcomes
  **/
  @Schema(description = "")
  public Map<String, OrchestrationMap> getOutcomes() {
    return outcomes;
  }

  public void setOutcomes(Map<String, OrchestrationMap> outcomes) {
    this.outcomes = outcomes;
  }

  public ExecutionNode stepParameters(OrchestrationMap stepParameters) {
    this.stepParameters = stepParameters;
    return this;
  }

   /**
   * Get stepParameters
   * @return stepParameters
  **/
  @Schema(description = "")
  public OrchestrationMap getStepParameters() {
    return stepParameters;
  }

  public void setStepParameters(OrchestrationMap stepParameters) {
    this.stepParameters = stepParameters;
  }

  public ExecutionNode startTs(Long startTs) {
    this.startTs = startTs;
    return this;
  }

   /**
   * Get startTs
   * @return startTs
  **/
  @Schema(description = "")
  public Long getStartTs() {
    return startTs;
  }

  public void setStartTs(Long startTs) {
    this.startTs = startTs;
  }

  public ExecutionNode endTs(Long endTs) {
    this.endTs = endTs;
    return this;
  }

   /**
   * Get endTs
   * @return endTs
  **/
  @Schema(description = "")
  public Long getEndTs() {
    return endTs;
  }

  public void setEndTs(Long endTs) {
    this.endTs = endTs;
  }

  public ExecutionNode stepType(String stepType) {
    this.stepType = stepType;
    return this;
  }

   /**
   * Get stepType
   * @return stepType
  **/
  @Schema(description = "")
  public String getStepType() {
    return stepType;
  }

  public void setStepType(String stepType) {
    this.stepType = stepType;
  }

  public ExecutionNode status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * This is the Execution Status of the entity
   * @return status
  **/
  @Schema(description = "This is the Execution Status of the entity")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ExecutionNode failureInfo(FailureInfoDTO failureInfo) {
    this.failureInfo = failureInfo;
    return this;
  }

   /**
   * Get failureInfo
   * @return failureInfo
  **/
  @Schema(description = "")
  public FailureInfoDTO getFailureInfo() {
    return failureInfo;
  }

  public void setFailureInfo(FailureInfoDTO failureInfo) {
    this.failureInfo = failureInfo;
  }

  public ExecutionNode skipInfo(SkipInfo skipInfo) {
    this.skipInfo = skipInfo;
    return this;
  }

   /**
   * Get skipInfo
   * @return skipInfo
  **/
  @Schema(description = "")
  public SkipInfo getSkipInfo() {
    return skipInfo;
  }

  public void setSkipInfo(SkipInfo skipInfo) {
    this.skipInfo = skipInfo;
  }

  public ExecutionNode nodeRunInfo(NodeRunInfo nodeRunInfo) {
    this.nodeRunInfo = nodeRunInfo;
    return this;
  }

   /**
   * Get nodeRunInfo
   * @return nodeRunInfo
  **/
  @Schema(description = "")
  public NodeRunInfo getNodeRunInfo() {
    return nodeRunInfo;
  }

  public void setNodeRunInfo(NodeRunInfo nodeRunInfo) {
    this.nodeRunInfo = nodeRunInfo;
  }

  public ExecutionNode executableResponses(List<ExecutableResponse> executableResponses) {
    this.executableResponses = executableResponses;
    return this;
  }

  public ExecutionNode addExecutableResponsesItem(ExecutableResponse executableResponsesItem) {
    if (this.executableResponses == null) {
      this.executableResponses = new ArrayList<ExecutableResponse>();
    }
    this.executableResponses.add(executableResponsesItem);
    return this;
  }

   /**
   * Get executableResponses
   * @return executableResponses
  **/
  @Schema(description = "")
  public List<ExecutableResponse> getExecutableResponses() {
    return executableResponses;
  }

  public void setExecutableResponses(List<ExecutableResponse> executableResponses) {
    this.executableResponses = executableResponses;
  }

  public ExecutionNode unitProgresses(List<UnitProgress> unitProgresses) {
    this.unitProgresses = unitProgresses;
    return this;
  }

  public ExecutionNode addUnitProgressesItem(UnitProgress unitProgressesItem) {
    if (this.unitProgresses == null) {
      this.unitProgresses = new ArrayList<UnitProgress>();
    }
    this.unitProgresses.add(unitProgressesItem);
    return this;
  }

   /**
   * Get unitProgresses
   * @return unitProgresses
  **/
  @Schema(description = "")
  public List<UnitProgress> getUnitProgresses() {
    return unitProgresses;
  }

  public void setUnitProgresses(List<UnitProgress> unitProgresses) {
    this.unitProgresses = unitProgresses;
  }

  public ExecutionNode progressData(OrchestrationMap progressData) {
    this.progressData = progressData;
    return this;
  }

   /**
   * Get progressData
   * @return progressData
  **/
  @Schema(description = "")
  public OrchestrationMap getProgressData() {
    return progressData;
  }

  public void setProgressData(OrchestrationMap progressData) {
    this.progressData = progressData;
  }

  public ExecutionNode delegateInfoList(List<DelegateInfo> delegateInfoList) {
    this.delegateInfoList = delegateInfoList;
    return this;
  }

  public ExecutionNode addDelegateInfoListItem(DelegateInfo delegateInfoListItem) {
    if (this.delegateInfoList == null) {
      this.delegateInfoList = new ArrayList<DelegateInfo>();
    }
    this.delegateInfoList.add(delegateInfoListItem);
    return this;
  }

   /**
   * Get delegateInfoList
   * @return delegateInfoList
  **/
  @Schema(description = "")
  public List<DelegateInfo> getDelegateInfoList() {
    return delegateInfoList;
  }

  public void setDelegateInfoList(List<DelegateInfo> delegateInfoList) {
    this.delegateInfoList = delegateInfoList;
  }

  public ExecutionNode interruptHistories(List<InterruptEffect> interruptHistories) {
    this.interruptHistories = interruptHistories;
    return this;
  }

  public ExecutionNode addInterruptHistoriesItem(InterruptEffect interruptHistoriesItem) {
    if (this.interruptHistories == null) {
      this.interruptHistories = new ArrayList<InterruptEffect>();
    }
    this.interruptHistories.add(interruptHistoriesItem);
    return this;
  }

   /**
   * Get interruptHistories
   * @return interruptHistories
  **/
  @Schema(description = "")
  public List<InterruptEffect> getInterruptHistories() {
    return interruptHistories;
  }

  public void setInterruptHistories(List<InterruptEffect> interruptHistories) {
    this.interruptHistories = interruptHistories;
  }

  public ExecutionNode stepDetails(Map<String, OrchestrationMap> stepDetails) {
    this.stepDetails = stepDetails;
    return this;
  }

  public ExecutionNode putStepDetailsItem(String key, OrchestrationMap stepDetailsItem) {
    if (this.stepDetails == null) {
      this.stepDetails = new HashMap<String, OrchestrationMap>();
    }
    this.stepDetails.put(key, stepDetailsItem);
    return this;
  }

   /**
   * Get stepDetails
   * @return stepDetails
  **/
  @Schema(description = "")
  public Map<String, OrchestrationMap> getStepDetails() {
    return stepDetails;
  }

  public void setStepDetails(Map<String, OrchestrationMap> stepDetails) {
    this.stepDetails = stepDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionNode executionNode = (ExecutionNode) o;
    return Objects.equals(this.uuid, executionNode.uuid) &&
        Objects.equals(this.setupId, executionNode.setupId) &&
        Objects.equals(this.name, executionNode.name) &&
        Objects.equals(this.identifier, executionNode.identifier) &&
        Objects.equals(this.baseFqn, executionNode.baseFqn) &&
        Objects.equals(this.outcomes, executionNode.outcomes) &&
        Objects.equals(this.stepParameters, executionNode.stepParameters) &&
        Objects.equals(this.startTs, executionNode.startTs) &&
        Objects.equals(this.endTs, executionNode.endTs) &&
        Objects.equals(this.stepType, executionNode.stepType) &&
        Objects.equals(this.status, executionNode.status) &&
        Objects.equals(this.failureInfo, executionNode.failureInfo) &&
        Objects.equals(this.skipInfo, executionNode.skipInfo) &&
        Objects.equals(this.nodeRunInfo, executionNode.nodeRunInfo) &&
        Objects.equals(this.executableResponses, executionNode.executableResponses) &&
        Objects.equals(this.unitProgresses, executionNode.unitProgresses) &&
        Objects.equals(this.progressData, executionNode.progressData) &&
        Objects.equals(this.delegateInfoList, executionNode.delegateInfoList) &&
        Objects.equals(this.interruptHistories, executionNode.interruptHistories) &&
        Objects.equals(this.stepDetails, executionNode.stepDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, setupId, name, identifier, baseFqn, outcomes, stepParameters, startTs, endTs, stepType, status, failureInfo, skipInfo, nodeRunInfo, executableResponses, unitProgresses, progressData, delegateInfoList, interruptHistories, stepDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionNode {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    setupId: ").append(toIndentedString(setupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    baseFqn: ").append(toIndentedString(baseFqn)).append("\n");
    sb.append("    outcomes: ").append(toIndentedString(outcomes)).append("\n");
    sb.append("    stepParameters: ").append(toIndentedString(stepParameters)).append("\n");
    sb.append("    startTs: ").append(toIndentedString(startTs)).append("\n");
    sb.append("    endTs: ").append(toIndentedString(endTs)).append("\n");
    sb.append("    stepType: ").append(toIndentedString(stepType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failureInfo: ").append(toIndentedString(failureInfo)).append("\n");
    sb.append("    skipInfo: ").append(toIndentedString(skipInfo)).append("\n");
    sb.append("    nodeRunInfo: ").append(toIndentedString(nodeRunInfo)).append("\n");
    sb.append("    executableResponses: ").append(toIndentedString(executableResponses)).append("\n");
    sb.append("    unitProgresses: ").append(toIndentedString(unitProgresses)).append("\n");
    sb.append("    progressData: ").append(toIndentedString(progressData)).append("\n");
    sb.append("    delegateInfoList: ").append(toIndentedString(delegateInfoList)).append("\n");
    sb.append("    interruptHistories: ").append(toIndentedString(interruptHistories)).append("\n");
    sb.append("    stepDetails: ").append(toIndentedString(stepDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
