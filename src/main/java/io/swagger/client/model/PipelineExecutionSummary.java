/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Document;
import io.swagger.client.model.ExecutionErrorInfo;
import io.swagger.client.model.ExecutionTriggerInfo;
import io.swagger.client.model.GovernanceMetadata;
import io.swagger.client.model.GraphLayoutNode;
import io.swagger.client.model.NGTag;
import io.swagger.client.model.PipelineEntityGitDetails;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * This is the view of the Pipeline Execution Summary
 */
@Schema(description = "This is the view of the Pipeline Execution Summary")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class PipelineExecutionSummary {
  @SerializedName("pipelineIdentifier")
  private String pipelineIdentifier = null;

  @SerializedName("planExecutionId")
  private String planExecutionId = null;

  @SerializedName("name")
  private String name = null;

  /**
   * This is the Execution Status of the entity
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("RUNNING"),
    ASYNCWAITING("ASYNCWAITING"),
    TASKWAITING("TASKWAITING"),
    TIMEDWAITING("TIMEDWAITING"),
    FAILED("FAILED"),
    ERRORED("ERRORED"),
    IGNOREFAILED("IGNOREFAILED"),
    NOTSTARTED("NOTSTARTED"),
    EXPIRED("EXPIRED"),
    ABORTED("ABORTED"),
    DISCONTINUING("DISCONTINUING"),
    QUEUED("QUEUED"),
    PAUSED("PAUSED"),
    RESOURCEWAITING("RESOURCEWAITING"),
    INTERVENTIONWAITING("INTERVENTIONWAITING"),
    APPROVALWAITING("APPROVALWAITING"),
    SUCCESS("SUCCESS"),
    SUSPENDED("SUSPENDED"),
    SKIPPED("SKIPPED"),
    PAUSING("PAUSING"),
    APPROVALREJECTED("APPROVALREJECTED"),
    NOT_STARTED("NOT_STARTED"),
    INTERVENTION_WAITING("INTERVENTION_WAITING"),
    APPROVAL_WAITING("APPROVAL_WAITING"),
    APPROVAL_REJECTED("APPROVAL_REJECTED"),
    WAITING("WAITING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("tags")
  private List<NGTag> tags = null;

  @SerializedName("executionTriggerInfo")
  private ExecutionTriggerInfo executionTriggerInfo = null;

  @SerializedName("executionErrorInfo")
  private ExecutionErrorInfo executionErrorInfo = null;

  @SerializedName("governanceMetadata")
  private GovernanceMetadata governanceMetadata = null;

  @SerializedName("moduleInfo")
  private Map<String, Document> moduleInfo = null;

  @SerializedName("layoutNodeMap")
  private Map<String, GraphLayoutNode> layoutNodeMap = null;

  @SerializedName("modules")
  private List<String> modules = null;

  @SerializedName("startingNodeId")
  private String startingNodeId = null;

  @SerializedName("startTs")
  private Long startTs = null;

  @SerializedName("endTs")
  private Long endTs = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("canRetry")
  private Boolean canRetry = null;

  @SerializedName("showRetryHistory")
  private Boolean showRetryHistory = null;

  @SerializedName("runSequence")
  private Integer runSequence = null;

  @SerializedName("successfulStagesCount")
  private Long successfulStagesCount = null;

  @SerializedName("runningStagesCount")
  private Long runningStagesCount = null;

  @SerializedName("failedStagesCount")
  private Long failedStagesCount = null;

  @SerializedName("totalStagesCount")
  private Long totalStagesCount = null;

  @SerializedName("gitDetails")
  private PipelineEntityGitDetails gitDetails = null;

  @SerializedName("isStagesExecution")
  private Boolean isStagesExecution = null;

  @SerializedName("stagesExecuted")
  private List<String> stagesExecuted = null;

  @SerializedName("stagesExecutedNames")
  private Map<String, String> stagesExecutedNames = null;

  @SerializedName("stagesExecution")
  private Boolean stagesExecution = null;

  public PipelineExecutionSummary pipelineIdentifier(String pipelineIdentifier) {
    this.pipelineIdentifier = pipelineIdentifier;
    return this;
  }

   /**
   * Get pipelineIdentifier
   * @return pipelineIdentifier
  **/
  @Schema(description = "")
  public String getPipelineIdentifier() {
    return pipelineIdentifier;
  }

  public void setPipelineIdentifier(String pipelineIdentifier) {
    this.pipelineIdentifier = pipelineIdentifier;
  }

  public PipelineExecutionSummary planExecutionId(String planExecutionId) {
    this.planExecutionId = planExecutionId;
    return this;
  }

   /**
   * Get planExecutionId
   * @return planExecutionId
  **/
  @Schema(description = "")
  public String getPlanExecutionId() {
    return planExecutionId;
  }

  public void setPlanExecutionId(String planExecutionId) {
    this.planExecutionId = planExecutionId;
  }

  public PipelineExecutionSummary name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PipelineExecutionSummary status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * This is the Execution Status of the entity
   * @return status
  **/
  @Schema(description = "This is the Execution Status of the entity")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public PipelineExecutionSummary tags(List<NGTag> tags) {
    this.tags = tags;
    return this;
  }

  public PipelineExecutionSummary addTagsItem(NGTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<NGTag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public List<NGTag> getTags() {
    return tags;
  }

  public void setTags(List<NGTag> tags) {
    this.tags = tags;
  }

  public PipelineExecutionSummary executionTriggerInfo(ExecutionTriggerInfo executionTriggerInfo) {
    this.executionTriggerInfo = executionTriggerInfo;
    return this;
  }

   /**
   * Get executionTriggerInfo
   * @return executionTriggerInfo
  **/
  @Schema(description = "")
  public ExecutionTriggerInfo getExecutionTriggerInfo() {
    return executionTriggerInfo;
  }

  public void setExecutionTriggerInfo(ExecutionTriggerInfo executionTriggerInfo) {
    this.executionTriggerInfo = executionTriggerInfo;
  }

  public PipelineExecutionSummary executionErrorInfo(ExecutionErrorInfo executionErrorInfo) {
    this.executionErrorInfo = executionErrorInfo;
    return this;
  }

   /**
   * Get executionErrorInfo
   * @return executionErrorInfo
  **/
  @Schema(description = "")
  public ExecutionErrorInfo getExecutionErrorInfo() {
    return executionErrorInfo;
  }

  public void setExecutionErrorInfo(ExecutionErrorInfo executionErrorInfo) {
    this.executionErrorInfo = executionErrorInfo;
  }

  public PipelineExecutionSummary governanceMetadata(GovernanceMetadata governanceMetadata) {
    this.governanceMetadata = governanceMetadata;
    return this;
  }

   /**
   * Get governanceMetadata
   * @return governanceMetadata
  **/
  @Schema(description = "")
  public GovernanceMetadata getGovernanceMetadata() {
    return governanceMetadata;
  }

  public void setGovernanceMetadata(GovernanceMetadata governanceMetadata) {
    this.governanceMetadata = governanceMetadata;
  }

  public PipelineExecutionSummary moduleInfo(Map<String, Document> moduleInfo) {
    this.moduleInfo = moduleInfo;
    return this;
  }

  public PipelineExecutionSummary putModuleInfoItem(String key, Document moduleInfoItem) {
    if (this.moduleInfo == null) {
      this.moduleInfo = new HashMap<String, Document>();
    }
    this.moduleInfo.put(key, moduleInfoItem);
    return this;
  }

   /**
   * Get moduleInfo
   * @return moduleInfo
  **/
  @Schema(description = "")
  public Map<String, Document> getModuleInfo() {
    return moduleInfo;
  }

  public void setModuleInfo(Map<String, Document> moduleInfo) {
    this.moduleInfo = moduleInfo;
  }

  public PipelineExecutionSummary layoutNodeMap(Map<String, GraphLayoutNode> layoutNodeMap) {
    this.layoutNodeMap = layoutNodeMap;
    return this;
  }

  public PipelineExecutionSummary putLayoutNodeMapItem(String key, GraphLayoutNode layoutNodeMapItem) {
    if (this.layoutNodeMap == null) {
      this.layoutNodeMap = new HashMap<String, GraphLayoutNode>();
    }
    this.layoutNodeMap.put(key, layoutNodeMapItem);
    return this;
  }

   /**
   * Get layoutNodeMap
   * @return layoutNodeMap
  **/
  @Schema(description = "")
  public Map<String, GraphLayoutNode> getLayoutNodeMap() {
    return layoutNodeMap;
  }

  public void setLayoutNodeMap(Map<String, GraphLayoutNode> layoutNodeMap) {
    this.layoutNodeMap = layoutNodeMap;
  }

  public PipelineExecutionSummary modules(List<String> modules) {
    this.modules = modules;
    return this;
  }

  public PipelineExecutionSummary addModulesItem(String modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<String>();
    }
    this.modules.add(modulesItem);
    return this;
  }

   /**
   * Get modules
   * @return modules
  **/
  @Schema(description = "")
  public List<String> getModules() {
    return modules;
  }

  public void setModules(List<String> modules) {
    this.modules = modules;
  }

  public PipelineExecutionSummary startingNodeId(String startingNodeId) {
    this.startingNodeId = startingNodeId;
    return this;
  }

   /**
   * Get startingNodeId
   * @return startingNodeId
  **/
  @Schema(description = "")
  public String getStartingNodeId() {
    return startingNodeId;
  }

  public void setStartingNodeId(String startingNodeId) {
    this.startingNodeId = startingNodeId;
  }

  public PipelineExecutionSummary startTs(Long startTs) {
    this.startTs = startTs;
    return this;
  }

   /**
   * Get startTs
   * @return startTs
  **/
  @Schema(description = "")
  public Long getStartTs() {
    return startTs;
  }

  public void setStartTs(Long startTs) {
    this.startTs = startTs;
  }

  public PipelineExecutionSummary endTs(Long endTs) {
    this.endTs = endTs;
    return this;
  }

   /**
   * Get endTs
   * @return endTs
  **/
  @Schema(description = "")
  public Long getEndTs() {
    return endTs;
  }

  public void setEndTs(Long endTs) {
    this.endTs = endTs;
  }

  public PipelineExecutionSummary createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public PipelineExecutionSummary canRetry(Boolean canRetry) {
    this.canRetry = canRetry;
    return this;
  }

   /**
   * Get canRetry
   * @return canRetry
  **/
  @Schema(description = "")
  public Boolean isCanRetry() {
    return canRetry;
  }

  public void setCanRetry(Boolean canRetry) {
    this.canRetry = canRetry;
  }

  public PipelineExecutionSummary showRetryHistory(Boolean showRetryHistory) {
    this.showRetryHistory = showRetryHistory;
    return this;
  }

   /**
   * Get showRetryHistory
   * @return showRetryHistory
  **/
  @Schema(description = "")
  public Boolean isShowRetryHistory() {
    return showRetryHistory;
  }

  public void setShowRetryHistory(Boolean showRetryHistory) {
    this.showRetryHistory = showRetryHistory;
  }

  public PipelineExecutionSummary runSequence(Integer runSequence) {
    this.runSequence = runSequence;
    return this;
  }

   /**
   * Get runSequence
   * @return runSequence
  **/
  @Schema(description = "")
  public Integer getRunSequence() {
    return runSequence;
  }

  public void setRunSequence(Integer runSequence) {
    this.runSequence = runSequence;
  }

  public PipelineExecutionSummary successfulStagesCount(Long successfulStagesCount) {
    this.successfulStagesCount = successfulStagesCount;
    return this;
  }

   /**
   * Get successfulStagesCount
   * @return successfulStagesCount
  **/
  @Schema(description = "")
  public Long getSuccessfulStagesCount() {
    return successfulStagesCount;
  }

  public void setSuccessfulStagesCount(Long successfulStagesCount) {
    this.successfulStagesCount = successfulStagesCount;
  }

  public PipelineExecutionSummary runningStagesCount(Long runningStagesCount) {
    this.runningStagesCount = runningStagesCount;
    return this;
  }

   /**
   * Get runningStagesCount
   * @return runningStagesCount
  **/
  @Schema(description = "")
  public Long getRunningStagesCount() {
    return runningStagesCount;
  }

  public void setRunningStagesCount(Long runningStagesCount) {
    this.runningStagesCount = runningStagesCount;
  }

  public PipelineExecutionSummary failedStagesCount(Long failedStagesCount) {
    this.failedStagesCount = failedStagesCount;
    return this;
  }

   /**
   * Get failedStagesCount
   * @return failedStagesCount
  **/
  @Schema(description = "")
  public Long getFailedStagesCount() {
    return failedStagesCount;
  }

  public void setFailedStagesCount(Long failedStagesCount) {
    this.failedStagesCount = failedStagesCount;
  }

  public PipelineExecutionSummary totalStagesCount(Long totalStagesCount) {
    this.totalStagesCount = totalStagesCount;
    return this;
  }

   /**
   * Get totalStagesCount
   * @return totalStagesCount
  **/
  @Schema(description = "")
  public Long getTotalStagesCount() {
    return totalStagesCount;
  }

  public void setTotalStagesCount(Long totalStagesCount) {
    this.totalStagesCount = totalStagesCount;
  }

  public PipelineExecutionSummary gitDetails(PipelineEntityGitDetails gitDetails) {
    this.gitDetails = gitDetails;
    return this;
  }

   /**
   * Get gitDetails
   * @return gitDetails
  **/
  @Schema(description = "")
  public PipelineEntityGitDetails getGitDetails() {
    return gitDetails;
  }

  public void setGitDetails(PipelineEntityGitDetails gitDetails) {
    this.gitDetails = gitDetails;
  }

  public PipelineExecutionSummary isStagesExecution(Boolean isStagesExecution) {
    this.isStagesExecution = isStagesExecution;
    return this;
  }

   /**
   * Get isStagesExecution
   * @return isStagesExecution
  **/
  @Schema(description = "")
  public Boolean isIsStagesExecution() {
    return isStagesExecution;
  }

  public void setIsStagesExecution(Boolean isStagesExecution) {
    this.isStagesExecution = isStagesExecution;
  }

  public PipelineExecutionSummary stagesExecuted(List<String> stagesExecuted) {
    this.stagesExecuted = stagesExecuted;
    return this;
  }

  public PipelineExecutionSummary addStagesExecutedItem(String stagesExecutedItem) {
    if (this.stagesExecuted == null) {
      this.stagesExecuted = new ArrayList<String>();
    }
    this.stagesExecuted.add(stagesExecutedItem);
    return this;
  }

   /**
   * Get stagesExecuted
   * @return stagesExecuted
  **/
  @Schema(description = "")
  public List<String> getStagesExecuted() {
    return stagesExecuted;
  }

  public void setStagesExecuted(List<String> stagesExecuted) {
    this.stagesExecuted = stagesExecuted;
  }

  public PipelineExecutionSummary stagesExecutedNames(Map<String, String> stagesExecutedNames) {
    this.stagesExecutedNames = stagesExecutedNames;
    return this;
  }

  public PipelineExecutionSummary putStagesExecutedNamesItem(String key, String stagesExecutedNamesItem) {
    if (this.stagesExecutedNames == null) {
      this.stagesExecutedNames = new HashMap<String, String>();
    }
    this.stagesExecutedNames.put(key, stagesExecutedNamesItem);
    return this;
  }

   /**
   * Get stagesExecutedNames
   * @return stagesExecutedNames
  **/
  @Schema(description = "")
  public Map<String, String> getStagesExecutedNames() {
    return stagesExecutedNames;
  }

  public void setStagesExecutedNames(Map<String, String> stagesExecutedNames) {
    this.stagesExecutedNames = stagesExecutedNames;
  }

  public PipelineExecutionSummary stagesExecution(Boolean stagesExecution) {
    this.stagesExecution = stagesExecution;
    return this;
  }

   /**
   * Get stagesExecution
   * @return stagesExecution
  **/
  @Schema(description = "")
  public Boolean isStagesExecution() {
    return stagesExecution;
  }

  public void setStagesExecution(Boolean stagesExecution) {
    this.stagesExecution = stagesExecution;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineExecutionSummary pipelineExecutionSummary = (PipelineExecutionSummary) o;
    return Objects.equals(this.pipelineIdentifier, pipelineExecutionSummary.pipelineIdentifier) &&
        Objects.equals(this.planExecutionId, pipelineExecutionSummary.planExecutionId) &&
        Objects.equals(this.name, pipelineExecutionSummary.name) &&
        Objects.equals(this.status, pipelineExecutionSummary.status) &&
        Objects.equals(this.tags, pipelineExecutionSummary.tags) &&
        Objects.equals(this.executionTriggerInfo, pipelineExecutionSummary.executionTriggerInfo) &&
        Objects.equals(this.executionErrorInfo, pipelineExecutionSummary.executionErrorInfo) &&
        Objects.equals(this.governanceMetadata, pipelineExecutionSummary.governanceMetadata) &&
        Objects.equals(this.moduleInfo, pipelineExecutionSummary.moduleInfo) &&
        Objects.equals(this.layoutNodeMap, pipelineExecutionSummary.layoutNodeMap) &&
        Objects.equals(this.modules, pipelineExecutionSummary.modules) &&
        Objects.equals(this.startingNodeId, pipelineExecutionSummary.startingNodeId) &&
        Objects.equals(this.startTs, pipelineExecutionSummary.startTs) &&
        Objects.equals(this.endTs, pipelineExecutionSummary.endTs) &&
        Objects.equals(this.createdAt, pipelineExecutionSummary.createdAt) &&
        Objects.equals(this.canRetry, pipelineExecutionSummary.canRetry) &&
        Objects.equals(this.showRetryHistory, pipelineExecutionSummary.showRetryHistory) &&
        Objects.equals(this.runSequence, pipelineExecutionSummary.runSequence) &&
        Objects.equals(this.successfulStagesCount, pipelineExecutionSummary.successfulStagesCount) &&
        Objects.equals(this.runningStagesCount, pipelineExecutionSummary.runningStagesCount) &&
        Objects.equals(this.failedStagesCount, pipelineExecutionSummary.failedStagesCount) &&
        Objects.equals(this.totalStagesCount, pipelineExecutionSummary.totalStagesCount) &&
        Objects.equals(this.gitDetails, pipelineExecutionSummary.gitDetails) &&
        Objects.equals(this.isStagesExecution, pipelineExecutionSummary.isStagesExecution) &&
        Objects.equals(this.stagesExecuted, pipelineExecutionSummary.stagesExecuted) &&
        Objects.equals(this.stagesExecutedNames, pipelineExecutionSummary.stagesExecutedNames) &&
        Objects.equals(this.stagesExecution, pipelineExecutionSummary.stagesExecution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pipelineIdentifier, planExecutionId, name, status, tags, executionTriggerInfo, executionErrorInfo, governanceMetadata, moduleInfo, layoutNodeMap, modules, startingNodeId, startTs, endTs, createdAt, canRetry, showRetryHistory, runSequence, successfulStagesCount, runningStagesCount, failedStagesCount, totalStagesCount, gitDetails, isStagesExecution, stagesExecuted, stagesExecutedNames, stagesExecution);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineExecutionSummary {\n");
    
    sb.append("    pipelineIdentifier: ").append(toIndentedString(pipelineIdentifier)).append("\n");
    sb.append("    planExecutionId: ").append(toIndentedString(planExecutionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    executionTriggerInfo: ").append(toIndentedString(executionTriggerInfo)).append("\n");
    sb.append("    executionErrorInfo: ").append(toIndentedString(executionErrorInfo)).append("\n");
    sb.append("    governanceMetadata: ").append(toIndentedString(governanceMetadata)).append("\n");
    sb.append("    moduleInfo: ").append(toIndentedString(moduleInfo)).append("\n");
    sb.append("    layoutNodeMap: ").append(toIndentedString(layoutNodeMap)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    startingNodeId: ").append(toIndentedString(startingNodeId)).append("\n");
    sb.append("    startTs: ").append(toIndentedString(startTs)).append("\n");
    sb.append("    endTs: ").append(toIndentedString(endTs)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    canRetry: ").append(toIndentedString(canRetry)).append("\n");
    sb.append("    showRetryHistory: ").append(toIndentedString(showRetryHistory)).append("\n");
    sb.append("    runSequence: ").append(toIndentedString(runSequence)).append("\n");
    sb.append("    successfulStagesCount: ").append(toIndentedString(successfulStagesCount)).append("\n");
    sb.append("    runningStagesCount: ").append(toIndentedString(runningStagesCount)).append("\n");
    sb.append("    failedStagesCount: ").append(toIndentedString(failedStagesCount)).append("\n");
    sb.append("    totalStagesCount: ").append(toIndentedString(totalStagesCount)).append("\n");
    sb.append("    gitDetails: ").append(toIndentedString(gitDetails)).append("\n");
    sb.append("    isStagesExecution: ").append(toIndentedString(isStagesExecution)).append("\n");
    sb.append("    stagesExecuted: ").append(toIndentedString(stagesExecuted)).append("\n");
    sb.append("    stagesExecutedNames: ").append(toIndentedString(stagesExecutedNames)).append("\n");
    sb.append("    stagesExecution: ").append(toIndentedString(stagesExecution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
