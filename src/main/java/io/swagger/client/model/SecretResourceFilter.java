/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * This has the filter information for the Secret in Harness.
 */
@Schema(description = "This has the filter information for the Secret in Harness.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class SecretResourceFilter {
  @SerializedName("identifiers")
  private List<String> identifiers = null;

  @SerializedName("searchTerm")
  private String searchTerm = null;

  /**
   * This is the list of the ENTITY types on which the filter will be applied.
   */
  @JsonAdapter(SecretTypesEnum.Adapter.class)
  public enum SecretTypesEnum {
    SECRETFILE("SecretFile"),
    SECRETTEXT("SecretText"),
    SSHKEY("SSHKey");

    private String value;

    SecretTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SecretTypesEnum fromValue(String input) {
      for (SecretTypesEnum b : SecretTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SecretTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecretTypesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SecretTypesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SecretTypesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("secretTypes")
  private List<SecretTypesEnum> secretTypes = null;

  /**
   * Gets or Sets sourceCategory
   */
  @JsonAdapter(SourceCategoryEnum.Adapter.class)
  public enum SourceCategoryEnum {
    CLOUD_PROVIDER("CLOUD_PROVIDER"),
    SECRET_MANAGER("SECRET_MANAGER"),
    CLOUD_COST("CLOUD_COST"),
    ARTIFACTORY("ARTIFACTORY"),
    CODE_REPO("CODE_REPO"),
    MONITORING("MONITORING"),
    TICKETING("TICKETING");

    private String value;

    SourceCategoryEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceCategoryEnum fromValue(String input) {
      for (SourceCategoryEnum b : SourceCategoryEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceCategoryEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SourceCategoryEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SourceCategoryEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("sourceCategory")
  private SourceCategoryEnum sourceCategory = null;

  @SerializedName("includeSecretsFromEverySubScope")
  private Boolean includeSecretsFromEverySubScope = null;

  public SecretResourceFilter identifiers(List<String> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public SecretResourceFilter addIdentifiersItem(String identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<String>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

   /**
   * This is the list of Entity Identifiers on which the filter will be applied.
   * @return identifiers
  **/
  @Schema(description = "This is the list of Entity Identifiers on which the filter will be applied.")
  public List<String> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(List<String> identifiers) {
    this.identifiers = identifiers;
  }

  public SecretResourceFilter searchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
    return this;
  }

   /**
   * Text to search/filter the Entity.
   * @return searchTerm
  **/
  @Schema(description = "Text to search/filter the Entity.")
  public String getSearchTerm() {
    return searchTerm;
  }

  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }

  public SecretResourceFilter secretTypes(List<SecretTypesEnum> secretTypes) {
    this.secretTypes = secretTypes;
    return this;
  }

  public SecretResourceFilter addSecretTypesItem(SecretTypesEnum secretTypesItem) {
    if (this.secretTypes == null) {
      this.secretTypes = new ArrayList<SecretTypesEnum>();
    }
    this.secretTypes.add(secretTypesItem);
    return this;
  }

   /**
   * This is the list of the ENTITY types on which the filter will be applied.
   * @return secretTypes
  **/
  @Schema(description = "This is the list of the ENTITY types on which the filter will be applied.")
  public List<SecretTypesEnum> getSecretTypes() {
    return secretTypes;
  }

  public void setSecretTypes(List<SecretTypesEnum> secretTypes) {
    this.secretTypes = secretTypes;
  }

  public SecretResourceFilter sourceCategory(SourceCategoryEnum sourceCategory) {
    this.sourceCategory = sourceCategory;
    return this;
  }

   /**
   * Get sourceCategory
   * @return sourceCategory
  **/
  @Schema(description = "")
  public SourceCategoryEnum getSourceCategory() {
    return sourceCategory;
  }

  public void setSourceCategory(SourceCategoryEnum sourceCategory) {
    this.sourceCategory = sourceCategory;
  }

  public SecretResourceFilter includeSecretsFromEverySubScope(Boolean includeSecretsFromEverySubScope) {
    this.includeSecretsFromEverySubScope = includeSecretsFromEverySubScope;
    return this;
  }

   /**
   * This is true if secrets are filtered at every subsequent scope. Otherwise, it is false.
   * @return includeSecretsFromEverySubScope
  **/
  @Schema(description = "This is true if secrets are filtered at every subsequent scope. Otherwise, it is false.")
  public Boolean isIncludeSecretsFromEverySubScope() {
    return includeSecretsFromEverySubScope;
  }

  public void setIncludeSecretsFromEverySubScope(Boolean includeSecretsFromEverySubScope) {
    this.includeSecretsFromEverySubScope = includeSecretsFromEverySubScope;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretResourceFilter secretResourceFilter = (SecretResourceFilter) o;
    return Objects.equals(this.identifiers, secretResourceFilter.identifiers) &&
        Objects.equals(this.searchTerm, secretResourceFilter.searchTerm) &&
        Objects.equals(this.secretTypes, secretResourceFilter.secretTypes) &&
        Objects.equals(this.sourceCategory, secretResourceFilter.sourceCategory) &&
        Objects.equals(this.includeSecretsFromEverySubScope, secretResourceFilter.includeSecretsFromEverySubScope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifiers, searchTerm, secretTypes, sourceCategory, includeSecretsFromEverySubScope);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretResourceFilter {\n");
    
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    secretTypes: ").append(toIndentedString(secretTypes)).append("\n");
    sb.append("    sourceCategory: ").append(toIndentedString(sourceCategory)).append("\n");
    sb.append("    includeSecretsFromEverySubScope: ").append(toIndentedString(includeSecretsFromEverySubScope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
