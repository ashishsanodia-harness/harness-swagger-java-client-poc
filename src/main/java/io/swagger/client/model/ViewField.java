/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * An individual Perspective field
 */
@Schema(description = "An individual Perspective field")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class ViewField {
  @SerializedName("fieldId")
  private String fieldId = null;

  @SerializedName("fieldName")
  private String fieldName = null;

  /**
   * Perspective filter Category, CLUSTER means Kubernetes
   */
  @JsonAdapter(IdentifierEnum.Adapter.class)
  public enum IdentifierEnum {
    CLUSTER("CLUSTER"),
    AWS("AWS"),
    GCP("GCP"),
    AZURE("AZURE"),
    COMMON("COMMON"),
    CUSTOM("CUSTOM"),
    BUSINESS_MAPPING("BUSINESS_MAPPING"),
    LABEL("LABEL");

    private String value;

    IdentifierEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IdentifierEnum fromValue(String input) {
      for (IdentifierEnum b : IdentifierEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IdentifierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdentifierEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public IdentifierEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return IdentifierEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("identifier")
  private IdentifierEnum identifier = null;

  @SerializedName("identifierName")
  private String identifierName = null;

  public ViewField fieldId(String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

   /**
   * Get fieldId
   * @return fieldId
  **/
  @Schema(description = "")
  public String getFieldId() {
    return fieldId;
  }

  public void setFieldId(String fieldId) {
    this.fieldId = fieldId;
  }

  public ViewField fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Get fieldName
   * @return fieldName
  **/
  @Schema(description = "")
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }

  public ViewField identifier(IdentifierEnum identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Perspective filter Category, CLUSTER means Kubernetes
   * @return identifier
  **/
  @Schema(description = "Perspective filter Category, CLUSTER means Kubernetes")
  public IdentifierEnum getIdentifier() {
    return identifier;
  }

  public void setIdentifier(IdentifierEnum identifier) {
    this.identifier = identifier;
  }

  public ViewField identifierName(String identifierName) {
    this.identifierName = identifierName;
    return this;
  }

   /**
   * Get identifierName
   * @return identifierName
  **/
  @Schema(description = "")
  public String getIdentifierName() {
    return identifierName;
  }

  public void setIdentifierName(String identifierName) {
    this.identifierName = identifierName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewField viewField = (ViewField) o;
    return Objects.equals(this.fieldId, viewField.fieldId) &&
        Objects.equals(this.fieldName, viewField.fieldName) &&
        Objects.equals(this.identifier, viewField.identifier) &&
        Objects.equals(this.identifierName, viewField.identifierName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldId, fieldName, identifier, identifierName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewField {\n");
    
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    identifierName: ").append(toIndentedString(identifierName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
