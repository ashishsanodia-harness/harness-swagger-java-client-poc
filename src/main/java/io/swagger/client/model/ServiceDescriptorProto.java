/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.MethodDescriptorProto;
import io.swagger.client.model.MethodDescriptorProtoOrBuilder;
import io.swagger.client.model.ParserServiceDescriptorProto;
import io.swagger.client.model.ServiceDescriptorProto;
import io.swagger.client.model.ServiceOptions;
import io.swagger.client.model.ServiceOptionsOrBuilder;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ServiceDescriptorProto
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class ServiceDescriptorProto {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  @SerializedName("options")
  private ServiceOptions options = null;

  @SerializedName("methodList")
  private List<MethodDescriptorProto> methodList = null;

  @SerializedName("nameBytes")
  private ByteString nameBytes = null;

  @SerializedName("methodCount")
  private Integer methodCount = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserServiceDescriptorProto parserForType = null;

  @SerializedName("defaultInstanceForType")
  private ServiceDescriptorProto defaultInstanceForType = null;

  @SerializedName("optionsOrBuilder")
  private ServiceOptionsOrBuilder optionsOrBuilder = null;

  @SerializedName("methodOrBuilderList")
  private List<MethodDescriptorProtoOrBuilder> methodOrBuilderList = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public ServiceDescriptorProto unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public ServiceDescriptorProto initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public ServiceDescriptorProto options(ServiceOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public ServiceOptions getOptions() {
    return options;
  }

  public void setOptions(ServiceOptions options) {
    this.options = options;
  }

  public ServiceDescriptorProto methodList(List<MethodDescriptorProto> methodList) {
    this.methodList = methodList;
    return this;
  }

  public ServiceDescriptorProto addMethodListItem(MethodDescriptorProto methodListItem) {
    if (this.methodList == null) {
      this.methodList = new ArrayList<MethodDescriptorProto>();
    }
    this.methodList.add(methodListItem);
    return this;
  }

   /**
   * Get methodList
   * @return methodList
  **/
  @Schema(description = "")
  public List<MethodDescriptorProto> getMethodList() {
    return methodList;
  }

  public void setMethodList(List<MethodDescriptorProto> methodList) {
    this.methodList = methodList;
  }

  public ServiceDescriptorProto nameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
    return this;
  }

   /**
   * Get nameBytes
   * @return nameBytes
  **/
  @Schema(description = "")
  public ByteString getNameBytes() {
    return nameBytes;
  }

  public void setNameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
  }

  public ServiceDescriptorProto methodCount(Integer methodCount) {
    this.methodCount = methodCount;
    return this;
  }

   /**
   * Get methodCount
   * @return methodCount
  **/
  @Schema(description = "")
  public Integer getMethodCount() {
    return methodCount;
  }

  public void setMethodCount(Integer methodCount) {
    this.methodCount = methodCount;
  }

  public ServiceDescriptorProto serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public ServiceDescriptorProto parserForType(ParserServiceDescriptorProto parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserServiceDescriptorProto getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserServiceDescriptorProto parserForType) {
    this.parserForType = parserForType;
  }

  public ServiceDescriptorProto defaultInstanceForType(ServiceDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public ServiceDescriptorProto getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(ServiceDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public ServiceDescriptorProto optionsOrBuilder(ServiceOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
    return this;
  }

   /**
   * Get optionsOrBuilder
   * @return optionsOrBuilder
  **/
  @Schema(description = "")
  public ServiceOptionsOrBuilder getOptionsOrBuilder() {
    return optionsOrBuilder;
  }

  public void setOptionsOrBuilder(ServiceOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
  }

  public ServiceDescriptorProto methodOrBuilderList(List<MethodDescriptorProtoOrBuilder> methodOrBuilderList) {
    this.methodOrBuilderList = methodOrBuilderList;
    return this;
  }

  public ServiceDescriptorProto addMethodOrBuilderListItem(MethodDescriptorProtoOrBuilder methodOrBuilderListItem) {
    if (this.methodOrBuilderList == null) {
      this.methodOrBuilderList = new ArrayList<MethodDescriptorProtoOrBuilder>();
    }
    this.methodOrBuilderList.add(methodOrBuilderListItem);
    return this;
  }

   /**
   * Get methodOrBuilderList
   * @return methodOrBuilderList
  **/
  @Schema(description = "")
  public List<MethodDescriptorProtoOrBuilder> getMethodOrBuilderList() {
    return methodOrBuilderList;
  }

  public void setMethodOrBuilderList(List<MethodDescriptorProtoOrBuilder> methodOrBuilderList) {
    this.methodOrBuilderList = methodOrBuilderList;
  }

  public ServiceDescriptorProto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ServiceDescriptorProto allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public ServiceDescriptorProto putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public ServiceDescriptorProto initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public ServiceDescriptorProto descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public ServiceDescriptorProto memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceDescriptorProto serviceDescriptorProto = (ServiceDescriptorProto) o;
    return Objects.equals(this.unknownFields, serviceDescriptorProto.unknownFields) &&
        Objects.equals(this.initialized, serviceDescriptorProto.initialized) &&
        Objects.equals(this.options, serviceDescriptorProto.options) &&
        Objects.equals(this.methodList, serviceDescriptorProto.methodList) &&
        Objects.equals(this.nameBytes, serviceDescriptorProto.nameBytes) &&
        Objects.equals(this.methodCount, serviceDescriptorProto.methodCount) &&
        Objects.equals(this.serializedSize, serviceDescriptorProto.serializedSize) &&
        Objects.equals(this.parserForType, serviceDescriptorProto.parserForType) &&
        Objects.equals(this.defaultInstanceForType, serviceDescriptorProto.defaultInstanceForType) &&
        Objects.equals(this.optionsOrBuilder, serviceDescriptorProto.optionsOrBuilder) &&
        Objects.equals(this.methodOrBuilderList, serviceDescriptorProto.methodOrBuilderList) &&
        Objects.equals(this.name, serviceDescriptorProto.name) &&
        Objects.equals(this.allFields, serviceDescriptorProto.allFields) &&
        Objects.equals(this.initializationErrorString, serviceDescriptorProto.initializationErrorString) &&
        Objects.equals(this.descriptorForType, serviceDescriptorProto.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, serviceDescriptorProto.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, options, methodList, nameBytes, methodCount, serializedSize, parserForType, defaultInstanceForType, optionsOrBuilder, methodOrBuilderList, name, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceDescriptorProto {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    methodList: ").append(toIndentedString(methodList)).append("\n");
    sb.append("    nameBytes: ").append(toIndentedString(nameBytes)).append("\n");
    sb.append("    methodCount: ").append(toIndentedString(methodCount)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    optionsOrBuilder: ").append(toIndentedString(optionsOrBuilder)).append("\n");
    sb.append("    methodOrBuilderList: ").append(toIndentedString(methodOrBuilderList)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
