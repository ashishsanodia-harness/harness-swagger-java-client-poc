/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.EnumDescriptorProto;
import io.swagger.client.model.EnumOptions;
import io.swagger.client.model.EnumOptionsOrBuilder;
import io.swagger.client.model.EnumReservedRange;
import io.swagger.client.model.EnumReservedRangeOrBuilder;
import io.swagger.client.model.EnumValueDescriptorProto;
import io.swagger.client.model.EnumValueDescriptorProtoOrBuilder;
import io.swagger.client.model.ParserEnumDescriptorProto;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * EnumDescriptorProto
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class EnumDescriptorProto {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  @SerializedName("options")
  private EnumOptions options = null;

  @SerializedName("nameBytes")
  private ByteString nameBytes = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserEnumDescriptorProto parserForType = null;

  @SerializedName("defaultInstanceForType")
  private EnumDescriptorProto defaultInstanceForType = null;

  @SerializedName("reservedRangeList")
  private List<EnumReservedRange> reservedRangeList = null;

  @SerializedName("reservedNameList")
  private List<String> reservedNameList = null;

  @SerializedName("optionsOrBuilder")
  private EnumOptionsOrBuilder optionsOrBuilder = null;

  @SerializedName("reservedRangeOrBuilderList")
  private List<EnumReservedRangeOrBuilder> reservedRangeOrBuilderList = null;

  @SerializedName("reservedRangeCount")
  private Integer reservedRangeCount = null;

  @SerializedName("reservedNameCount")
  private Integer reservedNameCount = null;

  @SerializedName("valueList")
  private List<EnumValueDescriptorProto> valueList = null;

  @SerializedName("valueOrBuilderList")
  private List<EnumValueDescriptorProtoOrBuilder> valueOrBuilderList = null;

  @SerializedName("valueCount")
  private Integer valueCount = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public EnumDescriptorProto unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public EnumDescriptorProto initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public EnumDescriptorProto options(EnumOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public EnumOptions getOptions() {
    return options;
  }

  public void setOptions(EnumOptions options) {
    this.options = options;
  }

  public EnumDescriptorProto nameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
    return this;
  }

   /**
   * Get nameBytes
   * @return nameBytes
  **/
  @Schema(description = "")
  public ByteString getNameBytes() {
    return nameBytes;
  }

  public void setNameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
  }

  public EnumDescriptorProto serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public EnumDescriptorProto parserForType(ParserEnumDescriptorProto parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserEnumDescriptorProto getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserEnumDescriptorProto parserForType) {
    this.parserForType = parserForType;
  }

  public EnumDescriptorProto defaultInstanceForType(EnumDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public EnumDescriptorProto getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(EnumDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public EnumDescriptorProto reservedRangeList(List<EnumReservedRange> reservedRangeList) {
    this.reservedRangeList = reservedRangeList;
    return this;
  }

  public EnumDescriptorProto addReservedRangeListItem(EnumReservedRange reservedRangeListItem) {
    if (this.reservedRangeList == null) {
      this.reservedRangeList = new ArrayList<EnumReservedRange>();
    }
    this.reservedRangeList.add(reservedRangeListItem);
    return this;
  }

   /**
   * Get reservedRangeList
   * @return reservedRangeList
  **/
  @Schema(description = "")
  public List<EnumReservedRange> getReservedRangeList() {
    return reservedRangeList;
  }

  public void setReservedRangeList(List<EnumReservedRange> reservedRangeList) {
    this.reservedRangeList = reservedRangeList;
  }

  public EnumDescriptorProto reservedNameList(List<String> reservedNameList) {
    this.reservedNameList = reservedNameList;
    return this;
  }

  public EnumDescriptorProto addReservedNameListItem(String reservedNameListItem) {
    if (this.reservedNameList == null) {
      this.reservedNameList = new ArrayList<String>();
    }
    this.reservedNameList.add(reservedNameListItem);
    return this;
  }

   /**
   * Get reservedNameList
   * @return reservedNameList
  **/
  @Schema(description = "")
  public List<String> getReservedNameList() {
    return reservedNameList;
  }

  public void setReservedNameList(List<String> reservedNameList) {
    this.reservedNameList = reservedNameList;
  }

  public EnumDescriptorProto optionsOrBuilder(EnumOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
    return this;
  }

   /**
   * Get optionsOrBuilder
   * @return optionsOrBuilder
  **/
  @Schema(description = "")
  public EnumOptionsOrBuilder getOptionsOrBuilder() {
    return optionsOrBuilder;
  }

  public void setOptionsOrBuilder(EnumOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
  }

  public EnumDescriptorProto reservedRangeOrBuilderList(List<EnumReservedRangeOrBuilder> reservedRangeOrBuilderList) {
    this.reservedRangeOrBuilderList = reservedRangeOrBuilderList;
    return this;
  }

  public EnumDescriptorProto addReservedRangeOrBuilderListItem(EnumReservedRangeOrBuilder reservedRangeOrBuilderListItem) {
    if (this.reservedRangeOrBuilderList == null) {
      this.reservedRangeOrBuilderList = new ArrayList<EnumReservedRangeOrBuilder>();
    }
    this.reservedRangeOrBuilderList.add(reservedRangeOrBuilderListItem);
    return this;
  }

   /**
   * Get reservedRangeOrBuilderList
   * @return reservedRangeOrBuilderList
  **/
  @Schema(description = "")
  public List<EnumReservedRangeOrBuilder> getReservedRangeOrBuilderList() {
    return reservedRangeOrBuilderList;
  }

  public void setReservedRangeOrBuilderList(List<EnumReservedRangeOrBuilder> reservedRangeOrBuilderList) {
    this.reservedRangeOrBuilderList = reservedRangeOrBuilderList;
  }

  public EnumDescriptorProto reservedRangeCount(Integer reservedRangeCount) {
    this.reservedRangeCount = reservedRangeCount;
    return this;
  }

   /**
   * Get reservedRangeCount
   * @return reservedRangeCount
  **/
  @Schema(description = "")
  public Integer getReservedRangeCount() {
    return reservedRangeCount;
  }

  public void setReservedRangeCount(Integer reservedRangeCount) {
    this.reservedRangeCount = reservedRangeCount;
  }

  public EnumDescriptorProto reservedNameCount(Integer reservedNameCount) {
    this.reservedNameCount = reservedNameCount;
    return this;
  }

   /**
   * Get reservedNameCount
   * @return reservedNameCount
  **/
  @Schema(description = "")
  public Integer getReservedNameCount() {
    return reservedNameCount;
  }

  public void setReservedNameCount(Integer reservedNameCount) {
    this.reservedNameCount = reservedNameCount;
  }

  public EnumDescriptorProto valueList(List<EnumValueDescriptorProto> valueList) {
    this.valueList = valueList;
    return this;
  }

  public EnumDescriptorProto addValueListItem(EnumValueDescriptorProto valueListItem) {
    if (this.valueList == null) {
      this.valueList = new ArrayList<EnumValueDescriptorProto>();
    }
    this.valueList.add(valueListItem);
    return this;
  }

   /**
   * Get valueList
   * @return valueList
  **/
  @Schema(description = "")
  public List<EnumValueDescriptorProto> getValueList() {
    return valueList;
  }

  public void setValueList(List<EnumValueDescriptorProto> valueList) {
    this.valueList = valueList;
  }

  public EnumDescriptorProto valueOrBuilderList(List<EnumValueDescriptorProtoOrBuilder> valueOrBuilderList) {
    this.valueOrBuilderList = valueOrBuilderList;
    return this;
  }

  public EnumDescriptorProto addValueOrBuilderListItem(EnumValueDescriptorProtoOrBuilder valueOrBuilderListItem) {
    if (this.valueOrBuilderList == null) {
      this.valueOrBuilderList = new ArrayList<EnumValueDescriptorProtoOrBuilder>();
    }
    this.valueOrBuilderList.add(valueOrBuilderListItem);
    return this;
  }

   /**
   * Get valueOrBuilderList
   * @return valueOrBuilderList
  **/
  @Schema(description = "")
  public List<EnumValueDescriptorProtoOrBuilder> getValueOrBuilderList() {
    return valueOrBuilderList;
  }

  public void setValueOrBuilderList(List<EnumValueDescriptorProtoOrBuilder> valueOrBuilderList) {
    this.valueOrBuilderList = valueOrBuilderList;
  }

  public EnumDescriptorProto valueCount(Integer valueCount) {
    this.valueCount = valueCount;
    return this;
  }

   /**
   * Get valueCount
   * @return valueCount
  **/
  @Schema(description = "")
  public Integer getValueCount() {
    return valueCount;
  }

  public void setValueCount(Integer valueCount) {
    this.valueCount = valueCount;
  }

  public EnumDescriptorProto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public EnumDescriptorProto allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public EnumDescriptorProto putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public EnumDescriptorProto initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public EnumDescriptorProto descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public EnumDescriptorProto memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnumDescriptorProto enumDescriptorProto = (EnumDescriptorProto) o;
    return Objects.equals(this.unknownFields, enumDescriptorProto.unknownFields) &&
        Objects.equals(this.initialized, enumDescriptorProto.initialized) &&
        Objects.equals(this.options, enumDescriptorProto.options) &&
        Objects.equals(this.nameBytes, enumDescriptorProto.nameBytes) &&
        Objects.equals(this.serializedSize, enumDescriptorProto.serializedSize) &&
        Objects.equals(this.parserForType, enumDescriptorProto.parserForType) &&
        Objects.equals(this.defaultInstanceForType, enumDescriptorProto.defaultInstanceForType) &&
        Objects.equals(this.reservedRangeList, enumDescriptorProto.reservedRangeList) &&
        Objects.equals(this.reservedNameList, enumDescriptorProto.reservedNameList) &&
        Objects.equals(this.optionsOrBuilder, enumDescriptorProto.optionsOrBuilder) &&
        Objects.equals(this.reservedRangeOrBuilderList, enumDescriptorProto.reservedRangeOrBuilderList) &&
        Objects.equals(this.reservedRangeCount, enumDescriptorProto.reservedRangeCount) &&
        Objects.equals(this.reservedNameCount, enumDescriptorProto.reservedNameCount) &&
        Objects.equals(this.valueList, enumDescriptorProto.valueList) &&
        Objects.equals(this.valueOrBuilderList, enumDescriptorProto.valueOrBuilderList) &&
        Objects.equals(this.valueCount, enumDescriptorProto.valueCount) &&
        Objects.equals(this.name, enumDescriptorProto.name) &&
        Objects.equals(this.allFields, enumDescriptorProto.allFields) &&
        Objects.equals(this.initializationErrorString, enumDescriptorProto.initializationErrorString) &&
        Objects.equals(this.descriptorForType, enumDescriptorProto.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, enumDescriptorProto.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, options, nameBytes, serializedSize, parserForType, defaultInstanceForType, reservedRangeList, reservedNameList, optionsOrBuilder, reservedRangeOrBuilderList, reservedRangeCount, reservedNameCount, valueList, valueOrBuilderList, valueCount, name, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnumDescriptorProto {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    nameBytes: ").append(toIndentedString(nameBytes)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    reservedRangeList: ").append(toIndentedString(reservedRangeList)).append("\n");
    sb.append("    reservedNameList: ").append(toIndentedString(reservedNameList)).append("\n");
    sb.append("    optionsOrBuilder: ").append(toIndentedString(optionsOrBuilder)).append("\n");
    sb.append("    reservedRangeOrBuilderList: ").append(toIndentedString(reservedRangeOrBuilderList)).append("\n");
    sb.append("    reservedRangeCount: ").append(toIndentedString(reservedRangeCount)).append("\n");
    sb.append("    reservedNameCount: ").append(toIndentedString(reservedNameCount)).append("\n");
    sb.append("    valueList: ").append(toIndentedString(valueList)).append("\n");
    sb.append("    valueOrBuilderList: ").append(toIndentedString(valueOrBuilderList)).append("\n");
    sb.append("    valueCount: ").append(toIndentedString(valueCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
