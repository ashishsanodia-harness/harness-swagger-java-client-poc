/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Properties of the Filter entity defined in Harness.
 */
@Schema(description = "Properties of the Filter entity defined in Harness.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")

public class FilterProperties {
  @SerializedName("tags")
  private Map<String, String> tags = null;

  /**
   * This specifies the corresponding Entity of the filter.
   */
  @JsonAdapter(FilterTypeEnum.Adapter.class)
  public enum FilterTypeEnum {
    CONNECTOR("CONNECTOR"),
    DELEGATEPROFILE("DELEGATEPROFILE"),
    DELEGATE("DELEGATE"),
    PIPELINESETUP("PIPELINESETUP"),
    PIPELINEEXECUTION("PIPELINEEXECUTION"),
    DEPLOYMENT("DEPLOYMENT"),
    AUDIT("AUDIT"),
    TEMPLATE("TEMPLATE");

    private String value;

    FilterTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FilterTypeEnum fromValue(String input) {
      for (FilterTypeEnum b : FilterTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FilterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FilterTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FilterTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("filterType")
  private FilterTypeEnum filterType = null;

  public FilterProperties() {
    this.filterType = this.getClass().getSimpleName();
  }
  public FilterProperties tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public FilterProperties putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<String, String>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Filter tags as a key-value pair.
   * @return tags
  **/
  @Schema(description = "Filter tags as a key-value pair.")
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }

  public FilterProperties filterType(FilterTypeEnum filterType) {
    this.filterType = filterType;
    return this;
  }

   /**
   * This specifies the corresponding Entity of the filter.
   * @return filterType
  **/
  @Schema(description = "This specifies the corresponding Entity of the filter.")
  public FilterTypeEnum getFilterType() {
    return filterType;
  }

  public void setFilterType(FilterTypeEnum filterType) {
    this.filterType = filterType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterProperties filterProperties = (FilterProperties) o;
    return Objects.equals(this.tags, filterProperties.tags) &&
        Objects.equals(this.filterType, filterProperties.filterType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, filterType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterProperties {\n");
    
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
