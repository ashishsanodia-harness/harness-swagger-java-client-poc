/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.FieldDescriptorProto;
import io.swagger.client.model.FieldOptions;
import io.swagger.client.model.FieldOptionsOrBuilder;
import io.swagger.client.model.ParserFieldDescriptorProto;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * FieldDescriptorProto
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class FieldDescriptorProto {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  /**
   * Gets or Sets label
   */
  @JsonAdapter(LabelEnum.Adapter.class)
  public enum LabelEnum {
    OPTIONAL("LABEL_OPTIONAL"),
    REQUIRED("LABEL_REQUIRED"),
    REPEATED("LABEL_REPEATED");

    private String value;

    LabelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LabelEnum fromValue(String input) {
      for (LabelEnum b : LabelEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LabelEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LabelEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("label")
  private LabelEnum label = null;

  @SerializedName("options")
  private FieldOptions options = null;

  @SerializedName("nameBytes")
  private ByteString nameBytes = null;

  @SerializedName("oneofIndex")
  private Integer oneofIndex = null;

  @SerializedName("extendee")
  private String extendee = null;

  @SerializedName("jsonName")
  private String jsonName = null;

  @SerializedName("typeNameBytes")
  private ByteString typeNameBytes = null;

  @SerializedName("extendeeBytes")
  private ByteString extendeeBytes = null;

  @SerializedName("defaultValueBytes")
  private ByteString defaultValueBytes = null;

  @SerializedName("jsonNameBytes")
  private ByteString jsonNameBytes = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserFieldDescriptorProto parserForType = null;

  @SerializedName("defaultInstanceForType")
  private FieldDescriptorProto defaultInstanceForType = null;

  @SerializedName("optionsOrBuilder")
  private FieldOptionsOrBuilder optionsOrBuilder = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("typeName")
  private String typeName = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DOUBLE("TYPE_DOUBLE"),
    FLOAT("TYPE_FLOAT"),
    INT64("TYPE_INT64"),
    UINT64("TYPE_UINT64"),
    INT32("TYPE_INT32"),
    FIXED64("TYPE_FIXED64"),
    FIXED32("TYPE_FIXED32"),
    BOOL("TYPE_BOOL"),
    STRING("TYPE_STRING"),
    GROUP("TYPE_GROUP"),
    MESSAGE("TYPE_MESSAGE"),
    BYTES("TYPE_BYTES"),
    UINT32("TYPE_UINT32"),
    ENUM("TYPE_ENUM"),
    SFIXED32("TYPE_SFIXED32"),
    SFIXED64("TYPE_SFIXED64"),
    SINT32("TYPE_SINT32"),
    SINT64("TYPE_SINT64");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("defaultValue")
  private String defaultValue = null;

  @SerializedName("number")
  private Integer number = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public FieldDescriptorProto unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public FieldDescriptorProto initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public FieldDescriptorProto label(LabelEnum label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(description = "")
  public LabelEnum getLabel() {
    return label;
  }

  public void setLabel(LabelEnum label) {
    this.label = label;
  }

  public FieldDescriptorProto options(FieldOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public FieldOptions getOptions() {
    return options;
  }

  public void setOptions(FieldOptions options) {
    this.options = options;
  }

  public FieldDescriptorProto nameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
    return this;
  }

   /**
   * Get nameBytes
   * @return nameBytes
  **/
  @Schema(description = "")
  public ByteString getNameBytes() {
    return nameBytes;
  }

  public void setNameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
  }

  public FieldDescriptorProto oneofIndex(Integer oneofIndex) {
    this.oneofIndex = oneofIndex;
    return this;
  }

   /**
   * Get oneofIndex
   * @return oneofIndex
  **/
  @Schema(description = "")
  public Integer getOneofIndex() {
    return oneofIndex;
  }

  public void setOneofIndex(Integer oneofIndex) {
    this.oneofIndex = oneofIndex;
  }

  public FieldDescriptorProto extendee(String extendee) {
    this.extendee = extendee;
    return this;
  }

   /**
   * Get extendee
   * @return extendee
  **/
  @Schema(description = "")
  public String getExtendee() {
    return extendee;
  }

  public void setExtendee(String extendee) {
    this.extendee = extendee;
  }

  public FieldDescriptorProto jsonName(String jsonName) {
    this.jsonName = jsonName;
    return this;
  }

   /**
   * Get jsonName
   * @return jsonName
  **/
  @Schema(description = "")
  public String getJsonName() {
    return jsonName;
  }

  public void setJsonName(String jsonName) {
    this.jsonName = jsonName;
  }

  public FieldDescriptorProto typeNameBytes(ByteString typeNameBytes) {
    this.typeNameBytes = typeNameBytes;
    return this;
  }

   /**
   * Get typeNameBytes
   * @return typeNameBytes
  **/
  @Schema(description = "")
  public ByteString getTypeNameBytes() {
    return typeNameBytes;
  }

  public void setTypeNameBytes(ByteString typeNameBytes) {
    this.typeNameBytes = typeNameBytes;
  }

  public FieldDescriptorProto extendeeBytes(ByteString extendeeBytes) {
    this.extendeeBytes = extendeeBytes;
    return this;
  }

   /**
   * Get extendeeBytes
   * @return extendeeBytes
  **/
  @Schema(description = "")
  public ByteString getExtendeeBytes() {
    return extendeeBytes;
  }

  public void setExtendeeBytes(ByteString extendeeBytes) {
    this.extendeeBytes = extendeeBytes;
  }

  public FieldDescriptorProto defaultValueBytes(ByteString defaultValueBytes) {
    this.defaultValueBytes = defaultValueBytes;
    return this;
  }

   /**
   * Get defaultValueBytes
   * @return defaultValueBytes
  **/
  @Schema(description = "")
  public ByteString getDefaultValueBytes() {
    return defaultValueBytes;
  }

  public void setDefaultValueBytes(ByteString defaultValueBytes) {
    this.defaultValueBytes = defaultValueBytes;
  }

  public FieldDescriptorProto jsonNameBytes(ByteString jsonNameBytes) {
    this.jsonNameBytes = jsonNameBytes;
    return this;
  }

   /**
   * Get jsonNameBytes
   * @return jsonNameBytes
  **/
  @Schema(description = "")
  public ByteString getJsonNameBytes() {
    return jsonNameBytes;
  }

  public void setJsonNameBytes(ByteString jsonNameBytes) {
    this.jsonNameBytes = jsonNameBytes;
  }

  public FieldDescriptorProto serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public FieldDescriptorProto parserForType(ParserFieldDescriptorProto parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserFieldDescriptorProto getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserFieldDescriptorProto parserForType) {
    this.parserForType = parserForType;
  }

  public FieldDescriptorProto defaultInstanceForType(FieldDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public FieldDescriptorProto getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(FieldDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public FieldDescriptorProto optionsOrBuilder(FieldOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
    return this;
  }

   /**
   * Get optionsOrBuilder
   * @return optionsOrBuilder
  **/
  @Schema(description = "")
  public FieldOptionsOrBuilder getOptionsOrBuilder() {
    return optionsOrBuilder;
  }

  public void setOptionsOrBuilder(FieldOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
  }

  public FieldDescriptorProto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FieldDescriptorProto typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

   /**
   * Get typeName
   * @return typeName
  **/
  @Schema(description = "")
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }

  public FieldDescriptorProto type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public FieldDescriptorProto defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @Schema(description = "")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public FieldDescriptorProto number(Integer number) {
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @Schema(description = "")
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }

  public FieldDescriptorProto allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public FieldDescriptorProto putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public FieldDescriptorProto initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public FieldDescriptorProto descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public FieldDescriptorProto memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldDescriptorProto fieldDescriptorProto = (FieldDescriptorProto) o;
    return Objects.equals(this.unknownFields, fieldDescriptorProto.unknownFields) &&
        Objects.equals(this.initialized, fieldDescriptorProto.initialized) &&
        Objects.equals(this.label, fieldDescriptorProto.label) &&
        Objects.equals(this.options, fieldDescriptorProto.options) &&
        Objects.equals(this.nameBytes, fieldDescriptorProto.nameBytes) &&
        Objects.equals(this.oneofIndex, fieldDescriptorProto.oneofIndex) &&
        Objects.equals(this.extendee, fieldDescriptorProto.extendee) &&
        Objects.equals(this.jsonName, fieldDescriptorProto.jsonName) &&
        Objects.equals(this.typeNameBytes, fieldDescriptorProto.typeNameBytes) &&
        Objects.equals(this.extendeeBytes, fieldDescriptorProto.extendeeBytes) &&
        Objects.equals(this.defaultValueBytes, fieldDescriptorProto.defaultValueBytes) &&
        Objects.equals(this.jsonNameBytes, fieldDescriptorProto.jsonNameBytes) &&
        Objects.equals(this.serializedSize, fieldDescriptorProto.serializedSize) &&
        Objects.equals(this.parserForType, fieldDescriptorProto.parserForType) &&
        Objects.equals(this.defaultInstanceForType, fieldDescriptorProto.defaultInstanceForType) &&
        Objects.equals(this.optionsOrBuilder, fieldDescriptorProto.optionsOrBuilder) &&
        Objects.equals(this.name, fieldDescriptorProto.name) &&
        Objects.equals(this.typeName, fieldDescriptorProto.typeName) &&
        Objects.equals(this.type, fieldDescriptorProto.type) &&
        Objects.equals(this.defaultValue, fieldDescriptorProto.defaultValue) &&
        Objects.equals(this.number, fieldDescriptorProto.number) &&
        Objects.equals(this.allFields, fieldDescriptorProto.allFields) &&
        Objects.equals(this.initializationErrorString, fieldDescriptorProto.initializationErrorString) &&
        Objects.equals(this.descriptorForType, fieldDescriptorProto.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, fieldDescriptorProto.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, label, options, nameBytes, oneofIndex, extendee, jsonName, typeNameBytes, extendeeBytes, defaultValueBytes, jsonNameBytes, serializedSize, parserForType, defaultInstanceForType, optionsOrBuilder, name, typeName, type, defaultValue, number, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldDescriptorProto {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    nameBytes: ").append(toIndentedString(nameBytes)).append("\n");
    sb.append("    oneofIndex: ").append(toIndentedString(oneofIndex)).append("\n");
    sb.append("    extendee: ").append(toIndentedString(extendee)).append("\n");
    sb.append("    jsonName: ").append(toIndentedString(jsonName)).append("\n");
    sb.append("    typeNameBytes: ").append(toIndentedString(typeNameBytes)).append("\n");
    sb.append("    extendeeBytes: ").append(toIndentedString(extendeeBytes)).append("\n");
    sb.append("    defaultValueBytes: ").append(toIndentedString(defaultValueBytes)).append("\n");
    sb.append("    jsonNameBytes: ").append(toIndentedString(jsonNameBytes)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    optionsOrBuilder: ").append(toIndentedString(optionsOrBuilder)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
