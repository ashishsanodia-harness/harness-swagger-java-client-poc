/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.NamePart;
import io.swagger.client.model.NamePartOrBuilder;
import io.swagger.client.model.ParserUninterpretedOption;
import io.swagger.client.model.UninterpretedOption;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * UninterpretedOption
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class UninterpretedOption {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  @SerializedName("stringValue")
  private ByteString stringValue = null;

  @SerializedName("doubleValue")
  private Double doubleValue = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserUninterpretedOption parserForType = null;

  @SerializedName("defaultInstanceForType")
  private UninterpretedOption defaultInstanceForType = null;

  @SerializedName("nameList")
  private List<NamePart> nameList = null;

  @SerializedName("nameOrBuilderList")
  private List<NamePartOrBuilder> nameOrBuilderList = null;

  @SerializedName("identifierValue")
  private String identifierValue = null;

  @SerializedName("identifierValueBytes")
  private ByteString identifierValueBytes = null;

  @SerializedName("positiveIntValue")
  private Long positiveIntValue = null;

  @SerializedName("negativeIntValue")
  private Long negativeIntValue = null;

  @SerializedName("aggregateValue")
  private String aggregateValue = null;

  @SerializedName("aggregateValueBytes")
  private ByteString aggregateValueBytes = null;

  @SerializedName("nameCount")
  private Integer nameCount = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public UninterpretedOption unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public UninterpretedOption initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public UninterpretedOption stringValue(ByteString stringValue) {
    this.stringValue = stringValue;
    return this;
  }

   /**
   * Get stringValue
   * @return stringValue
  **/
  @Schema(description = "")
  public ByteString getStringValue() {
    return stringValue;
  }

  public void setStringValue(ByteString stringValue) {
    this.stringValue = stringValue;
  }

  public UninterpretedOption doubleValue(Double doubleValue) {
    this.doubleValue = doubleValue;
    return this;
  }

   /**
   * Get doubleValue
   * @return doubleValue
  **/
  @Schema(description = "")
  public Double getDoubleValue() {
    return doubleValue;
  }

  public void setDoubleValue(Double doubleValue) {
    this.doubleValue = doubleValue;
  }

  public UninterpretedOption serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public UninterpretedOption parserForType(ParserUninterpretedOption parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserUninterpretedOption getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserUninterpretedOption parserForType) {
    this.parserForType = parserForType;
  }

  public UninterpretedOption defaultInstanceForType(UninterpretedOption defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public UninterpretedOption getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(UninterpretedOption defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public UninterpretedOption nameList(List<NamePart> nameList) {
    this.nameList = nameList;
    return this;
  }

  public UninterpretedOption addNameListItem(NamePart nameListItem) {
    if (this.nameList == null) {
      this.nameList = new ArrayList<NamePart>();
    }
    this.nameList.add(nameListItem);
    return this;
  }

   /**
   * Get nameList
   * @return nameList
  **/
  @Schema(description = "")
  public List<NamePart> getNameList() {
    return nameList;
  }

  public void setNameList(List<NamePart> nameList) {
    this.nameList = nameList;
  }

  public UninterpretedOption nameOrBuilderList(List<NamePartOrBuilder> nameOrBuilderList) {
    this.nameOrBuilderList = nameOrBuilderList;
    return this;
  }

  public UninterpretedOption addNameOrBuilderListItem(NamePartOrBuilder nameOrBuilderListItem) {
    if (this.nameOrBuilderList == null) {
      this.nameOrBuilderList = new ArrayList<NamePartOrBuilder>();
    }
    this.nameOrBuilderList.add(nameOrBuilderListItem);
    return this;
  }

   /**
   * Get nameOrBuilderList
   * @return nameOrBuilderList
  **/
  @Schema(description = "")
  public List<NamePartOrBuilder> getNameOrBuilderList() {
    return nameOrBuilderList;
  }

  public void setNameOrBuilderList(List<NamePartOrBuilder> nameOrBuilderList) {
    this.nameOrBuilderList = nameOrBuilderList;
  }

  public UninterpretedOption identifierValue(String identifierValue) {
    this.identifierValue = identifierValue;
    return this;
  }

   /**
   * Get identifierValue
   * @return identifierValue
  **/
  @Schema(description = "")
  public String getIdentifierValue() {
    return identifierValue;
  }

  public void setIdentifierValue(String identifierValue) {
    this.identifierValue = identifierValue;
  }

  public UninterpretedOption identifierValueBytes(ByteString identifierValueBytes) {
    this.identifierValueBytes = identifierValueBytes;
    return this;
  }

   /**
   * Get identifierValueBytes
   * @return identifierValueBytes
  **/
  @Schema(description = "")
  public ByteString getIdentifierValueBytes() {
    return identifierValueBytes;
  }

  public void setIdentifierValueBytes(ByteString identifierValueBytes) {
    this.identifierValueBytes = identifierValueBytes;
  }

  public UninterpretedOption positiveIntValue(Long positiveIntValue) {
    this.positiveIntValue = positiveIntValue;
    return this;
  }

   /**
   * Get positiveIntValue
   * @return positiveIntValue
  **/
  @Schema(description = "")
  public Long getPositiveIntValue() {
    return positiveIntValue;
  }

  public void setPositiveIntValue(Long positiveIntValue) {
    this.positiveIntValue = positiveIntValue;
  }

  public UninterpretedOption negativeIntValue(Long negativeIntValue) {
    this.negativeIntValue = negativeIntValue;
    return this;
  }

   /**
   * Get negativeIntValue
   * @return negativeIntValue
  **/
  @Schema(description = "")
  public Long getNegativeIntValue() {
    return negativeIntValue;
  }

  public void setNegativeIntValue(Long negativeIntValue) {
    this.negativeIntValue = negativeIntValue;
  }

  public UninterpretedOption aggregateValue(String aggregateValue) {
    this.aggregateValue = aggregateValue;
    return this;
  }

   /**
   * Get aggregateValue
   * @return aggregateValue
  **/
  @Schema(description = "")
  public String getAggregateValue() {
    return aggregateValue;
  }

  public void setAggregateValue(String aggregateValue) {
    this.aggregateValue = aggregateValue;
  }

  public UninterpretedOption aggregateValueBytes(ByteString aggregateValueBytes) {
    this.aggregateValueBytes = aggregateValueBytes;
    return this;
  }

   /**
   * Get aggregateValueBytes
   * @return aggregateValueBytes
  **/
  @Schema(description = "")
  public ByteString getAggregateValueBytes() {
    return aggregateValueBytes;
  }

  public void setAggregateValueBytes(ByteString aggregateValueBytes) {
    this.aggregateValueBytes = aggregateValueBytes;
  }

  public UninterpretedOption nameCount(Integer nameCount) {
    this.nameCount = nameCount;
    return this;
  }

   /**
   * Get nameCount
   * @return nameCount
  **/
  @Schema(description = "")
  public Integer getNameCount() {
    return nameCount;
  }

  public void setNameCount(Integer nameCount) {
    this.nameCount = nameCount;
  }

  public UninterpretedOption allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public UninterpretedOption putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public UninterpretedOption initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public UninterpretedOption descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public UninterpretedOption memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UninterpretedOption uninterpretedOption = (UninterpretedOption) o;
    return Objects.equals(this.unknownFields, uninterpretedOption.unknownFields) &&
        Objects.equals(this.initialized, uninterpretedOption.initialized) &&
        Objects.equals(this.stringValue, uninterpretedOption.stringValue) &&
        Objects.equals(this.doubleValue, uninterpretedOption.doubleValue) &&
        Objects.equals(this.serializedSize, uninterpretedOption.serializedSize) &&
        Objects.equals(this.parserForType, uninterpretedOption.parserForType) &&
        Objects.equals(this.defaultInstanceForType, uninterpretedOption.defaultInstanceForType) &&
        Objects.equals(this.nameList, uninterpretedOption.nameList) &&
        Objects.equals(this.nameOrBuilderList, uninterpretedOption.nameOrBuilderList) &&
        Objects.equals(this.identifierValue, uninterpretedOption.identifierValue) &&
        Objects.equals(this.identifierValueBytes, uninterpretedOption.identifierValueBytes) &&
        Objects.equals(this.positiveIntValue, uninterpretedOption.positiveIntValue) &&
        Objects.equals(this.negativeIntValue, uninterpretedOption.negativeIntValue) &&
        Objects.equals(this.aggregateValue, uninterpretedOption.aggregateValue) &&
        Objects.equals(this.aggregateValueBytes, uninterpretedOption.aggregateValueBytes) &&
        Objects.equals(this.nameCount, uninterpretedOption.nameCount) &&
        Objects.equals(this.allFields, uninterpretedOption.allFields) &&
        Objects.equals(this.initializationErrorString, uninterpretedOption.initializationErrorString) &&
        Objects.equals(this.descriptorForType, uninterpretedOption.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, uninterpretedOption.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, stringValue, doubleValue, serializedSize, parserForType, defaultInstanceForType, nameList, nameOrBuilderList, identifierValue, identifierValueBytes, positiveIntValue, negativeIntValue, aggregateValue, aggregateValueBytes, nameCount, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UninterpretedOption {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    doubleValue: ").append(toIndentedString(doubleValue)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    nameList: ").append(toIndentedString(nameList)).append("\n");
    sb.append("    nameOrBuilderList: ").append(toIndentedString(nameOrBuilderList)).append("\n");
    sb.append("    identifierValue: ").append(toIndentedString(identifierValue)).append("\n");
    sb.append("    identifierValueBytes: ").append(toIndentedString(identifierValueBytes)).append("\n");
    sb.append("    positiveIntValue: ").append(toIndentedString(positiveIntValue)).append("\n");
    sb.append("    negativeIntValue: ").append(toIndentedString(negativeIntValue)).append("\n");
    sb.append("    aggregateValue: ").append(toIndentedString(aggregateValue)).append("\n");
    sb.append("    aggregateValueBytes: ").append(toIndentedString(aggregateValueBytes)).append("\n");
    sb.append("    nameCount: ").append(toIndentedString(nameCount)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
