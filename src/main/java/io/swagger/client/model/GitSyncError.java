/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.GitSyncErrorDetails;
import io.swagger.client.model.Scope;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * This contains Git Sync Error Details
 */
@Schema(description = "This contains Git Sync Error Details")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class GitSyncError {
  @SerializedName("accountIdentifier")
  private String accountIdentifier = null;

  @SerializedName("repoUrl")
  private String repoUrl = null;

  @SerializedName("repoId")
  private String repoId = null;

  @SerializedName("branchName")
  private String branchName = null;

  @SerializedName("scopes")
  private List<Scope> scopes = null;

  /**
   * Type of operation done in file
   */
  @JsonAdapter(ChangeTypeEnum.Adapter.class)
  public enum ChangeTypeEnum {
    ADD("ADD"),
    RENAME("RENAME"),
    MODIFY("MODIFY"),
    DELETE("DELETE"),
    NONE("NONE");

    private String value;

    ChangeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChangeTypeEnum fromValue(String input) {
      for (ChangeTypeEnum b : ChangeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChangeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("changeType")
  private ChangeTypeEnum changeType = null;

  @SerializedName("completeFilePath")
  private String completeFilePath = null;

  /**
   * Entity Type
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    PROJECTS("Projects"),
    PIPELINES("Pipelines"),
    PIPELINESTEPS("PipelineSteps"),
    HTTP("Http"),
    JIRACREATE("JiraCreate"),
    JIRAUPDATE("JiraUpdate"),
    JIRAAPPROVAL("JiraApproval"),
    HARNESSAPPROVAL("HarnessApproval"),
    BARRIER("Barrier"),
    SHELLSCRIPT("ShellScript"),
    K8SCANARYDEPLOY("K8sCanaryDeploy"),
    CONNECTORS("Connectors"),
    SECRETS("Secrets"),
    SERVICE("Service"),
    ENVIRONMENT("Environment"),
    INPUTSETS("InputSets"),
    CVCONFIG("CvConfig"),
    VERIFY("Verify"),
    DELEGATES("Delegates"),
    DELEGATECONFIGURATIONS("DelegateConfigurations"),
    CVVERIFICATIONJOB("CvVerificationJob"),
    INTEGRATIONSTAGE("IntegrationStage"),
    INTEGRATIONSTEPS("IntegrationSteps"),
    CVKUBERNETESACTIVITYSOURCE("CvKubernetesActivitySource"),
    DEPLOYMENTSTEPS("DeploymentSteps"),
    DEPLOYMENTSTAGE("DeploymentStage"),
    APPROVALSTAGE("ApprovalStage"),
    FEATUREFLAGSTAGE("FeatureFlagStage"),
    TEMPLATE("Template"),
    TRIGGERS("Triggers"),
    MONITOREDSERVICE("MonitoredService"),
    GITREPOSITORIES("GitRepositories"),
    FEATUREFLAGS("FeatureFlags"),
    SERVICENOWAPPROVAL("ServiceNowApproval");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EntityTypeEnum fromValue(String input) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EntityTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("entityType")
  private EntityTypeEnum entityType = null;

  @SerializedName("failureReason")
  private String failureReason = null;

  /**
   * Status of Git Sync Error
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    DISCARDED("DISCARDED"),
    EXPIRED("EXPIRED"),
    RESOLVED("RESOLVED"),
    OVERRIDDEN("OVERRIDDEN");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  /**
   * Type of Git Sync Error
   */
  @JsonAdapter(ErrorTypeEnum.Adapter.class)
  public enum ErrorTypeEnum {
    GIT_TO_HARNESS("GIT_TO_HARNESS"),
    CONNECTIVITY_ISSUE("CONNECTIVITY_ISSUE"),
    FULL_SYNC("FULL_SYNC");

    private String value;

    ErrorTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ErrorTypeEnum fromValue(String input) {
      for (ErrorTypeEnum b : ErrorTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ErrorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ErrorTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ErrorTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("errorType")
  private ErrorTypeEnum errorType = null;

  @SerializedName("additionalErrorDetails")
  private GitSyncErrorDetails additionalErrorDetails = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  public GitSyncError accountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Account Identifier for the Entity
   * @return accountIdentifier
  **/
  @Schema(description = "Account Identifier for the Entity")
  public String getAccountIdentifier() {
    return accountIdentifier;
  }

  public void setAccountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
  }

  public GitSyncError repoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
    return this;
  }

   /**
   * Repo URL
   * @return repoUrl
  **/
  @Schema(description = "Repo URL")
  public String getRepoUrl() {
    return repoUrl;
  }

  public void setRepoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
  }

  public GitSyncError repoId(String repoId) {
    this.repoId = repoId;
    return this;
  }

   /**
   * Git Sync Config Id
   * @return repoId
  **/
  @Schema(description = "Git Sync Config Id")
  public String getRepoId() {
    return repoId;
  }

  public void setRepoId(String repoId) {
    this.repoId = repoId;
  }

  public GitSyncError branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

   /**
   * Branch Name
   * @return branchName
  **/
  @Schema(description = "Branch Name")
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }

  public GitSyncError scopes(List<Scope> scopes) {
    this.scopes = scopes;
    return this;
  }

  public GitSyncError addScopesItem(Scope scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<Scope>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * List of scope of the Git Sync Error
   * @return scopes
  **/
  @Schema(description = "List of scope of the Git Sync Error")
  public List<Scope> getScopes() {
    return scopes;
  }

  public void setScopes(List<Scope> scopes) {
    this.scopes = scopes;
  }

  public GitSyncError changeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
    return this;
  }

   /**
   * Type of operation done in file
   * @return changeType
  **/
  @Schema(description = "Type of operation done in file")
  public ChangeTypeEnum getChangeType() {
    return changeType;
  }

  public void setChangeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
  }

  public GitSyncError completeFilePath(String completeFilePath) {
    this.completeFilePath = completeFilePath;
    return this;
  }

   /**
   * Complete File Path of the Entity
   * @return completeFilePath
  **/
  @Schema(description = "Complete File Path of the Entity")
  public String getCompleteFilePath() {
    return completeFilePath;
  }

  public void setCompleteFilePath(String completeFilePath) {
    this.completeFilePath = completeFilePath;
  }

  public GitSyncError entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Entity Type
   * @return entityType
  **/
  @Schema(description = "Entity Type")
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }

  public GitSyncError failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

   /**
   * Error Message
   * @return failureReason
  **/
  @Schema(description = "Error Message")
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }

  public GitSyncError status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of Git Sync Error
   * @return status
  **/
  @Schema(description = "Status of Git Sync Error")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public GitSyncError errorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
    return this;
  }

   /**
   * Type of Git Sync Error
   * @return errorType
  **/
  @Schema(description = "Type of Git Sync Error")
  public ErrorTypeEnum getErrorType() {
    return errorType;
  }

  public void setErrorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
  }

  public GitSyncError additionalErrorDetails(GitSyncErrorDetails additionalErrorDetails) {
    this.additionalErrorDetails = additionalErrorDetails;
    return this;
  }

   /**
   * Get additionalErrorDetails
   * @return additionalErrorDetails
  **/
  @Schema(description = "")
  public GitSyncErrorDetails getAdditionalErrorDetails() {
    return additionalErrorDetails;
  }

  public void setAdditionalErrorDetails(GitSyncErrorDetails additionalErrorDetails) {
    this.additionalErrorDetails = additionalErrorDetails;
  }

  public GitSyncError createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Time at which the Git Sync error was logged
   * @return createdAt
  **/
  @Schema(description = "Time at which the Git Sync error was logged")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitSyncError gitSyncError = (GitSyncError) o;
    return Objects.equals(this.accountIdentifier, gitSyncError.accountIdentifier) &&
        Objects.equals(this.repoUrl, gitSyncError.repoUrl) &&
        Objects.equals(this.repoId, gitSyncError.repoId) &&
        Objects.equals(this.branchName, gitSyncError.branchName) &&
        Objects.equals(this.scopes, gitSyncError.scopes) &&
        Objects.equals(this.changeType, gitSyncError.changeType) &&
        Objects.equals(this.completeFilePath, gitSyncError.completeFilePath) &&
        Objects.equals(this.entityType, gitSyncError.entityType) &&
        Objects.equals(this.failureReason, gitSyncError.failureReason) &&
        Objects.equals(this.status, gitSyncError.status) &&
        Objects.equals(this.errorType, gitSyncError.errorType) &&
        Objects.equals(this.additionalErrorDetails, gitSyncError.additionalErrorDetails) &&
        Objects.equals(this.createdAt, gitSyncError.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountIdentifier, repoUrl, repoId, branchName, scopes, changeType, completeFilePath, entityType, failureReason, status, errorType, additionalErrorDetails, createdAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitSyncError {\n");
    
    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    repoUrl: ").append(toIndentedString(repoUrl)).append("\n");
    sb.append("    repoId: ").append(toIndentedString(repoId)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    completeFilePath: ").append(toIndentedString(completeFilePath)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    additionalErrorDetails: ").append(toIndentedString(additionalErrorDetails)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
