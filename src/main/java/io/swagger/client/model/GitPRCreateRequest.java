/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * GitPRCreateRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class GitPRCreateRequest {
  @SerializedName("sourceBranch")
  private String sourceBranch = null;

  @SerializedName("targetBranch")
  private String targetBranch = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("yamlGitConfigRef")
  private String yamlGitConfigRef = null;

  @SerializedName("accountIdentifier")
  private String accountIdentifier = null;

  @SerializedName("orgIdentifier")
  private String orgIdentifier = null;

  @SerializedName("projectIdentifier")
  private String projectIdentifier = null;

  @SerializedName("useUserFromToken")
  private Boolean useUserFromToken = null;

  public GitPRCreateRequest sourceBranch(String sourceBranch) {
    this.sourceBranch = sourceBranch;
    return this;
  }

   /**
   * Source Branch for pull request
   * @return sourceBranch
  **/
  @Schema(required = true, description = "Source Branch for pull request")
  public String getSourceBranch() {
    return sourceBranch;
  }

  public void setSourceBranch(String sourceBranch) {
    this.sourceBranch = sourceBranch;
  }

  public GitPRCreateRequest targetBranch(String targetBranch) {
    this.targetBranch = targetBranch;
    return this;
  }

   /**
   * Target Branch for pull request
   * @return targetBranch
  **/
  @Schema(required = true, description = "Target Branch for pull request")
  public String getTargetBranch() {
    return targetBranch;
  }

  public void setTargetBranch(String targetBranch) {
    this.targetBranch = targetBranch;
  }

  public GitPRCreateRequest title(String title) {
    this.title = title;
    return this;
  }

   /**
   * PR title
   * @return title
  **/
  @Schema(required = true, description = "PR title")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public GitPRCreateRequest yamlGitConfigRef(String yamlGitConfigRef) {
    this.yamlGitConfigRef = yamlGitConfigRef;
    return this;
  }

   /**
   * Git Sync Config Id
   * @return yamlGitConfigRef
  **/
  @Schema(required = true, description = "Git Sync Config Id")
  public String getYamlGitConfigRef() {
    return yamlGitConfigRef;
  }

  public void setYamlGitConfigRef(String yamlGitConfigRef) {
    this.yamlGitConfigRef = yamlGitConfigRef;
  }

  public GitPRCreateRequest accountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Account Identifier for the Entity
   * @return accountIdentifier
  **/
  @Schema(description = "Account Identifier for the Entity")
  public String getAccountIdentifier() {
    return accountIdentifier;
  }

  public void setAccountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
  }

  public GitPRCreateRequest orgIdentifier(String orgIdentifier) {
    this.orgIdentifier = orgIdentifier;
    return this;
  }

   /**
   * Organization Identifier for the Entity
   * @return orgIdentifier
  **/
  @Schema(description = "Organization Identifier for the Entity")
  public String getOrgIdentifier() {
    return orgIdentifier;
  }

  public void setOrgIdentifier(String orgIdentifier) {
    this.orgIdentifier = orgIdentifier;
  }

  public GitPRCreateRequest projectIdentifier(String projectIdentifier) {
    this.projectIdentifier = projectIdentifier;
    return this;
  }

   /**
   * Project Identifier for the Entity
   * @return projectIdentifier
  **/
  @Schema(description = "Project Identifier for the Entity")
  public String getProjectIdentifier() {
    return projectIdentifier;
  }

  public void setProjectIdentifier(String projectIdentifier) {
    this.projectIdentifier = projectIdentifier;
  }

  public GitPRCreateRequest useUserFromToken(Boolean useUserFromToken) {
    this.useUserFromToken = useUserFromToken;
    return this;
  }

   /**
   * Specifies which token to use. If True, the SCM token will be used, else the Git Connector token will be used
   * @return useUserFromToken
  **/
  @Schema(description = "Specifies which token to use. If True, the SCM token will be used, else the Git Connector token will be used")
  public Boolean isUseUserFromToken() {
    return useUserFromToken;
  }

  public void setUseUserFromToken(Boolean useUserFromToken) {
    this.useUserFromToken = useUserFromToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitPRCreateRequest gitPRCreateRequest = (GitPRCreateRequest) o;
    return Objects.equals(this.sourceBranch, gitPRCreateRequest.sourceBranch) &&
        Objects.equals(this.targetBranch, gitPRCreateRequest.targetBranch) &&
        Objects.equals(this.title, gitPRCreateRequest.title) &&
        Objects.equals(this.yamlGitConfigRef, gitPRCreateRequest.yamlGitConfigRef) &&
        Objects.equals(this.accountIdentifier, gitPRCreateRequest.accountIdentifier) &&
        Objects.equals(this.orgIdentifier, gitPRCreateRequest.orgIdentifier) &&
        Objects.equals(this.projectIdentifier, gitPRCreateRequest.projectIdentifier) &&
        Objects.equals(this.useUserFromToken, gitPRCreateRequest.useUserFromToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceBranch, targetBranch, title, yamlGitConfigRef, accountIdentifier, orgIdentifier, projectIdentifier, useUserFromToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitPRCreateRequest {\n");
    
    sb.append("    sourceBranch: ").append(toIndentedString(sourceBranch)).append("\n");
    sb.append("    targetBranch: ").append(toIndentedString(targetBranch)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    yamlGitConfigRef: ").append(toIndentedString(yamlGitConfigRef)).append("\n");
    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    orgIdentifier: ").append(toIndentedString(orgIdentifier)).append("\n");
    sb.append("    projectIdentifier: ").append(toIndentedString(projectIdentifier)).append("\n");
    sb.append("    useUserFromToken: ").append(toIndentedString(useUserFromToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
