/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.MethodDescriptorProto;
import io.swagger.client.model.MethodOptions;
import io.swagger.client.model.MethodOptionsOrBuilder;
import io.swagger.client.model.ParserMethodDescriptorProto;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * MethodDescriptorProto
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class MethodDescriptorProto {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  @SerializedName("options")
  private MethodOptions options = null;

  @SerializedName("nameBytes")
  private ByteString nameBytes = null;

  @SerializedName("inputType")
  private String inputType = null;

  @SerializedName("outputType")
  private String outputType = null;

  @SerializedName("inputTypeBytes")
  private ByteString inputTypeBytes = null;

  @SerializedName("outputTypeBytes")
  private ByteString outputTypeBytes = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserMethodDescriptorProto parserForType = null;

  @SerializedName("defaultInstanceForType")
  private MethodDescriptorProto defaultInstanceForType = null;

  @SerializedName("optionsOrBuilder")
  private MethodOptionsOrBuilder optionsOrBuilder = null;

  @SerializedName("serverStreaming")
  private Boolean serverStreaming = null;

  @SerializedName("clientStreaming")
  private Boolean clientStreaming = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public MethodDescriptorProto unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public MethodDescriptorProto initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public MethodDescriptorProto options(MethodOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public MethodOptions getOptions() {
    return options;
  }

  public void setOptions(MethodOptions options) {
    this.options = options;
  }

  public MethodDescriptorProto nameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
    return this;
  }

   /**
   * Get nameBytes
   * @return nameBytes
  **/
  @Schema(description = "")
  public ByteString getNameBytes() {
    return nameBytes;
  }

  public void setNameBytes(ByteString nameBytes) {
    this.nameBytes = nameBytes;
  }

  public MethodDescriptorProto inputType(String inputType) {
    this.inputType = inputType;
    return this;
  }

   /**
   * Get inputType
   * @return inputType
  **/
  @Schema(description = "")
  public String getInputType() {
    return inputType;
  }

  public void setInputType(String inputType) {
    this.inputType = inputType;
  }

  public MethodDescriptorProto outputType(String outputType) {
    this.outputType = outputType;
    return this;
  }

   /**
   * Get outputType
   * @return outputType
  **/
  @Schema(description = "")
  public String getOutputType() {
    return outputType;
  }

  public void setOutputType(String outputType) {
    this.outputType = outputType;
  }

  public MethodDescriptorProto inputTypeBytes(ByteString inputTypeBytes) {
    this.inputTypeBytes = inputTypeBytes;
    return this;
  }

   /**
   * Get inputTypeBytes
   * @return inputTypeBytes
  **/
  @Schema(description = "")
  public ByteString getInputTypeBytes() {
    return inputTypeBytes;
  }

  public void setInputTypeBytes(ByteString inputTypeBytes) {
    this.inputTypeBytes = inputTypeBytes;
  }

  public MethodDescriptorProto outputTypeBytes(ByteString outputTypeBytes) {
    this.outputTypeBytes = outputTypeBytes;
    return this;
  }

   /**
   * Get outputTypeBytes
   * @return outputTypeBytes
  **/
  @Schema(description = "")
  public ByteString getOutputTypeBytes() {
    return outputTypeBytes;
  }

  public void setOutputTypeBytes(ByteString outputTypeBytes) {
    this.outputTypeBytes = outputTypeBytes;
  }

  public MethodDescriptorProto serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public MethodDescriptorProto parserForType(ParserMethodDescriptorProto parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserMethodDescriptorProto getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserMethodDescriptorProto parserForType) {
    this.parserForType = parserForType;
  }

  public MethodDescriptorProto defaultInstanceForType(MethodDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public MethodDescriptorProto getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(MethodDescriptorProto defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public MethodDescriptorProto optionsOrBuilder(MethodOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
    return this;
  }

   /**
   * Get optionsOrBuilder
   * @return optionsOrBuilder
  **/
  @Schema(description = "")
  public MethodOptionsOrBuilder getOptionsOrBuilder() {
    return optionsOrBuilder;
  }

  public void setOptionsOrBuilder(MethodOptionsOrBuilder optionsOrBuilder) {
    this.optionsOrBuilder = optionsOrBuilder;
  }

  public MethodDescriptorProto serverStreaming(Boolean serverStreaming) {
    this.serverStreaming = serverStreaming;
    return this;
  }

   /**
   * Get serverStreaming
   * @return serverStreaming
  **/
  @Schema(description = "")
  public Boolean isServerStreaming() {
    return serverStreaming;
  }

  public void setServerStreaming(Boolean serverStreaming) {
    this.serverStreaming = serverStreaming;
  }

  public MethodDescriptorProto clientStreaming(Boolean clientStreaming) {
    this.clientStreaming = clientStreaming;
    return this;
  }

   /**
   * Get clientStreaming
   * @return clientStreaming
  **/
  @Schema(description = "")
  public Boolean isClientStreaming() {
    return clientStreaming;
  }

  public void setClientStreaming(Boolean clientStreaming) {
    this.clientStreaming = clientStreaming;
  }

  public MethodDescriptorProto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MethodDescriptorProto allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public MethodDescriptorProto putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public MethodDescriptorProto initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public MethodDescriptorProto descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public MethodDescriptorProto memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MethodDescriptorProto methodDescriptorProto = (MethodDescriptorProto) o;
    return Objects.equals(this.unknownFields, methodDescriptorProto.unknownFields) &&
        Objects.equals(this.initialized, methodDescriptorProto.initialized) &&
        Objects.equals(this.options, methodDescriptorProto.options) &&
        Objects.equals(this.nameBytes, methodDescriptorProto.nameBytes) &&
        Objects.equals(this.inputType, methodDescriptorProto.inputType) &&
        Objects.equals(this.outputType, methodDescriptorProto.outputType) &&
        Objects.equals(this.inputTypeBytes, methodDescriptorProto.inputTypeBytes) &&
        Objects.equals(this.outputTypeBytes, methodDescriptorProto.outputTypeBytes) &&
        Objects.equals(this.serializedSize, methodDescriptorProto.serializedSize) &&
        Objects.equals(this.parserForType, methodDescriptorProto.parserForType) &&
        Objects.equals(this.defaultInstanceForType, methodDescriptorProto.defaultInstanceForType) &&
        Objects.equals(this.optionsOrBuilder, methodDescriptorProto.optionsOrBuilder) &&
        Objects.equals(this.serverStreaming, methodDescriptorProto.serverStreaming) &&
        Objects.equals(this.clientStreaming, methodDescriptorProto.clientStreaming) &&
        Objects.equals(this.name, methodDescriptorProto.name) &&
        Objects.equals(this.allFields, methodDescriptorProto.allFields) &&
        Objects.equals(this.initializationErrorString, methodDescriptorProto.initializationErrorString) &&
        Objects.equals(this.descriptorForType, methodDescriptorProto.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, methodDescriptorProto.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, options, nameBytes, inputType, outputType, inputTypeBytes, outputTypeBytes, serializedSize, parserForType, defaultInstanceForType, optionsOrBuilder, serverStreaming, clientStreaming, name, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MethodDescriptorProto {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    nameBytes: ").append(toIndentedString(nameBytes)).append("\n");
    sb.append("    inputType: ").append(toIndentedString(inputType)).append("\n");
    sb.append("    outputType: ").append(toIndentedString(outputType)).append("\n");
    sb.append("    inputTypeBytes: ").append(toIndentedString(inputTypeBytes)).append("\n");
    sb.append("    outputTypeBytes: ").append(toIndentedString(outputTypeBytes)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    optionsOrBuilder: ").append(toIndentedString(optionsOrBuilder)).append("\n");
    sb.append("    serverStreaming: ").append(toIndentedString(serverStreaming)).append("\n");
    sb.append("    clientStreaming: ").append(toIndentedString(clientStreaming)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
