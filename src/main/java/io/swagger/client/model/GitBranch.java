/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This contains details of the Git branch
 */
@Schema(description = "This contains details of the Git branch")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class GitBranch {
  @SerializedName("branchName")
  private String branchName = null;

  /**
   * Sync Status of the Branch
   */
  @JsonAdapter(BranchSyncStatusEnum.Adapter.class)
  public enum BranchSyncStatusEnum {
    SYNCED("SYNCED"),
    SYNCING("SYNCING"),
    UNSYNCED("UNSYNCED");

    private String value;

    BranchSyncStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BranchSyncStatusEnum fromValue(String input) {
      for (BranchSyncStatusEnum b : BranchSyncStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BranchSyncStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BranchSyncStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BranchSyncStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BranchSyncStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("branchSyncStatus")
  private BranchSyncStatusEnum branchSyncStatus = null;

  public GitBranch branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

   /**
   * Branch Name
   * @return branchName
  **/
  @Schema(description = "Branch Name")
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }

  public GitBranch branchSyncStatus(BranchSyncStatusEnum branchSyncStatus) {
    this.branchSyncStatus = branchSyncStatus;
    return this;
  }

   /**
   * Sync Status of the Branch
   * @return branchSyncStatus
  **/
  @Schema(description = "Sync Status of the Branch")
  public BranchSyncStatusEnum getBranchSyncStatus() {
    return branchSyncStatus;
  }

  public void setBranchSyncStatus(BranchSyncStatusEnum branchSyncStatus) {
    this.branchSyncStatus = branchSyncStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitBranch gitBranch = (GitBranch) o;
    return Objects.equals(this.branchName, gitBranch.branchName) &&
        Objects.equals(this.branchSyncStatus, gitBranch.branchSyncStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchName, branchSyncStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitBranch {\n");
    
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    branchSyncStatus: ").append(toIndentedString(branchSyncStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
