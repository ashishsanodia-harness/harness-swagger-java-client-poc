/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConnectorConfig;
import io.swagger.client.model.CustomHealthKeyAndValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * CustomHealthConnectorDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class CustomHealthConnectorDTO extends ConnectorConfig {
  @SerializedName("baseURL")
  private String baseURL = null;

  @SerializedName("headers")
  private List<CustomHealthKeyAndValue> headers = null;

  @SerializedName("params")
  private List<CustomHealthKeyAndValue> params = null;

  /**
   * Gets or Sets method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    GET("GET"),
    POST("POST");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MethodEnum fromValue(String input) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MethodEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("method")
  private MethodEnum method = null;

  @SerializedName("validationBody")
  private String validationBody = null;

  @SerializedName("validationPath")
  private String validationPath = null;

  @SerializedName("delegateSelectors")
  private List<String> delegateSelectors = null;

  public CustomHealthConnectorDTO baseURL(String baseURL) {
    this.baseURL = baseURL;
    return this;
  }

   /**
   * Get baseURL
   * @return baseURL
  **/
  @Schema(required = true, description = "")
  public String getBaseURL() {
    return baseURL;
  }

  public void setBaseURL(String baseURL) {
    this.baseURL = baseURL;
  }

  public CustomHealthConnectorDTO headers(List<CustomHealthKeyAndValue> headers) {
    this.headers = headers;
    return this;
  }

  public CustomHealthConnectorDTO addHeadersItem(CustomHealthKeyAndValue headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<CustomHealthKeyAndValue>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @Schema(description = "")
  public List<CustomHealthKeyAndValue> getHeaders() {
    return headers;
  }

  public void setHeaders(List<CustomHealthKeyAndValue> headers) {
    this.headers = headers;
  }

  public CustomHealthConnectorDTO params(List<CustomHealthKeyAndValue> params) {
    this.params = params;
    return this;
  }

  public CustomHealthConnectorDTO addParamsItem(CustomHealthKeyAndValue paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<CustomHealthKeyAndValue>();
    }
    this.params.add(paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @Schema(description = "")
  public List<CustomHealthKeyAndValue> getParams() {
    return params;
  }

  public void setParams(List<CustomHealthKeyAndValue> params) {
    this.params = params;
  }

  public CustomHealthConnectorDTO method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @Schema(required = true, description = "")
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }

  public CustomHealthConnectorDTO validationBody(String validationBody) {
    this.validationBody = validationBody;
    return this;
  }

   /**
   * Get validationBody
   * @return validationBody
  **/
  @Schema(description = "")
  public String getValidationBody() {
    return validationBody;
  }

  public void setValidationBody(String validationBody) {
    this.validationBody = validationBody;
  }

  public CustomHealthConnectorDTO validationPath(String validationPath) {
    this.validationPath = validationPath;
    return this;
  }

   /**
   * Get validationPath
   * @return validationPath
  **/
  @Schema(description = "")
  public String getValidationPath() {
    return validationPath;
  }

  public void setValidationPath(String validationPath) {
    this.validationPath = validationPath;
  }

  public CustomHealthConnectorDTO delegateSelectors(List<String> delegateSelectors) {
    this.delegateSelectors = delegateSelectors;
    return this;
  }

  public CustomHealthConnectorDTO addDelegateSelectorsItem(String delegateSelectorsItem) {
    if (this.delegateSelectors == null) {
      this.delegateSelectors = new ArrayList<String>();
    }
    this.delegateSelectors.add(delegateSelectorsItem);
    return this;
  }

   /**
   * Get delegateSelectors
   * @return delegateSelectors
  **/
  @Schema(description = "")
  public List<String> getDelegateSelectors() {
    return delegateSelectors;
  }

  public void setDelegateSelectors(List<String> delegateSelectors) {
    this.delegateSelectors = delegateSelectors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomHealthConnectorDTO customHealthConnectorDTO = (CustomHealthConnectorDTO) o;
    return Objects.equals(this.baseURL, customHealthConnectorDTO.baseURL) &&
        Objects.equals(this.headers, customHealthConnectorDTO.headers) &&
        Objects.equals(this.params, customHealthConnectorDTO.params) &&
        Objects.equals(this.method, customHealthConnectorDTO.method) &&
        Objects.equals(this.validationBody, customHealthConnectorDTO.validationBody) &&
        Objects.equals(this.validationPath, customHealthConnectorDTO.validationPath) &&
        Objects.equals(this.delegateSelectors, customHealthConnectorDTO.delegateSelectors) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseURL, headers, params, method, validationBody, validationPath, delegateSelectors, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomHealthConnectorDTO {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    baseURL: ").append(toIndentedString(baseURL)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    validationBody: ").append(toIndentedString(validationBody)).append("\n");
    sb.append("    validationPath: ").append(toIndentedString(validationPath)).append("\n");
    sb.append("    delegateSelectors: ").append(toIndentedString(delegateSelectors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
