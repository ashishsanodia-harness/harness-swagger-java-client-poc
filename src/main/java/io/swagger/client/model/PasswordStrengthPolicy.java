/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This has information about the password strength policy in Harness.
 */
@Schema(description = "This has information about the password strength policy in Harness.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class PasswordStrengthPolicy {
  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("minNumberOfCharacters")
  private Integer minNumberOfCharacters = null;

  @SerializedName("minNumberOfUppercaseCharacters")
  private Integer minNumberOfUppercaseCharacters = null;

  @SerializedName("minNumberOfLowercaseCharacters")
  private Integer minNumberOfLowercaseCharacters = null;

  @SerializedName("minNumberOfSpecialCharacters")
  private Integer minNumberOfSpecialCharacters = null;

  @SerializedName("minNumberOfDigits")
  private Integer minNumberOfDigits = null;

  public PasswordStrengthPolicy enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * This value is true if the password strength policy is enabled. Otherwise, it is false.
   * @return enabled
  **/
  @Schema(description = "This value is true if the password strength policy is enabled. Otherwise, it is false.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public PasswordStrengthPolicy minNumberOfCharacters(Integer minNumberOfCharacters) {
    this.minNumberOfCharacters = minNumberOfCharacters;
    return this;
  }

   /**
   * Minimum number of characters required in a password.
   * @return minNumberOfCharacters
  **/
  @Schema(description = "Minimum number of characters required in a password.")
  public Integer getMinNumberOfCharacters() {
    return minNumberOfCharacters;
  }

  public void setMinNumberOfCharacters(Integer minNumberOfCharacters) {
    this.minNumberOfCharacters = minNumberOfCharacters;
  }

  public PasswordStrengthPolicy minNumberOfUppercaseCharacters(Integer minNumberOfUppercaseCharacters) {
    this.minNumberOfUppercaseCharacters = minNumberOfUppercaseCharacters;
    return this;
  }

   /**
   * Minimum number of uppercase characters required in a password.
   * @return minNumberOfUppercaseCharacters
  **/
  @Schema(description = "Minimum number of uppercase characters required in a password.")
  public Integer getMinNumberOfUppercaseCharacters() {
    return minNumberOfUppercaseCharacters;
  }

  public void setMinNumberOfUppercaseCharacters(Integer minNumberOfUppercaseCharacters) {
    this.minNumberOfUppercaseCharacters = minNumberOfUppercaseCharacters;
  }

  public PasswordStrengthPolicy minNumberOfLowercaseCharacters(Integer minNumberOfLowercaseCharacters) {
    this.minNumberOfLowercaseCharacters = minNumberOfLowercaseCharacters;
    return this;
  }

   /**
   * Minimum number of lower characters required in a password.
   * @return minNumberOfLowercaseCharacters
  **/
  @Schema(description = "Minimum number of lower characters required in a password.")
  public Integer getMinNumberOfLowercaseCharacters() {
    return minNumberOfLowercaseCharacters;
  }

  public void setMinNumberOfLowercaseCharacters(Integer minNumberOfLowercaseCharacters) {
    this.minNumberOfLowercaseCharacters = minNumberOfLowercaseCharacters;
  }

  public PasswordStrengthPolicy minNumberOfSpecialCharacters(Integer minNumberOfSpecialCharacters) {
    this.minNumberOfSpecialCharacters = minNumberOfSpecialCharacters;
    return this;
  }

   /**
   * Minimum number of special characters required in a password.
   * @return minNumberOfSpecialCharacters
  **/
  @Schema(description = "Minimum number of special characters required in a password.")
  public Integer getMinNumberOfSpecialCharacters() {
    return minNumberOfSpecialCharacters;
  }

  public void setMinNumberOfSpecialCharacters(Integer minNumberOfSpecialCharacters) {
    this.minNumberOfSpecialCharacters = minNumberOfSpecialCharacters;
  }

  public PasswordStrengthPolicy minNumberOfDigits(Integer minNumberOfDigits) {
    this.minNumberOfDigits = minNumberOfDigits;
    return this;
  }

   /**
   * Minimum number of digits required in a password.
   * @return minNumberOfDigits
  **/
  @Schema(description = "Minimum number of digits required in a password.")
  public Integer getMinNumberOfDigits() {
    return minNumberOfDigits;
  }

  public void setMinNumberOfDigits(Integer minNumberOfDigits) {
    this.minNumberOfDigits = minNumberOfDigits;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordStrengthPolicy passwordStrengthPolicy = (PasswordStrengthPolicy) o;
    return Objects.equals(this.enabled, passwordStrengthPolicy.enabled) &&
        Objects.equals(this.minNumberOfCharacters, passwordStrengthPolicy.minNumberOfCharacters) &&
        Objects.equals(this.minNumberOfUppercaseCharacters, passwordStrengthPolicy.minNumberOfUppercaseCharacters) &&
        Objects.equals(this.minNumberOfLowercaseCharacters, passwordStrengthPolicy.minNumberOfLowercaseCharacters) &&
        Objects.equals(this.minNumberOfSpecialCharacters, passwordStrengthPolicy.minNumberOfSpecialCharacters) &&
        Objects.equals(this.minNumberOfDigits, passwordStrengthPolicy.minNumberOfDigits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, minNumberOfCharacters, minNumberOfUppercaseCharacters, minNumberOfLowercaseCharacters, minNumberOfSpecialCharacters, minNumberOfDigits);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordStrengthPolicy {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    minNumberOfCharacters: ").append(toIndentedString(minNumberOfCharacters)).append("\n");
    sb.append("    minNumberOfUppercaseCharacters: ").append(toIndentedString(minNumberOfUppercaseCharacters)).append("\n");
    sb.append("    minNumberOfLowercaseCharacters: ").append(toIndentedString(minNumberOfLowercaseCharacters)).append("\n");
    sb.append("    minNumberOfSpecialCharacters: ").append(toIndentedString(minNumberOfSpecialCharacters)).append("\n");
    sb.append("    minNumberOfDigits: ").append(toIndentedString(minNumberOfDigits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
