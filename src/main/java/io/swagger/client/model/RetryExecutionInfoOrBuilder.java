/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.Message;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * RetryExecutionInfoOrBuilder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class RetryExecutionInfoOrBuilder {
  @SerializedName("rootExecutionId")
  private String rootExecutionId = null;

  @SerializedName("isRetry")
  private Boolean isRetry = null;

  @SerializedName("rootExecutionIdBytes")
  private ByteString rootExecutionIdBytes = null;

  @SerializedName("parentRetryId")
  private String parentRetryId = null;

  @SerializedName("parentRetryIdBytes")
  private ByteString parentRetryIdBytes = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("defaultInstanceForType")
  private Message defaultInstanceForType = null;

  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  public RetryExecutionInfoOrBuilder rootExecutionId(String rootExecutionId) {
    this.rootExecutionId = rootExecutionId;
    return this;
  }

   /**
   * Get rootExecutionId
   * @return rootExecutionId
  **/
  @Schema(description = "")
  public String getRootExecutionId() {
    return rootExecutionId;
  }

  public void setRootExecutionId(String rootExecutionId) {
    this.rootExecutionId = rootExecutionId;
  }

  public RetryExecutionInfoOrBuilder isRetry(Boolean isRetry) {
    this.isRetry = isRetry;
    return this;
  }

   /**
   * Get isRetry
   * @return isRetry
  **/
  @Schema(description = "")
  public Boolean isIsRetry() {
    return isRetry;
  }

  public void setIsRetry(Boolean isRetry) {
    this.isRetry = isRetry;
  }

  public RetryExecutionInfoOrBuilder rootExecutionIdBytes(ByteString rootExecutionIdBytes) {
    this.rootExecutionIdBytes = rootExecutionIdBytes;
    return this;
  }

   /**
   * Get rootExecutionIdBytes
   * @return rootExecutionIdBytes
  **/
  @Schema(description = "")
  public ByteString getRootExecutionIdBytes() {
    return rootExecutionIdBytes;
  }

  public void setRootExecutionIdBytes(ByteString rootExecutionIdBytes) {
    this.rootExecutionIdBytes = rootExecutionIdBytes;
  }

  public RetryExecutionInfoOrBuilder parentRetryId(String parentRetryId) {
    this.parentRetryId = parentRetryId;
    return this;
  }

   /**
   * Get parentRetryId
   * @return parentRetryId
  **/
  @Schema(description = "")
  public String getParentRetryId() {
    return parentRetryId;
  }

  public void setParentRetryId(String parentRetryId) {
    this.parentRetryId = parentRetryId;
  }

  public RetryExecutionInfoOrBuilder parentRetryIdBytes(ByteString parentRetryIdBytes) {
    this.parentRetryIdBytes = parentRetryIdBytes;
    return this;
  }

   /**
   * Get parentRetryIdBytes
   * @return parentRetryIdBytes
  **/
  @Schema(description = "")
  public ByteString getParentRetryIdBytes() {
    return parentRetryIdBytes;
  }

  public void setParentRetryIdBytes(ByteString parentRetryIdBytes) {
    this.parentRetryIdBytes = parentRetryIdBytes;
  }

  public RetryExecutionInfoOrBuilder allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public RetryExecutionInfoOrBuilder putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public RetryExecutionInfoOrBuilder initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public RetryExecutionInfoOrBuilder descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public RetryExecutionInfoOrBuilder defaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public Message getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public RetryExecutionInfoOrBuilder unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public RetryExecutionInfoOrBuilder initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetryExecutionInfoOrBuilder retryExecutionInfoOrBuilder = (RetryExecutionInfoOrBuilder) o;
    return Objects.equals(this.rootExecutionId, retryExecutionInfoOrBuilder.rootExecutionId) &&
        Objects.equals(this.isRetry, retryExecutionInfoOrBuilder.isRetry) &&
        Objects.equals(this.rootExecutionIdBytes, retryExecutionInfoOrBuilder.rootExecutionIdBytes) &&
        Objects.equals(this.parentRetryId, retryExecutionInfoOrBuilder.parentRetryId) &&
        Objects.equals(this.parentRetryIdBytes, retryExecutionInfoOrBuilder.parentRetryIdBytes) &&
        Objects.equals(this.allFields, retryExecutionInfoOrBuilder.allFields) &&
        Objects.equals(this.initializationErrorString, retryExecutionInfoOrBuilder.initializationErrorString) &&
        Objects.equals(this.descriptorForType, retryExecutionInfoOrBuilder.descriptorForType) &&
        Objects.equals(this.defaultInstanceForType, retryExecutionInfoOrBuilder.defaultInstanceForType) &&
        Objects.equals(this.unknownFields, retryExecutionInfoOrBuilder.unknownFields) &&
        Objects.equals(this.initialized, retryExecutionInfoOrBuilder.initialized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootExecutionId, isRetry, rootExecutionIdBytes, parentRetryId, parentRetryIdBytes, allFields, initializationErrorString, descriptorForType, defaultInstanceForType, unknownFields, initialized);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetryExecutionInfoOrBuilder {\n");
    
    sb.append("    rootExecutionId: ").append(toIndentedString(rootExecutionId)).append("\n");
    sb.append("    isRetry: ").append(toIndentedString(isRetry)).append("\n");
    sb.append("    rootExecutionIdBytes: ").append(toIndentedString(rootExecutionIdBytes)).append("\n");
    sb.append("    parentRetryId: ").append(toIndentedString(parentRetryId)).append("\n");
    sb.append("    parentRetryIdBytes: ").append(toIndentedString(parentRetryIdBytes)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
