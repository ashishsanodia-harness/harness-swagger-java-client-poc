/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.Message;
import io.swagger.client.model.RerunInfo;
import io.swagger.client.model.RerunInfoOrBuilder;
import io.swagger.client.model.TriggeredBy;
import io.swagger.client.model.TriggeredByOrBuilder;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ExecutionTriggerInfoOrBuilder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class ExecutionTriggerInfoOrBuilder {
  @SerializedName("triggeredByOrBuilder")
  private TriggeredByOrBuilder triggeredByOrBuilder = null;

  @SerializedName("isRerun")
  private Boolean isRerun = null;

  @SerializedName("triggerTypeValue")
  private Integer triggerTypeValue = null;

  @SerializedName("triggeredBy")
  private TriggeredBy triggeredBy = null;

  /**
   * Gets or Sets triggerType
   */
  @JsonAdapter(TriggerTypeEnum.Adapter.class)
  public enum TriggerTypeEnum {
    NOOP("NOOP"),
    MANUAL("MANUAL"),
    WEBHOOK("WEBHOOK"),
    WEBHOOK_CUSTOM("WEBHOOK_CUSTOM"),
    SCHEDULER_CRON("SCHEDULER_CRON"),
    UNRECOGNIZED("UNRECOGNIZED");

    private String value;

    TriggerTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TriggerTypeEnum fromValue(String input) {
      for (TriggerTypeEnum b : TriggerTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TriggerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TriggerTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TriggerTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("triggerType")
  private TriggerTypeEnum triggerType = null;

  @SerializedName("rerunInfoOrBuilder")
  private RerunInfoOrBuilder rerunInfoOrBuilder = null;

  @SerializedName("rerunInfo")
  private RerunInfo rerunInfo = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("defaultInstanceForType")
  private Message defaultInstanceForType = null;

  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  public ExecutionTriggerInfoOrBuilder triggeredByOrBuilder(TriggeredByOrBuilder triggeredByOrBuilder) {
    this.triggeredByOrBuilder = triggeredByOrBuilder;
    return this;
  }

   /**
   * Get triggeredByOrBuilder
   * @return triggeredByOrBuilder
  **/
  @Schema(description = "")
  public TriggeredByOrBuilder getTriggeredByOrBuilder() {
    return triggeredByOrBuilder;
  }

  public void setTriggeredByOrBuilder(TriggeredByOrBuilder triggeredByOrBuilder) {
    this.triggeredByOrBuilder = triggeredByOrBuilder;
  }

  public ExecutionTriggerInfoOrBuilder isRerun(Boolean isRerun) {
    this.isRerun = isRerun;
    return this;
  }

   /**
   * Get isRerun
   * @return isRerun
  **/
  @Schema(description = "")
  public Boolean isIsRerun() {
    return isRerun;
  }

  public void setIsRerun(Boolean isRerun) {
    this.isRerun = isRerun;
  }

  public ExecutionTriggerInfoOrBuilder triggerTypeValue(Integer triggerTypeValue) {
    this.triggerTypeValue = triggerTypeValue;
    return this;
  }

   /**
   * Get triggerTypeValue
   * @return triggerTypeValue
  **/
  @Schema(description = "")
  public Integer getTriggerTypeValue() {
    return triggerTypeValue;
  }

  public void setTriggerTypeValue(Integer triggerTypeValue) {
    this.triggerTypeValue = triggerTypeValue;
  }

  public ExecutionTriggerInfoOrBuilder triggeredBy(TriggeredBy triggeredBy) {
    this.triggeredBy = triggeredBy;
    return this;
  }

   /**
   * Get triggeredBy
   * @return triggeredBy
  **/
  @Schema(description = "")
  public TriggeredBy getTriggeredBy() {
    return triggeredBy;
  }

  public void setTriggeredBy(TriggeredBy triggeredBy) {
    this.triggeredBy = triggeredBy;
  }

  public ExecutionTriggerInfoOrBuilder triggerType(TriggerTypeEnum triggerType) {
    this.triggerType = triggerType;
    return this;
  }

   /**
   * Get triggerType
   * @return triggerType
  **/
  @Schema(description = "")
  public TriggerTypeEnum getTriggerType() {
    return triggerType;
  }

  public void setTriggerType(TriggerTypeEnum triggerType) {
    this.triggerType = triggerType;
  }

  public ExecutionTriggerInfoOrBuilder rerunInfoOrBuilder(RerunInfoOrBuilder rerunInfoOrBuilder) {
    this.rerunInfoOrBuilder = rerunInfoOrBuilder;
    return this;
  }

   /**
   * Get rerunInfoOrBuilder
   * @return rerunInfoOrBuilder
  **/
  @Schema(description = "")
  public RerunInfoOrBuilder getRerunInfoOrBuilder() {
    return rerunInfoOrBuilder;
  }

  public void setRerunInfoOrBuilder(RerunInfoOrBuilder rerunInfoOrBuilder) {
    this.rerunInfoOrBuilder = rerunInfoOrBuilder;
  }

  public ExecutionTriggerInfoOrBuilder rerunInfo(RerunInfo rerunInfo) {
    this.rerunInfo = rerunInfo;
    return this;
  }

   /**
   * Get rerunInfo
   * @return rerunInfo
  **/
  @Schema(description = "")
  public RerunInfo getRerunInfo() {
    return rerunInfo;
  }

  public void setRerunInfo(RerunInfo rerunInfo) {
    this.rerunInfo = rerunInfo;
  }

  public ExecutionTriggerInfoOrBuilder allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public ExecutionTriggerInfoOrBuilder putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public ExecutionTriggerInfoOrBuilder initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public ExecutionTriggerInfoOrBuilder descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public ExecutionTriggerInfoOrBuilder defaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public Message getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public ExecutionTriggerInfoOrBuilder unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public ExecutionTriggerInfoOrBuilder initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionTriggerInfoOrBuilder executionTriggerInfoOrBuilder = (ExecutionTriggerInfoOrBuilder) o;
    return Objects.equals(this.triggeredByOrBuilder, executionTriggerInfoOrBuilder.triggeredByOrBuilder) &&
        Objects.equals(this.isRerun, executionTriggerInfoOrBuilder.isRerun) &&
        Objects.equals(this.triggerTypeValue, executionTriggerInfoOrBuilder.triggerTypeValue) &&
        Objects.equals(this.triggeredBy, executionTriggerInfoOrBuilder.triggeredBy) &&
        Objects.equals(this.triggerType, executionTriggerInfoOrBuilder.triggerType) &&
        Objects.equals(this.rerunInfoOrBuilder, executionTriggerInfoOrBuilder.rerunInfoOrBuilder) &&
        Objects.equals(this.rerunInfo, executionTriggerInfoOrBuilder.rerunInfo) &&
        Objects.equals(this.allFields, executionTriggerInfoOrBuilder.allFields) &&
        Objects.equals(this.initializationErrorString, executionTriggerInfoOrBuilder.initializationErrorString) &&
        Objects.equals(this.descriptorForType, executionTriggerInfoOrBuilder.descriptorForType) &&
        Objects.equals(this.defaultInstanceForType, executionTriggerInfoOrBuilder.defaultInstanceForType) &&
        Objects.equals(this.unknownFields, executionTriggerInfoOrBuilder.unknownFields) &&
        Objects.equals(this.initialized, executionTriggerInfoOrBuilder.initialized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(triggeredByOrBuilder, isRerun, triggerTypeValue, triggeredBy, triggerType, rerunInfoOrBuilder, rerunInfo, allFields, initializationErrorString, descriptorForType, defaultInstanceForType, unknownFields, initialized);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionTriggerInfoOrBuilder {\n");
    
    sb.append("    triggeredByOrBuilder: ").append(toIndentedString(triggeredByOrBuilder)).append("\n");
    sb.append("    isRerun: ").append(toIndentedString(isRerun)).append("\n");
    sb.append("    triggerTypeValue: ").append(toIndentedString(triggerTypeValue)).append("\n");
    sb.append("    triggeredBy: ").append(toIndentedString(triggeredBy)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("    rerunInfoOrBuilder: ").append(toIndentedString(rerunInfoOrBuilder)).append("\n");
    sb.append("    rerunInfo: ").append(toIndentedString(rerunInfo)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
