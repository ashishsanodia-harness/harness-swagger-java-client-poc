/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Document;
import io.swagger.client.model.EdgeLayoutList;
import io.swagger.client.model.ExecutionErrorInfo;
import io.swagger.client.model.FailureInfoDTO;
import io.swagger.client.model.NodeRunInfo;
import io.swagger.client.model.SkipInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * This is the view of the Graph for execution of the Pipeline.
 */
@Schema(description = "This is the view of the Graph for execution of the Pipeline.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class GraphLayoutNode {
  @SerializedName("nodeType")
  private String nodeType = null;

  @SerializedName("nodeGroup")
  private String nodeGroup = null;

  @SerializedName("nodeIdentifier")
  private String nodeIdentifier = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nodeUuid")
  private String nodeUuid = null;

  /**
   * This is the Execution Status of the entity
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("RUNNING"),
    ASYNCWAITING("ASYNCWAITING"),
    TASKWAITING("TASKWAITING"),
    TIMEDWAITING("TIMEDWAITING"),
    FAILED("FAILED"),
    ERRORED("ERRORED"),
    IGNOREFAILED("IGNOREFAILED"),
    NOTSTARTED("NOTSTARTED"),
    EXPIRED("EXPIRED"),
    ABORTED("ABORTED"),
    DISCONTINUING("DISCONTINUING"),
    QUEUED("QUEUED"),
    PAUSED("PAUSED"),
    RESOURCEWAITING("RESOURCEWAITING"),
    INTERVENTIONWAITING("INTERVENTIONWAITING"),
    APPROVALWAITING("APPROVALWAITING"),
    SUCCESS("SUCCESS"),
    SUSPENDED("SUSPENDED"),
    SKIPPED("SKIPPED"),
    PAUSING("PAUSING"),
    APPROVALREJECTED("APPROVALREJECTED"),
    NOT_STARTED("NOT_STARTED"),
    INTERVENTION_WAITING("INTERVENTION_WAITING"),
    APPROVAL_WAITING("APPROVAL_WAITING"),
    APPROVAL_REJECTED("APPROVAL_REJECTED"),
    WAITING("WAITING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("module")
  private String module = null;

  @SerializedName("moduleInfo")
  private Map<String, Document> moduleInfo = null;

  @SerializedName("startTs")
  private Long startTs = null;

  @SerializedName("endTs")
  private Long endTs = null;

  @SerializedName("edgeLayoutList")
  private EdgeLayoutList edgeLayoutList = null;

  @SerializedName("skipInfo")
  private SkipInfo skipInfo = null;

  @SerializedName("nodeRunInfo")
  private NodeRunInfo nodeRunInfo = null;

  @SerializedName("barrierFound")
  private Boolean barrierFound = null;

  @SerializedName("failureInfo")
  private ExecutionErrorInfo failureInfo = null;

  @SerializedName("failureInfoDTO")
  private FailureInfoDTO failureInfoDTO = null;

  public GraphLayoutNode nodeType(String nodeType) {
    this.nodeType = nodeType;
    return this;
  }

   /**
   * Get nodeType
   * @return nodeType
  **/
  @Schema(description = "")
  public String getNodeType() {
    return nodeType;
  }

  public void setNodeType(String nodeType) {
    this.nodeType = nodeType;
  }

  public GraphLayoutNode nodeGroup(String nodeGroup) {
    this.nodeGroup = nodeGroup;
    return this;
  }

   /**
   * Get nodeGroup
   * @return nodeGroup
  **/
  @Schema(description = "")
  public String getNodeGroup() {
    return nodeGroup;
  }

  public void setNodeGroup(String nodeGroup) {
    this.nodeGroup = nodeGroup;
  }

  public GraphLayoutNode nodeIdentifier(String nodeIdentifier) {
    this.nodeIdentifier = nodeIdentifier;
    return this;
  }

   /**
   * Get nodeIdentifier
   * @return nodeIdentifier
  **/
  @Schema(description = "")
  public String getNodeIdentifier() {
    return nodeIdentifier;
  }

  public void setNodeIdentifier(String nodeIdentifier) {
    this.nodeIdentifier = nodeIdentifier;
  }

  public GraphLayoutNode name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GraphLayoutNode nodeUuid(String nodeUuid) {
    this.nodeUuid = nodeUuid;
    return this;
  }

   /**
   * Get nodeUuid
   * @return nodeUuid
  **/
  @Schema(description = "")
  public String getNodeUuid() {
    return nodeUuid;
  }

  public void setNodeUuid(String nodeUuid) {
    this.nodeUuid = nodeUuid;
  }

  public GraphLayoutNode status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * This is the Execution Status of the entity
   * @return status
  **/
  @Schema(description = "This is the Execution Status of the entity")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public GraphLayoutNode module(String module) {
    this.module = module;
    return this;
  }

   /**
   * Get module
   * @return module
  **/
  @Schema(description = "")
  public String getModule() {
    return module;
  }

  public void setModule(String module) {
    this.module = module;
  }

  public GraphLayoutNode moduleInfo(Map<String, Document> moduleInfo) {
    this.moduleInfo = moduleInfo;
    return this;
  }

  public GraphLayoutNode putModuleInfoItem(String key, Document moduleInfoItem) {
    if (this.moduleInfo == null) {
      this.moduleInfo = new HashMap<String, Document>();
    }
    this.moduleInfo.put(key, moduleInfoItem);
    return this;
  }

   /**
   * Get moduleInfo
   * @return moduleInfo
  **/
  @Schema(description = "")
  public Map<String, Document> getModuleInfo() {
    return moduleInfo;
  }

  public void setModuleInfo(Map<String, Document> moduleInfo) {
    this.moduleInfo = moduleInfo;
  }

  public GraphLayoutNode startTs(Long startTs) {
    this.startTs = startTs;
    return this;
  }

   /**
   * Get startTs
   * @return startTs
  **/
  @Schema(description = "")
  public Long getStartTs() {
    return startTs;
  }

  public void setStartTs(Long startTs) {
    this.startTs = startTs;
  }

  public GraphLayoutNode endTs(Long endTs) {
    this.endTs = endTs;
    return this;
  }

   /**
   * Get endTs
   * @return endTs
  **/
  @Schema(description = "")
  public Long getEndTs() {
    return endTs;
  }

  public void setEndTs(Long endTs) {
    this.endTs = endTs;
  }

  public GraphLayoutNode edgeLayoutList(EdgeLayoutList edgeLayoutList) {
    this.edgeLayoutList = edgeLayoutList;
    return this;
  }

   /**
   * Get edgeLayoutList
   * @return edgeLayoutList
  **/
  @Schema(description = "")
  public EdgeLayoutList getEdgeLayoutList() {
    return edgeLayoutList;
  }

  public void setEdgeLayoutList(EdgeLayoutList edgeLayoutList) {
    this.edgeLayoutList = edgeLayoutList;
  }

  public GraphLayoutNode skipInfo(SkipInfo skipInfo) {
    this.skipInfo = skipInfo;
    return this;
  }

   /**
   * Get skipInfo
   * @return skipInfo
  **/
  @Schema(description = "")
  public SkipInfo getSkipInfo() {
    return skipInfo;
  }

  public void setSkipInfo(SkipInfo skipInfo) {
    this.skipInfo = skipInfo;
  }

  public GraphLayoutNode nodeRunInfo(NodeRunInfo nodeRunInfo) {
    this.nodeRunInfo = nodeRunInfo;
    return this;
  }

   /**
   * Get nodeRunInfo
   * @return nodeRunInfo
  **/
  @Schema(description = "")
  public NodeRunInfo getNodeRunInfo() {
    return nodeRunInfo;
  }

  public void setNodeRunInfo(NodeRunInfo nodeRunInfo) {
    this.nodeRunInfo = nodeRunInfo;
  }

  public GraphLayoutNode barrierFound(Boolean barrierFound) {
    this.barrierFound = barrierFound;
    return this;
  }

   /**
   * Get barrierFound
   * @return barrierFound
  **/
  @Schema(description = "")
  public Boolean isBarrierFound() {
    return barrierFound;
  }

  public void setBarrierFound(Boolean barrierFound) {
    this.barrierFound = barrierFound;
  }

  public GraphLayoutNode failureInfo(ExecutionErrorInfo failureInfo) {
    this.failureInfo = failureInfo;
    return this;
  }

   /**
   * Get failureInfo
   * @return failureInfo
  **/
  @Schema(description = "")
  public ExecutionErrorInfo getFailureInfo() {
    return failureInfo;
  }

  public void setFailureInfo(ExecutionErrorInfo failureInfo) {
    this.failureInfo = failureInfo;
  }

  public GraphLayoutNode failureInfoDTO(FailureInfoDTO failureInfoDTO) {
    this.failureInfoDTO = failureInfoDTO;
    return this;
  }

   /**
   * Get failureInfoDTO
   * @return failureInfoDTO
  **/
  @Schema(description = "")
  public FailureInfoDTO getFailureInfoDTO() {
    return failureInfoDTO;
  }

  public void setFailureInfoDTO(FailureInfoDTO failureInfoDTO) {
    this.failureInfoDTO = failureInfoDTO;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GraphLayoutNode graphLayoutNode = (GraphLayoutNode) o;
    return Objects.equals(this.nodeType, graphLayoutNode.nodeType) &&
        Objects.equals(this.nodeGroup, graphLayoutNode.nodeGroup) &&
        Objects.equals(this.nodeIdentifier, graphLayoutNode.nodeIdentifier) &&
        Objects.equals(this.name, graphLayoutNode.name) &&
        Objects.equals(this.nodeUuid, graphLayoutNode.nodeUuid) &&
        Objects.equals(this.status, graphLayoutNode.status) &&
        Objects.equals(this.module, graphLayoutNode.module) &&
        Objects.equals(this.moduleInfo, graphLayoutNode.moduleInfo) &&
        Objects.equals(this.startTs, graphLayoutNode.startTs) &&
        Objects.equals(this.endTs, graphLayoutNode.endTs) &&
        Objects.equals(this.edgeLayoutList, graphLayoutNode.edgeLayoutList) &&
        Objects.equals(this.skipInfo, graphLayoutNode.skipInfo) &&
        Objects.equals(this.nodeRunInfo, graphLayoutNode.nodeRunInfo) &&
        Objects.equals(this.barrierFound, graphLayoutNode.barrierFound) &&
        Objects.equals(this.failureInfo, graphLayoutNode.failureInfo) &&
        Objects.equals(this.failureInfoDTO, graphLayoutNode.failureInfoDTO);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeType, nodeGroup, nodeIdentifier, name, nodeUuid, status, module, moduleInfo, startTs, endTs, edgeLayoutList, skipInfo, nodeRunInfo, barrierFound, failureInfo, failureInfoDTO);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GraphLayoutNode {\n");
    
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    nodeGroup: ").append(toIndentedString(nodeGroup)).append("\n");
    sb.append("    nodeIdentifier: ").append(toIndentedString(nodeIdentifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeUuid: ").append(toIndentedString(nodeUuid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    moduleInfo: ").append(toIndentedString(moduleInfo)).append("\n");
    sb.append("    startTs: ").append(toIndentedString(startTs)).append("\n");
    sb.append("    endTs: ").append(toIndentedString(endTs)).append("\n");
    sb.append("    edgeLayoutList: ").append(toIndentedString(edgeLayoutList)).append("\n");
    sb.append("    skipInfo: ").append(toIndentedString(skipInfo)).append("\n");
    sb.append("    nodeRunInfo: ").append(toIndentedString(nodeRunInfo)).append("\n");
    sb.append("    barrierFound: ").append(toIndentedString(barrierFound)).append("\n");
    sb.append("    failureInfo: ").append(toIndentedString(failureInfo)).append("\n");
    sb.append("    failureInfoDTO: ").append(toIndentedString(failureInfoDTO)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
