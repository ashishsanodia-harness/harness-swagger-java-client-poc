/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * WebhookEventProcessingDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class WebhookEventProcessingDetails {
  @SerializedName("eventFound")
  private Boolean eventFound = null;

  @SerializedName("eventId")
  private String eventId = null;

  @SerializedName("accountIdentifier")
  private String accountIdentifier = null;

  @SerializedName("orgIdentifier")
  private String orgIdentifier = null;

  @SerializedName("projectIdentifier")
  private String projectIdentifier = null;

  @SerializedName("triggerIdentifier")
  private String triggerIdentifier = null;

  @SerializedName("pipelineIdentifier")
  private String pipelineIdentifier = null;

  @SerializedName("pipelineExecutionId")
  private String pipelineExecutionId = null;

  @SerializedName("exceptionOccured")
  private Boolean exceptionOccured = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("payload")
  private String payload = null;

  @SerializedName("eventCreatedAt")
  private Long eventCreatedAt = null;

  @SerializedName("runtimeInput")
  private String runtimeInput = null;

  public WebhookEventProcessingDetails eventFound(Boolean eventFound) {
    this.eventFound = eventFound;
    return this;
  }

   /**
   * Get eventFound
   * @return eventFound
  **/
  @Schema(description = "")
  public Boolean isEventFound() {
    return eventFound;
  }

  public void setEventFound(Boolean eventFound) {
    this.eventFound = eventFound;
  }

  public WebhookEventProcessingDetails eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @Schema(description = "")
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }

  public WebhookEventProcessingDetails accountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Get accountIdentifier
   * @return accountIdentifier
  **/
  @Schema(description = "")
  public String getAccountIdentifier() {
    return accountIdentifier;
  }

  public void setAccountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
  }

  public WebhookEventProcessingDetails orgIdentifier(String orgIdentifier) {
    this.orgIdentifier = orgIdentifier;
    return this;
  }

   /**
   * Get orgIdentifier
   * @return orgIdentifier
  **/
  @Schema(description = "")
  public String getOrgIdentifier() {
    return orgIdentifier;
  }

  public void setOrgIdentifier(String orgIdentifier) {
    this.orgIdentifier = orgIdentifier;
  }

  public WebhookEventProcessingDetails projectIdentifier(String projectIdentifier) {
    this.projectIdentifier = projectIdentifier;
    return this;
  }

   /**
   * Get projectIdentifier
   * @return projectIdentifier
  **/
  @Schema(description = "")
  public String getProjectIdentifier() {
    return projectIdentifier;
  }

  public void setProjectIdentifier(String projectIdentifier) {
    this.projectIdentifier = projectIdentifier;
  }

  public WebhookEventProcessingDetails triggerIdentifier(String triggerIdentifier) {
    this.triggerIdentifier = triggerIdentifier;
    return this;
  }

   /**
   * Get triggerIdentifier
   * @return triggerIdentifier
  **/
  @Schema(description = "")
  public String getTriggerIdentifier() {
    return triggerIdentifier;
  }

  public void setTriggerIdentifier(String triggerIdentifier) {
    this.triggerIdentifier = triggerIdentifier;
  }

  public WebhookEventProcessingDetails pipelineIdentifier(String pipelineIdentifier) {
    this.pipelineIdentifier = pipelineIdentifier;
    return this;
  }

   /**
   * Get pipelineIdentifier
   * @return pipelineIdentifier
  **/
  @Schema(description = "")
  public String getPipelineIdentifier() {
    return pipelineIdentifier;
  }

  public void setPipelineIdentifier(String pipelineIdentifier) {
    this.pipelineIdentifier = pipelineIdentifier;
  }

  public WebhookEventProcessingDetails pipelineExecutionId(String pipelineExecutionId) {
    this.pipelineExecutionId = pipelineExecutionId;
    return this;
  }

   /**
   * Get pipelineExecutionId
   * @return pipelineExecutionId
  **/
  @Schema(description = "")
  public String getPipelineExecutionId() {
    return pipelineExecutionId;
  }

  public void setPipelineExecutionId(String pipelineExecutionId) {
    this.pipelineExecutionId = pipelineExecutionId;
  }

  public WebhookEventProcessingDetails exceptionOccured(Boolean exceptionOccured) {
    this.exceptionOccured = exceptionOccured;
    return this;
  }

   /**
   * Get exceptionOccured
   * @return exceptionOccured
  **/
  @Schema(description = "")
  public Boolean isExceptionOccured() {
    return exceptionOccured;
  }

  public void setExceptionOccured(Boolean exceptionOccured) {
    this.exceptionOccured = exceptionOccured;
  }

  public WebhookEventProcessingDetails status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public WebhookEventProcessingDetails message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public WebhookEventProcessingDetails payload(String payload) {
    this.payload = payload;
    return this;
  }

   /**
   * Get payload
   * @return payload
  **/
  @Schema(description = "")
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }

  public WebhookEventProcessingDetails eventCreatedAt(Long eventCreatedAt) {
    this.eventCreatedAt = eventCreatedAt;
    return this;
  }

   /**
   * Get eventCreatedAt
   * @return eventCreatedAt
  **/
  @Schema(description = "")
  public Long getEventCreatedAt() {
    return eventCreatedAt;
  }

  public void setEventCreatedAt(Long eventCreatedAt) {
    this.eventCreatedAt = eventCreatedAt;
  }

  public WebhookEventProcessingDetails runtimeInput(String runtimeInput) {
    this.runtimeInput = runtimeInput;
    return this;
  }

   /**
   * Get runtimeInput
   * @return runtimeInput
  **/
  @Schema(description = "")
  public String getRuntimeInput() {
    return runtimeInput;
  }

  public void setRuntimeInput(String runtimeInput) {
    this.runtimeInput = runtimeInput;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEventProcessingDetails webhookEventProcessingDetails = (WebhookEventProcessingDetails) o;
    return Objects.equals(this.eventFound, webhookEventProcessingDetails.eventFound) &&
        Objects.equals(this.eventId, webhookEventProcessingDetails.eventId) &&
        Objects.equals(this.accountIdentifier, webhookEventProcessingDetails.accountIdentifier) &&
        Objects.equals(this.orgIdentifier, webhookEventProcessingDetails.orgIdentifier) &&
        Objects.equals(this.projectIdentifier, webhookEventProcessingDetails.projectIdentifier) &&
        Objects.equals(this.triggerIdentifier, webhookEventProcessingDetails.triggerIdentifier) &&
        Objects.equals(this.pipelineIdentifier, webhookEventProcessingDetails.pipelineIdentifier) &&
        Objects.equals(this.pipelineExecutionId, webhookEventProcessingDetails.pipelineExecutionId) &&
        Objects.equals(this.exceptionOccured, webhookEventProcessingDetails.exceptionOccured) &&
        Objects.equals(this.status, webhookEventProcessingDetails.status) &&
        Objects.equals(this.message, webhookEventProcessingDetails.message) &&
        Objects.equals(this.payload, webhookEventProcessingDetails.payload) &&
        Objects.equals(this.eventCreatedAt, webhookEventProcessingDetails.eventCreatedAt) &&
        Objects.equals(this.runtimeInput, webhookEventProcessingDetails.runtimeInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventFound, eventId, accountIdentifier, orgIdentifier, projectIdentifier, triggerIdentifier, pipelineIdentifier, pipelineExecutionId, exceptionOccured, status, message, payload, eventCreatedAt, runtimeInput);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEventProcessingDetails {\n");
    
    sb.append("    eventFound: ").append(toIndentedString(eventFound)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    orgIdentifier: ").append(toIndentedString(orgIdentifier)).append("\n");
    sb.append("    projectIdentifier: ").append(toIndentedString(projectIdentifier)).append("\n");
    sb.append("    triggerIdentifier: ").append(toIndentedString(triggerIdentifier)).append("\n");
    sb.append("    pipelineIdentifier: ").append(toIndentedString(pipelineIdentifier)).append("\n");
    sb.append("    pipelineExecutionId: ").append(toIndentedString(pipelineExecutionId)).append("\n");
    sb.append("    exceptionOccured: ").append(toIndentedString(exceptionOccured)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    eventCreatedAt: ").append(toIndentedString(eventCreatedAt)).append("\n");
    sb.append("    runtimeInput: ").append(toIndentedString(runtimeInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
