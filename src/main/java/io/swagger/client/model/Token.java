/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * This has the API Key Token details defined in Harness.
 */
@Schema(description = "This has the API Key Token details defined in Harness.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class Token {
  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("validFrom")
  private Long validFrom = null;

  @SerializedName("validTo")
  private Long validTo = null;

  @SerializedName("scheduledExpireTime")
  private Long scheduledExpireTime = null;

  @SerializedName("valid")
  private Boolean valid = null;

  @SerializedName("accountIdentifier")
  private String accountIdentifier = null;

  @SerializedName("projectIdentifier")
  private String projectIdentifier = null;

  @SerializedName("orgIdentifier")
  private String orgIdentifier = null;

  @SerializedName("apiKeyIdentifier")
  private String apiKeyIdentifier = null;

  @SerializedName("parentIdentifier")
  private String parentIdentifier = null;

  /**
   * Type of the API Key
   */
  @JsonAdapter(ApiKeyTypeEnum.Adapter.class)
  public enum ApiKeyTypeEnum {
    USER("USER"),
    SERVICE_ACCOUNT("SERVICE_ACCOUNT");

    private String value;

    ApiKeyTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ApiKeyTypeEnum fromValue(String input) {
      for (ApiKeyTypeEnum b : ApiKeyTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ApiKeyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiKeyTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ApiKeyTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ApiKeyTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("apiKeyType")
  private ApiKeyTypeEnum apiKeyType = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("tags")
  private Map<String, String> tags = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("encodedPassword")
  private String encodedPassword = null;

  public Token identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Identifier of the Token
   * @return identifier
  **/
  @Schema(description = "Identifier of the Token")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public Token name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the Token
   * @return name
  **/
  @Schema(description = "Name of the Token")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Token validFrom(Long validFrom) {
    this.validFrom = validFrom;
    return this;
  }

   /**
   * This is the time from which the Token is valid. The time is in milliseconds.
   * @return validFrom
  **/
  @Schema(description = "This is the time from which the Token is valid. The time is in milliseconds.")
  public Long getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(Long validFrom) {
    this.validFrom = validFrom;
  }

  public Token validTo(Long validTo) {
    this.validTo = validTo;
    return this;
  }

   /**
   * This is the time till which the Token is valid. The time is in milliseconds.
   * @return validTo
  **/
  @Schema(description = "This is the time till which the Token is valid. The time is in milliseconds.")
  public Long getValidTo() {
    return validTo;
  }

  public void setValidTo(Long validTo) {
    this.validTo = validTo;
  }

  public Token scheduledExpireTime(Long scheduledExpireTime) {
    this.scheduledExpireTime = scheduledExpireTime;
    return this;
  }

   /**
   * Scheduled expiry time in milliseconds.
   * @return scheduledExpireTime
  **/
  @Schema(description = "Scheduled expiry time in milliseconds.")
  public Long getScheduledExpireTime() {
    return scheduledExpireTime;
  }

  public void setScheduledExpireTime(Long scheduledExpireTime) {
    this.scheduledExpireTime = scheduledExpireTime;
  }

  public Token valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

   /**
   * Boolean value to indicate if Token is valid or not.
   * @return valid
  **/
  @Schema(description = "Boolean value to indicate if Token is valid or not.")
  public Boolean isValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }

  public Token accountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Account Identifier for the Entity
   * @return accountIdentifier
  **/
  @Schema(description = "Account Identifier for the Entity")
  public String getAccountIdentifier() {
    return accountIdentifier;
  }

  public void setAccountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
  }

  public Token projectIdentifier(String projectIdentifier) {
    this.projectIdentifier = projectIdentifier;
    return this;
  }

   /**
   * Project Identifier for the Entity
   * @return projectIdentifier
  **/
  @Schema(description = "Project Identifier for the Entity")
  public String getProjectIdentifier() {
    return projectIdentifier;
  }

  public void setProjectIdentifier(String projectIdentifier) {
    this.projectIdentifier = projectIdentifier;
  }

  public Token orgIdentifier(String orgIdentifier) {
    this.orgIdentifier = orgIdentifier;
    return this;
  }

   /**
   * Organization Identifier for the Entity
   * @return orgIdentifier
  **/
  @Schema(description = "Organization Identifier for the Entity")
  public String getOrgIdentifier() {
    return orgIdentifier;
  }

  public void setOrgIdentifier(String orgIdentifier) {
    this.orgIdentifier = orgIdentifier;
  }

  public Token apiKeyIdentifier(String apiKeyIdentifier) {
    this.apiKeyIdentifier = apiKeyIdentifier;
    return this;
  }

   /**
   * This is the API Key Id within which the Token is created.
   * @return apiKeyIdentifier
  **/
  @Schema(description = "This is the API Key Id within which the Token is created.")
  public String getApiKeyIdentifier() {
    return apiKeyIdentifier;
  }

  public void setApiKeyIdentifier(String apiKeyIdentifier) {
    this.apiKeyIdentifier = apiKeyIdentifier;
  }

  public Token parentIdentifier(String parentIdentifier) {
    this.parentIdentifier = parentIdentifier;
    return this;
  }

   /**
   * This is the ID of the Parent entity from which the Token inherits its role bindings.
   * @return parentIdentifier
  **/
  @Schema(description = "This is the ID of the Parent entity from which the Token inherits its role bindings.")
  public String getParentIdentifier() {
    return parentIdentifier;
  }

  public void setParentIdentifier(String parentIdentifier) {
    this.parentIdentifier = parentIdentifier;
  }

  public Token apiKeyType(ApiKeyTypeEnum apiKeyType) {
    this.apiKeyType = apiKeyType;
    return this;
  }

   /**
   * Type of the API Key
   * @return apiKeyType
  **/
  @Schema(description = "Type of the API Key")
  public ApiKeyTypeEnum getApiKeyType() {
    return apiKeyType;
  }

  public void setApiKeyType(ApiKeyTypeEnum apiKeyType) {
    this.apiKeyType = apiKeyType;
  }

  public Token description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the Token
   * @return description
  **/
  @Schema(description = "Description of the Token")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Token tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public Token putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<String, String>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Tags for the Token
   * @return tags
  **/
  @Schema(description = "Tags for the Token")
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }

  public Token email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Email Id of the user who created the Token.
   * @return email
  **/
  @Schema(description = "Email Id of the user who created the Token.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public Token username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Name of the user who created the Token.
   * @return username
  **/
  @Schema(description = "Name of the user who created the Token.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public Token encodedPassword(String encodedPassword) {
    this.encodedPassword = encodedPassword;
    return this;
  }

   /**
   * Get encodedPassword
   * @return encodedPassword
  **/
  @Schema(description = "")
  public String getEncodedPassword() {
    return encodedPassword;
  }

  public void setEncodedPassword(String encodedPassword) {
    this.encodedPassword = encodedPassword;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Token token = (Token) o;
    return Objects.equals(this.identifier, token.identifier) &&
        Objects.equals(this.name, token.name) &&
        Objects.equals(this.validFrom, token.validFrom) &&
        Objects.equals(this.validTo, token.validTo) &&
        Objects.equals(this.scheduledExpireTime, token.scheduledExpireTime) &&
        Objects.equals(this.valid, token.valid) &&
        Objects.equals(this.accountIdentifier, token.accountIdentifier) &&
        Objects.equals(this.projectIdentifier, token.projectIdentifier) &&
        Objects.equals(this.orgIdentifier, token.orgIdentifier) &&
        Objects.equals(this.apiKeyIdentifier, token.apiKeyIdentifier) &&
        Objects.equals(this.parentIdentifier, token.parentIdentifier) &&
        Objects.equals(this.apiKeyType, token.apiKeyType) &&
        Objects.equals(this.description, token.description) &&
        Objects.equals(this.tags, token.tags) &&
        Objects.equals(this.email, token.email) &&
        Objects.equals(this.username, token.username) &&
        Objects.equals(this.encodedPassword, token.encodedPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, name, validFrom, validTo, scheduledExpireTime, valid, accountIdentifier, projectIdentifier, orgIdentifier, apiKeyIdentifier, parentIdentifier, apiKeyType, description, tags, email, username, encodedPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Token {\n");
    
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    scheduledExpireTime: ").append(toIndentedString(scheduledExpireTime)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    projectIdentifier: ").append(toIndentedString(projectIdentifier)).append("\n");
    sb.append("    orgIdentifier: ").append(toIndentedString(orgIdentifier)).append("\n");
    sb.append("    apiKeyIdentifier: ").append(toIndentedString(apiKeyIdentifier)).append("\n");
    sb.append("    parentIdentifier: ").append(toIndentedString(parentIdentifier)).append("\n");
    sb.append("    apiKeyType: ").append(toIndentedString(apiKeyType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    encodedPassword: ").append(toIndentedString(encodedPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
