/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ModuleLicense;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This contains details of the Continuous Delivery License in Harness
 */
@Schema(description = "This contains details of the Continuous Delivery License in Harness")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class CDModuleLicense extends ModuleLicense {
  /**
   * Gets or Sets cdLicenseType
   */
  @JsonAdapter(CdLicenseTypeEnum.Adapter.class)
  public enum CdLicenseTypeEnum {
    SERVICES("SERVICES"),
    SERVICE_INSTANCES("SERVICE_INSTANCES");

    private String value;

    CdLicenseTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CdLicenseTypeEnum fromValue(String input) {
      for (CdLicenseTypeEnum b : CdLicenseTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CdLicenseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CdLicenseTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CdLicenseTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CdLicenseTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("cdLicenseType")
  private CdLicenseTypeEnum cdLicenseType = null;

  @SerializedName("workloads")
  private Integer workloads = null;

  @SerializedName("serviceInstances")
  private Integer serviceInstances = null;

  public CDModuleLicense cdLicenseType(CdLicenseTypeEnum cdLicenseType) {
    this.cdLicenseType = cdLicenseType;
    return this;
  }

   /**
   * Get cdLicenseType
   * @return cdLicenseType
  **/
  @Schema(description = "")
  public CdLicenseTypeEnum getCdLicenseType() {
    return cdLicenseType;
  }

  public void setCdLicenseType(CdLicenseTypeEnum cdLicenseType) {
    this.cdLicenseType = cdLicenseType;
  }

  public CDModuleLicense workloads(Integer workloads) {
    this.workloads = workloads;
    return this;
  }

   /**
   * Get workloads
   * @return workloads
  **/
  @Schema(description = "")
  public Integer getWorkloads() {
    return workloads;
  }

  public void setWorkloads(Integer workloads) {
    this.workloads = workloads;
  }

  public CDModuleLicense serviceInstances(Integer serviceInstances) {
    this.serviceInstances = serviceInstances;
    return this;
  }

   /**
   * Get serviceInstances
   * @return serviceInstances
  **/
  @Schema(description = "")
  public Integer getServiceInstances() {
    return serviceInstances;
  }

  public void setServiceInstances(Integer serviceInstances) {
    this.serviceInstances = serviceInstances;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CDModuleLicense cdModuleLicense = (CDModuleLicense) o;
    return Objects.equals(this.cdLicenseType, cdModuleLicense.cdLicenseType) &&
        Objects.equals(this.workloads, cdModuleLicense.workloads) &&
        Objects.equals(this.serviceInstances, cdModuleLicense.serviceInstances) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdLicenseType, workloads, serviceInstances, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CDModuleLicense {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cdLicenseType: ").append(toIndentedString(cdLicenseType)).append("\n");
    sb.append("    workloads: ").append(toIndentedString(workloads)).append("\n");
    sb.append("    serviceInstances: ").append(toIndentedString(serviceInstances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
