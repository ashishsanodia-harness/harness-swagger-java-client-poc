/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.DescriptorProto;
import io.swagger.client.model.EnumDescriptor;
import io.swagger.client.model.FieldDescriptor;
import io.swagger.client.model.FileDescriptor;
import io.swagger.client.model.MessageOptions;
import io.swagger.client.model.OneofDescriptor;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Descriptor
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class Descriptor {
  @SerializedName("index")
  private Integer index = null;

  @SerializedName("proto")
  private DescriptorProto proto = null;

  @SerializedName("fullName")
  private String fullName = null;

  @SerializedName("file")
  private FileDescriptor file = null;

  @SerializedName("containingType")
  private Descriptor containingType = null;

  @SerializedName("nestedTypes")
  private List<Descriptor> nestedTypes = null;

  @SerializedName("enumTypes")
  private List<EnumDescriptor> enumTypes = null;

  @SerializedName("fields")
  private List<FieldDescriptor> fields = null;

  @SerializedName("extensions")
  private List<FieldDescriptor> extensions = null;

  @SerializedName("oneofs")
  private List<OneofDescriptor> oneofs = null;

  @SerializedName("options")
  private MessageOptions options = null;

  @SerializedName("extendable")
  private Boolean extendable = null;

  @SerializedName("name")
  private String name = null;

  public Descriptor index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @Schema(description = "")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public Descriptor proto(DescriptorProto proto) {
    this.proto = proto;
    return this;
  }

   /**
   * Get proto
   * @return proto
  **/
  @Schema(description = "")
  public DescriptorProto getProto() {
    return proto;
  }

  public void setProto(DescriptorProto proto) {
    this.proto = proto;
  }

  public Descriptor fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @Schema(description = "")
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  public Descriptor file(FileDescriptor file) {
    this.file = file;
    return this;
  }

   /**
   * Get file
   * @return file
  **/
  @Schema(description = "")
  public FileDescriptor getFile() {
    return file;
  }

  public void setFile(FileDescriptor file) {
    this.file = file;
  }

  public Descriptor containingType(Descriptor containingType) {
    this.containingType = containingType;
    return this;
  }

   /**
   * Get containingType
   * @return containingType
  **/
  @Schema(description = "")
  public Descriptor getContainingType() {
    return containingType;
  }

  public void setContainingType(Descriptor containingType) {
    this.containingType = containingType;
  }

  public Descriptor nestedTypes(List<Descriptor> nestedTypes) {
    this.nestedTypes = nestedTypes;
    return this;
  }

  public Descriptor addNestedTypesItem(Descriptor nestedTypesItem) {
    if (this.nestedTypes == null) {
      this.nestedTypes = new ArrayList<Descriptor>();
    }
    this.nestedTypes.add(nestedTypesItem);
    return this;
  }

   /**
   * Get nestedTypes
   * @return nestedTypes
  **/
  @Schema(description = "")
  public List<Descriptor> getNestedTypes() {
    return nestedTypes;
  }

  public void setNestedTypes(List<Descriptor> nestedTypes) {
    this.nestedTypes = nestedTypes;
  }

  public Descriptor enumTypes(List<EnumDescriptor> enumTypes) {
    this.enumTypes = enumTypes;
    return this;
  }

  public Descriptor addEnumTypesItem(EnumDescriptor enumTypesItem) {
    if (this.enumTypes == null) {
      this.enumTypes = new ArrayList<EnumDescriptor>();
    }
    this.enumTypes.add(enumTypesItem);
    return this;
  }

   /**
   * Get enumTypes
   * @return enumTypes
  **/
  @Schema(description = "")
  public List<EnumDescriptor> getEnumTypes() {
    return enumTypes;
  }

  public void setEnumTypes(List<EnumDescriptor> enumTypes) {
    this.enumTypes = enumTypes;
  }

  public Descriptor fields(List<FieldDescriptor> fields) {
    this.fields = fields;
    return this;
  }

  public Descriptor addFieldsItem(FieldDescriptor fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<FieldDescriptor>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @Schema(description = "")
  public List<FieldDescriptor> getFields() {
    return fields;
  }

  public void setFields(List<FieldDescriptor> fields) {
    this.fields = fields;
  }

  public Descriptor extensions(List<FieldDescriptor> extensions) {
    this.extensions = extensions;
    return this;
  }

  public Descriptor addExtensionsItem(FieldDescriptor extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<FieldDescriptor>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

   /**
   * Get extensions
   * @return extensions
  **/
  @Schema(description = "")
  public List<FieldDescriptor> getExtensions() {
    return extensions;
  }

  public void setExtensions(List<FieldDescriptor> extensions) {
    this.extensions = extensions;
  }

  public Descriptor oneofs(List<OneofDescriptor> oneofs) {
    this.oneofs = oneofs;
    return this;
  }

  public Descriptor addOneofsItem(OneofDescriptor oneofsItem) {
    if (this.oneofs == null) {
      this.oneofs = new ArrayList<OneofDescriptor>();
    }
    this.oneofs.add(oneofsItem);
    return this;
  }

   /**
   * Get oneofs
   * @return oneofs
  **/
  @Schema(description = "")
  public List<OneofDescriptor> getOneofs() {
    return oneofs;
  }

  public void setOneofs(List<OneofDescriptor> oneofs) {
    this.oneofs = oneofs;
  }

  public Descriptor options(MessageOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public MessageOptions getOptions() {
    return options;
  }

  public void setOptions(MessageOptions options) {
    this.options = options;
  }

  public Descriptor extendable(Boolean extendable) {
    this.extendable = extendable;
    return this;
  }

   /**
   * Get extendable
   * @return extendable
  **/
  @Schema(description = "")
  public Boolean isExtendable() {
    return extendable;
  }

  public void setExtendable(Boolean extendable) {
    this.extendable = extendable;
  }

  public Descriptor name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Descriptor descriptor = (Descriptor) o;
    return Objects.equals(this.index, descriptor.index) &&
        Objects.equals(this.proto, descriptor.proto) &&
        Objects.equals(this.fullName, descriptor.fullName) &&
        Objects.equals(this.file, descriptor.file) &&
        Objects.equals(this.containingType, descriptor.containingType) &&
        Objects.equals(this.nestedTypes, descriptor.nestedTypes) &&
        Objects.equals(this.enumTypes, descriptor.enumTypes) &&
        Objects.equals(this.fields, descriptor.fields) &&
        Objects.equals(this.extensions, descriptor.extensions) &&
        Objects.equals(this.oneofs, descriptor.oneofs) &&
        Objects.equals(this.options, descriptor.options) &&
        Objects.equals(this.extendable, descriptor.extendable) &&
        Objects.equals(this.name, descriptor.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, proto, fullName, file, containingType, nestedTypes, enumTypes, fields, extensions, oneofs, options, extendable, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Descriptor {\n");
    
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    proto: ").append(toIndentedString(proto)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    containingType: ").append(toIndentedString(containingType)).append("\n");
    sb.append("    nestedTypes: ").append(toIndentedString(nestedTypes)).append("\n");
    sb.append("    enumTypes: ").append(toIndentedString(enumTypes)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    oneofs: ").append(toIndentedString(oneofs)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    extendable: ").append(toIndentedString(extendable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
