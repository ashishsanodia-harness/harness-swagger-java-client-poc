/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.Message;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * TaskExecutableResponseOrBuilder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class TaskExecutableResponseOrBuilder {
  @SerializedName("taskId")
  private String taskId = null;

  @SerializedName("taskName")
  private String taskName = null;

  @SerializedName("taskCategoryValue")
  private Integer taskCategoryValue = null;

  /**
   * Gets or Sets taskCategory
   */
  @JsonAdapter(TaskCategoryEnum.Adapter.class)
  public enum TaskCategoryEnum {
    UNKNOWN_CATEGORY("UNKNOWN_CATEGORY"),
    DELEGATE_TASK_V1("DELEGATE_TASK_V1"),
    DELEGATE_TASK_V2("DELEGATE_TASK_V2"),
    UNRECOGNIZED("UNRECOGNIZED");

    private String value;

    TaskCategoryEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TaskCategoryEnum fromValue(String input) {
      for (TaskCategoryEnum b : TaskCategoryEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TaskCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskCategoryEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TaskCategoryEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TaskCategoryEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("taskCategory")
  private TaskCategoryEnum taskCategory = null;

  @SerializedName("logKeysList")
  private List<String> logKeysList = null;

  @SerializedName("logKeysCount")
  private Integer logKeysCount = null;

  @SerializedName("unitsList")
  private List<String> unitsList = null;

  @SerializedName("unitsCount")
  private Integer unitsCount = null;

  @SerializedName("taskIdBytes")
  private ByteString taskIdBytes = null;

  @SerializedName("taskNameBytes")
  private ByteString taskNameBytes = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("defaultInstanceForType")
  private Message defaultInstanceForType = null;

  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  public TaskExecutableResponseOrBuilder taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * Get taskId
   * @return taskId
  **/
  @Schema(description = "")
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }

  public TaskExecutableResponseOrBuilder taskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

   /**
   * Get taskName
   * @return taskName
  **/
  @Schema(description = "")
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }

  public TaskExecutableResponseOrBuilder taskCategoryValue(Integer taskCategoryValue) {
    this.taskCategoryValue = taskCategoryValue;
    return this;
  }

   /**
   * Get taskCategoryValue
   * @return taskCategoryValue
  **/
  @Schema(description = "")
  public Integer getTaskCategoryValue() {
    return taskCategoryValue;
  }

  public void setTaskCategoryValue(Integer taskCategoryValue) {
    this.taskCategoryValue = taskCategoryValue;
  }

  public TaskExecutableResponseOrBuilder taskCategory(TaskCategoryEnum taskCategory) {
    this.taskCategory = taskCategory;
    return this;
  }

   /**
   * Get taskCategory
   * @return taskCategory
  **/
  @Schema(description = "")
  public TaskCategoryEnum getTaskCategory() {
    return taskCategory;
  }

  public void setTaskCategory(TaskCategoryEnum taskCategory) {
    this.taskCategory = taskCategory;
  }

  public TaskExecutableResponseOrBuilder logKeysList(List<String> logKeysList) {
    this.logKeysList = logKeysList;
    return this;
  }

  public TaskExecutableResponseOrBuilder addLogKeysListItem(String logKeysListItem) {
    if (this.logKeysList == null) {
      this.logKeysList = new ArrayList<String>();
    }
    this.logKeysList.add(logKeysListItem);
    return this;
  }

   /**
   * Get logKeysList
   * @return logKeysList
  **/
  @Schema(description = "")
  public List<String> getLogKeysList() {
    return logKeysList;
  }

  public void setLogKeysList(List<String> logKeysList) {
    this.logKeysList = logKeysList;
  }

  public TaskExecutableResponseOrBuilder logKeysCount(Integer logKeysCount) {
    this.logKeysCount = logKeysCount;
    return this;
  }

   /**
   * Get logKeysCount
   * @return logKeysCount
  **/
  @Schema(description = "")
  public Integer getLogKeysCount() {
    return logKeysCount;
  }

  public void setLogKeysCount(Integer logKeysCount) {
    this.logKeysCount = logKeysCount;
  }

  public TaskExecutableResponseOrBuilder unitsList(List<String> unitsList) {
    this.unitsList = unitsList;
    return this;
  }

  public TaskExecutableResponseOrBuilder addUnitsListItem(String unitsListItem) {
    if (this.unitsList == null) {
      this.unitsList = new ArrayList<String>();
    }
    this.unitsList.add(unitsListItem);
    return this;
  }

   /**
   * Get unitsList
   * @return unitsList
  **/
  @Schema(description = "")
  public List<String> getUnitsList() {
    return unitsList;
  }

  public void setUnitsList(List<String> unitsList) {
    this.unitsList = unitsList;
  }

  public TaskExecutableResponseOrBuilder unitsCount(Integer unitsCount) {
    this.unitsCount = unitsCount;
    return this;
  }

   /**
   * Get unitsCount
   * @return unitsCount
  **/
  @Schema(description = "")
  public Integer getUnitsCount() {
    return unitsCount;
  }

  public void setUnitsCount(Integer unitsCount) {
    this.unitsCount = unitsCount;
  }

  public TaskExecutableResponseOrBuilder taskIdBytes(ByteString taskIdBytes) {
    this.taskIdBytes = taskIdBytes;
    return this;
  }

   /**
   * Get taskIdBytes
   * @return taskIdBytes
  **/
  @Schema(description = "")
  public ByteString getTaskIdBytes() {
    return taskIdBytes;
  }

  public void setTaskIdBytes(ByteString taskIdBytes) {
    this.taskIdBytes = taskIdBytes;
  }

  public TaskExecutableResponseOrBuilder taskNameBytes(ByteString taskNameBytes) {
    this.taskNameBytes = taskNameBytes;
    return this;
  }

   /**
   * Get taskNameBytes
   * @return taskNameBytes
  **/
  @Schema(description = "")
  public ByteString getTaskNameBytes() {
    return taskNameBytes;
  }

  public void setTaskNameBytes(ByteString taskNameBytes) {
    this.taskNameBytes = taskNameBytes;
  }

  public TaskExecutableResponseOrBuilder allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public TaskExecutableResponseOrBuilder putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public TaskExecutableResponseOrBuilder initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public TaskExecutableResponseOrBuilder descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public TaskExecutableResponseOrBuilder defaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public Message getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public TaskExecutableResponseOrBuilder unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public TaskExecutableResponseOrBuilder initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskExecutableResponseOrBuilder taskExecutableResponseOrBuilder = (TaskExecutableResponseOrBuilder) o;
    return Objects.equals(this.taskId, taskExecutableResponseOrBuilder.taskId) &&
        Objects.equals(this.taskName, taskExecutableResponseOrBuilder.taskName) &&
        Objects.equals(this.taskCategoryValue, taskExecutableResponseOrBuilder.taskCategoryValue) &&
        Objects.equals(this.taskCategory, taskExecutableResponseOrBuilder.taskCategory) &&
        Objects.equals(this.logKeysList, taskExecutableResponseOrBuilder.logKeysList) &&
        Objects.equals(this.logKeysCount, taskExecutableResponseOrBuilder.logKeysCount) &&
        Objects.equals(this.unitsList, taskExecutableResponseOrBuilder.unitsList) &&
        Objects.equals(this.unitsCount, taskExecutableResponseOrBuilder.unitsCount) &&
        Objects.equals(this.taskIdBytes, taskExecutableResponseOrBuilder.taskIdBytes) &&
        Objects.equals(this.taskNameBytes, taskExecutableResponseOrBuilder.taskNameBytes) &&
        Objects.equals(this.allFields, taskExecutableResponseOrBuilder.allFields) &&
        Objects.equals(this.initializationErrorString, taskExecutableResponseOrBuilder.initializationErrorString) &&
        Objects.equals(this.descriptorForType, taskExecutableResponseOrBuilder.descriptorForType) &&
        Objects.equals(this.defaultInstanceForType, taskExecutableResponseOrBuilder.defaultInstanceForType) &&
        Objects.equals(this.unknownFields, taskExecutableResponseOrBuilder.unknownFields) &&
        Objects.equals(this.initialized, taskExecutableResponseOrBuilder.initialized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskId, taskName, taskCategoryValue, taskCategory, logKeysList, logKeysCount, unitsList, unitsCount, taskIdBytes, taskNameBytes, allFields, initializationErrorString, descriptorForType, defaultInstanceForType, unknownFields, initialized);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskExecutableResponseOrBuilder {\n");
    
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    taskCategoryValue: ").append(toIndentedString(taskCategoryValue)).append("\n");
    sb.append("    taskCategory: ").append(toIndentedString(taskCategory)).append("\n");
    sb.append("    logKeysList: ").append(toIndentedString(logKeysList)).append("\n");
    sb.append("    logKeysCount: ").append(toIndentedString(logKeysCount)).append("\n");
    sb.append("    unitsList: ").append(toIndentedString(unitsList)).append("\n");
    sb.append("    unitsCount: ").append(toIndentedString(unitsCount)).append("\n");
    sb.append("    taskIdBytes: ").append(toIndentedString(taskIdBytes)).append("\n");
    sb.append("    taskNameBytes: ").append(toIndentedString(taskNameBytes)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
