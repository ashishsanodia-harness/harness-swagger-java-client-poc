/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExecutionMetadata;
import io.swagger.client.model.GovernanceMetadata;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
/**
 * PlanExecution
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class PlanExecution {
  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("planId")
  private String planId = null;

  @SerializedName("setupAbstractions")
  private Map<String, String> setupAbstractions = null;

  @SerializedName("validUntil")
  private OffsetDateTime validUntil = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NO_OP("NO_OP"),
    RUNNING("RUNNING"),
    INTERVENTION_WAITING("INTERVENTION_WAITING"),
    TIMED_WAITING("TIMED_WAITING"),
    ASYNC_WAITING("ASYNC_WAITING"),
    TASK_WAITING("TASK_WAITING"),
    DISCONTINUING("DISCONTINUING"),
    PAUSING("PAUSING"),
    QUEUED("QUEUED"),
    SKIPPED("SKIPPED"),
    PAUSED("PAUSED"),
    ABORTED("ABORTED"),
    ERRORED("ERRORED"),
    FAILED("FAILED"),
    EXPIRED("EXPIRED"),
    SUSPENDED("SUSPENDED"),
    SUCCEEDED("SUCCEEDED"),
    IGNORE_FAILED("IGNORE_FAILED"),
    APPROVAL_WAITING("APPROVAL_WAITING"),
    RESOURCE_WAITING("RESOURCE_WAITING"),
    APPROVAL_REJECTED("APPROVAL_REJECTED"),
    UNRECOGNIZED("UNRECOGNIZED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("startTs")
  private Long startTs = null;

  @SerializedName("endTs")
  private Long endTs = null;

  @SerializedName("metadata")
  private ExecutionMetadata metadata = null;

  @SerializedName("governanceMetadata")
  private GovernanceMetadata governanceMetadata = null;

  @SerializedName("lastUpdatedAt")
  private Long lastUpdatedAt = null;

  @SerializedName("version")
  private Long version = null;

  @SerializedName("nextIteration")
  private Long nextIteration = null;

  /**
   * Gets or Sets nodeType
   */
  @JsonAdapter(NodeTypeEnum.Adapter.class)
  public enum NodeTypeEnum {
    PLAN("PLAN"),
    PLAN_NODE("PLAN_NODE"),
    IDENTITY_PLAN_NODE("IDENTITY_PLAN_NODE");

    private String value;

    NodeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NodeTypeEnum fromValue(String input) {
      for (NodeTypeEnum b : NodeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NodeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("nodeType")
  private NodeTypeEnum nodeType = null;

  @SerializedName("nodeId")
  private String nodeId = null;

  public PlanExecution uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public PlanExecution createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public PlanExecution planId(String planId) {
    this.planId = planId;
    return this;
  }

   /**
   * Get planId
   * @return planId
  **/
  @Schema(description = "")
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }

  public PlanExecution setupAbstractions(Map<String, String> setupAbstractions) {
    this.setupAbstractions = setupAbstractions;
    return this;
  }

  public PlanExecution putSetupAbstractionsItem(String key, String setupAbstractionsItem) {
    if (this.setupAbstractions == null) {
      this.setupAbstractions = new HashMap<String, String>();
    }
    this.setupAbstractions.put(key, setupAbstractionsItem);
    return this;
  }

   /**
   * Get setupAbstractions
   * @return setupAbstractions
  **/
  @Schema(description = "")
  public Map<String, String> getSetupAbstractions() {
    return setupAbstractions;
  }

  public void setSetupAbstractions(Map<String, String> setupAbstractions) {
    this.setupAbstractions = setupAbstractions;
  }

  public PlanExecution validUntil(OffsetDateTime validUntil) {
    this.validUntil = validUntil;
    return this;
  }

   /**
   * Get validUntil
   * @return validUntil
  **/
  @Schema(description = "")
  public OffsetDateTime getValidUntil() {
    return validUntil;
  }

  public void setValidUntil(OffsetDateTime validUntil) {
    this.validUntil = validUntil;
  }

  public PlanExecution status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public PlanExecution startTs(Long startTs) {
    this.startTs = startTs;
    return this;
  }

   /**
   * Get startTs
   * @return startTs
  **/
  @Schema(description = "")
  public Long getStartTs() {
    return startTs;
  }

  public void setStartTs(Long startTs) {
    this.startTs = startTs;
  }

  public PlanExecution endTs(Long endTs) {
    this.endTs = endTs;
    return this;
  }

   /**
   * Get endTs
   * @return endTs
  **/
  @Schema(description = "")
  public Long getEndTs() {
    return endTs;
  }

  public void setEndTs(Long endTs) {
    this.endTs = endTs;
  }

  public PlanExecution metadata(ExecutionMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @Schema(description = "")
  public ExecutionMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ExecutionMetadata metadata) {
    this.metadata = metadata;
  }

  public PlanExecution governanceMetadata(GovernanceMetadata governanceMetadata) {
    this.governanceMetadata = governanceMetadata;
    return this;
  }

   /**
   * Get governanceMetadata
   * @return governanceMetadata
  **/
  @Schema(description = "")
  public GovernanceMetadata getGovernanceMetadata() {
    return governanceMetadata;
  }

  public void setGovernanceMetadata(GovernanceMetadata governanceMetadata) {
    this.governanceMetadata = governanceMetadata;
  }

  public PlanExecution lastUpdatedAt(Long lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

   /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
  **/
  @Schema(description = "")
  public Long getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(Long lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }

  public PlanExecution version(Long version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }

  public PlanExecution nextIteration(Long nextIteration) {
    this.nextIteration = nextIteration;
    return this;
  }

   /**
   * Get nextIteration
   * @return nextIteration
  **/
  @Schema(description = "")
  public Long getNextIteration() {
    return nextIteration;
  }

  public void setNextIteration(Long nextIteration) {
    this.nextIteration = nextIteration;
  }

  public PlanExecution nodeType(NodeTypeEnum nodeType) {
    this.nodeType = nodeType;
    return this;
  }

   /**
   * Get nodeType
   * @return nodeType
  **/
  @Schema(description = "")
  public NodeTypeEnum getNodeType() {
    return nodeType;
  }

  public void setNodeType(NodeTypeEnum nodeType) {
    this.nodeType = nodeType;
  }

  public PlanExecution nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @Schema(description = "")
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanExecution planExecution = (PlanExecution) o;
    return Objects.equals(this.uuid, planExecution.uuid) &&
        Objects.equals(this.createdAt, planExecution.createdAt) &&
        Objects.equals(this.planId, planExecution.planId) &&
        Objects.equals(this.setupAbstractions, planExecution.setupAbstractions) &&
        Objects.equals(this.validUntil, planExecution.validUntil) &&
        Objects.equals(this.status, planExecution.status) &&
        Objects.equals(this.startTs, planExecution.startTs) &&
        Objects.equals(this.endTs, planExecution.endTs) &&
        Objects.equals(this.metadata, planExecution.metadata) &&
        Objects.equals(this.governanceMetadata, planExecution.governanceMetadata) &&
        Objects.equals(this.lastUpdatedAt, planExecution.lastUpdatedAt) &&
        Objects.equals(this.version, planExecution.version) &&
        Objects.equals(this.nextIteration, planExecution.nextIteration) &&
        Objects.equals(this.nodeType, planExecution.nodeType) &&
        Objects.equals(this.nodeId, planExecution.nodeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, createdAt, planId, setupAbstractions, validUntil, status, startTs, endTs, metadata, governanceMetadata, lastUpdatedAt, version, nextIteration, nodeType, nodeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanExecution {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    setupAbstractions: ").append(toIndentedString(setupAbstractions)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startTs: ").append(toIndentedString(startTs)).append("\n");
    sb.append("    endTs: ").append(toIndentedString(endTs)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    governanceMetadata: ").append(toIndentedString(governanceMetadata)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    nextIteration: ").append(toIndentedString(nextIteration)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
