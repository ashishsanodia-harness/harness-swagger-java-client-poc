/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.GatewayAccountRequest;
import io.swagger.client.model.UtmInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * UserInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class UserInfo {
  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("token")
  private String token = null;

  @SerializedName("defaultAccountId")
  private String defaultAccountId = null;

  @SerializedName("intent")
  private String intent = null;

  @SerializedName("accounts")
  private List<GatewayAccountRequest> accounts = null;

  @SerializedName("admin")
  private Boolean admin = null;

  @SerializedName("twoFactorAuthenticationEnabled")
  private Boolean twoFactorAuthenticationEnabled = null;

  @SerializedName("emailVerified")
  private Boolean emailVerified = null;

  @SerializedName("locked")
  private Boolean locked = null;

  @SerializedName("disabled")
  private Boolean disabled = null;

  @SerializedName("signupAction")
  private String signupAction = null;

  @SerializedName("edition")
  private String edition = null;

  @SerializedName("billingFrequency")
  private String billingFrequency = null;

  @SerializedName("utmInfo")
  private UtmInfo utmInfo = null;

  @SerializedName("externallyManaged")
  private Boolean externallyManaged = null;

  public UserInfo uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public UserInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UserInfo email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UserInfo token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @Schema(description = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public UserInfo defaultAccountId(String defaultAccountId) {
    this.defaultAccountId = defaultAccountId;
    return this;
  }

   /**
   * Get defaultAccountId
   * @return defaultAccountId
  **/
  @Schema(description = "")
  public String getDefaultAccountId() {
    return defaultAccountId;
  }

  public void setDefaultAccountId(String defaultAccountId) {
    this.defaultAccountId = defaultAccountId;
  }

  public UserInfo intent(String intent) {
    this.intent = intent;
    return this;
  }

   /**
   * Get intent
   * @return intent
  **/
  @Schema(description = "")
  public String getIntent() {
    return intent;
  }

  public void setIntent(String intent) {
    this.intent = intent;
  }

  public UserInfo accounts(List<GatewayAccountRequest> accounts) {
    this.accounts = accounts;
    return this;
  }

  public UserInfo addAccountsItem(GatewayAccountRequest accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<GatewayAccountRequest>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

   /**
   * Get accounts
   * @return accounts
  **/
  @Schema(description = "")
  public List<GatewayAccountRequest> getAccounts() {
    return accounts;
  }

  public void setAccounts(List<GatewayAccountRequest> accounts) {
    this.accounts = accounts;
  }

  public UserInfo admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

   /**
   * Get admin
   * @return admin
  **/
  @Schema(description = "")
  public Boolean isAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }

  public UserInfo twoFactorAuthenticationEnabled(Boolean twoFactorAuthenticationEnabled) {
    this.twoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
    return this;
  }

   /**
   * Get twoFactorAuthenticationEnabled
   * @return twoFactorAuthenticationEnabled
  **/
  @Schema(description = "")
  public Boolean isTwoFactorAuthenticationEnabled() {
    return twoFactorAuthenticationEnabled;
  }

  public void setTwoFactorAuthenticationEnabled(Boolean twoFactorAuthenticationEnabled) {
    this.twoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
  }

  public UserInfo emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

   /**
   * Get emailVerified
   * @return emailVerified
  **/
  @Schema(description = "")
  public Boolean isEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }

  public UserInfo locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @Schema(description = "")
  public Boolean isLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }

  public UserInfo disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * Get disabled
   * @return disabled
  **/
  @Schema(description = "")
  public Boolean isDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public UserInfo signupAction(String signupAction) {
    this.signupAction = signupAction;
    return this;
  }

   /**
   * Get signupAction
   * @return signupAction
  **/
  @Schema(description = "")
  public String getSignupAction() {
    return signupAction;
  }

  public void setSignupAction(String signupAction) {
    this.signupAction = signupAction;
  }

  public UserInfo edition(String edition) {
    this.edition = edition;
    return this;
  }

   /**
   * Get edition
   * @return edition
  **/
  @Schema(description = "")
  public String getEdition() {
    return edition;
  }

  public void setEdition(String edition) {
    this.edition = edition;
  }

  public UserInfo billingFrequency(String billingFrequency) {
    this.billingFrequency = billingFrequency;
    return this;
  }

   /**
   * Get billingFrequency
   * @return billingFrequency
  **/
  @Schema(description = "")
  public String getBillingFrequency() {
    return billingFrequency;
  }

  public void setBillingFrequency(String billingFrequency) {
    this.billingFrequency = billingFrequency;
  }

  public UserInfo utmInfo(UtmInfo utmInfo) {
    this.utmInfo = utmInfo;
    return this;
  }

   /**
   * Get utmInfo
   * @return utmInfo
  **/
  @Schema(description = "")
  public UtmInfo getUtmInfo() {
    return utmInfo;
  }

  public void setUtmInfo(UtmInfo utmInfo) {
    this.utmInfo = utmInfo;
  }

  public UserInfo externallyManaged(Boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
    return this;
  }

   /**
   * Get externallyManaged
   * @return externallyManaged
  **/
  @Schema(description = "")
  public Boolean isExternallyManaged() {
    return externallyManaged;
  }

  public void setExternallyManaged(Boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserInfo userInfo = (UserInfo) o;
    return Objects.equals(this.uuid, userInfo.uuid) &&
        Objects.equals(this.name, userInfo.name) &&
        Objects.equals(this.email, userInfo.email) &&
        Objects.equals(this.token, userInfo.token) &&
        Objects.equals(this.defaultAccountId, userInfo.defaultAccountId) &&
        Objects.equals(this.intent, userInfo.intent) &&
        Objects.equals(this.accounts, userInfo.accounts) &&
        Objects.equals(this.admin, userInfo.admin) &&
        Objects.equals(this.twoFactorAuthenticationEnabled, userInfo.twoFactorAuthenticationEnabled) &&
        Objects.equals(this.emailVerified, userInfo.emailVerified) &&
        Objects.equals(this.locked, userInfo.locked) &&
        Objects.equals(this.disabled, userInfo.disabled) &&
        Objects.equals(this.signupAction, userInfo.signupAction) &&
        Objects.equals(this.edition, userInfo.edition) &&
        Objects.equals(this.billingFrequency, userInfo.billingFrequency) &&
        Objects.equals(this.utmInfo, userInfo.utmInfo) &&
        Objects.equals(this.externallyManaged, userInfo.externallyManaged);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, name, email, token, defaultAccountId, intent, accounts, admin, twoFactorAuthenticationEnabled, emailVerified, locked, disabled, signupAction, edition, billingFrequency, utmInfo, externallyManaged);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserInfo {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    defaultAccountId: ").append(toIndentedString(defaultAccountId)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    twoFactorAuthenticationEnabled: ").append(toIndentedString(twoFactorAuthenticationEnabled)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    signupAction: ").append(toIndentedString(signupAction)).append("\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    billingFrequency: ").append(toIndentedString(billingFrequency)).append("\n");
    sb.append("    utmInfo: ").append(toIndentedString(utmInfo)).append("\n");
    sb.append("    externallyManaged: ").append(toIndentedString(externallyManaged)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
