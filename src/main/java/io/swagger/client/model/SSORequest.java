/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * SSORequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class SSORequest {
  /**
   * Gets or Sets oauthProviderType
   */
  @JsonAdapter(OauthProviderTypeEnum.Adapter.class)
  public enum OauthProviderTypeEnum {
    AZURE("AZURE"),
    BITBUCKET("BITBUCKET"),
    GITHUB("GITHUB"),
    GITLAB("GITLAB"),
    GOOGLE("GOOGLE"),
    LINKEDIN("LINKEDIN");

    private String value;

    OauthProviderTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OauthProviderTypeEnum fromValue(String input) {
      for (OauthProviderTypeEnum b : OauthProviderTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OauthProviderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OauthProviderTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OauthProviderTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OauthProviderTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("oauthProviderType")
  private OauthProviderTypeEnum oauthProviderType = null;

  @SerializedName("idpRedirectUrl")
  private String idpRedirectUrl = null;

  /**
   * Gets or Sets oauthProviderTypes
   */
  @JsonAdapter(OauthProviderTypesEnum.Adapter.class)
  public enum OauthProviderTypesEnum {
    AZURE("AZURE"),
    BITBUCKET("BITBUCKET"),
    GITHUB("GITHUB"),
    GITLAB("GITLAB"),
    GOOGLE("GOOGLE"),
    LINKEDIN("LINKEDIN");

    private String value;

    OauthProviderTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OauthProviderTypesEnum fromValue(String input) {
      for (OauthProviderTypesEnum b : OauthProviderTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OauthProviderTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OauthProviderTypesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OauthProviderTypesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OauthProviderTypesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("oauthProviderTypes")
  private List<OauthProviderTypesEnum> oauthProviderTypes = null;

  public SSORequest oauthProviderType(OauthProviderTypeEnum oauthProviderType) {
    this.oauthProviderType = oauthProviderType;
    return this;
  }

   /**
   * Get oauthProviderType
   * @return oauthProviderType
  **/
  @Schema(description = "")
  public OauthProviderTypeEnum getOauthProviderType() {
    return oauthProviderType;
  }

  public void setOauthProviderType(OauthProviderTypeEnum oauthProviderType) {
    this.oauthProviderType = oauthProviderType;
  }

  public SSORequest idpRedirectUrl(String idpRedirectUrl) {
    this.idpRedirectUrl = idpRedirectUrl;
    return this;
  }

   /**
   * Get idpRedirectUrl
   * @return idpRedirectUrl
  **/
  @Schema(description = "")
  public String getIdpRedirectUrl() {
    return idpRedirectUrl;
  }

  public void setIdpRedirectUrl(String idpRedirectUrl) {
    this.idpRedirectUrl = idpRedirectUrl;
  }

  public SSORequest oauthProviderTypes(List<OauthProviderTypesEnum> oauthProviderTypes) {
    this.oauthProviderTypes = oauthProviderTypes;
    return this;
  }

  public SSORequest addOauthProviderTypesItem(OauthProviderTypesEnum oauthProviderTypesItem) {
    if (this.oauthProviderTypes == null) {
      this.oauthProviderTypes = new ArrayList<OauthProviderTypesEnum>();
    }
    this.oauthProviderTypes.add(oauthProviderTypesItem);
    return this;
  }

   /**
   * Get oauthProviderTypes
   * @return oauthProviderTypes
  **/
  @Schema(description = "")
  public List<OauthProviderTypesEnum> getOauthProviderTypes() {
    return oauthProviderTypes;
  }

  public void setOauthProviderTypes(List<OauthProviderTypesEnum> oauthProviderTypes) {
    this.oauthProviderTypes = oauthProviderTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSORequest ssORequest = (SSORequest) o;
    return Objects.equals(this.oauthProviderType, ssORequest.oauthProviderType) &&
        Objects.equals(this.idpRedirectUrl, ssORequest.idpRedirectUrl) &&
        Objects.equals(this.oauthProviderTypes, ssORequest.oauthProviderTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oauthProviderType, idpRedirectUrl, oauthProviderTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSORequest {\n");
    
    sb.append("    oauthProviderType: ").append(toIndentedString(oauthProviderType)).append("\n");
    sb.append("    idpRedirectUrl: ").append(toIndentedString(idpRedirectUrl)).append("\n");
    sb.append("    oauthProviderTypes: ").append(toIndentedString(oauthProviderTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
