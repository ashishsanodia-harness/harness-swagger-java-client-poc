/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PMSPipelineSummaryResponse;
import io.swagger.client.model.Pageable;
import io.swagger.client.model.Sort;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PagePMSPipelineSummaryResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class PagePMSPipelineSummaryResponse {
  @SerializedName("totalPages")
  private Integer totalPages = null;

  @SerializedName("totalElements")
  private Long totalElements = null;

  @SerializedName("sort")
  private Sort sort = null;

  @SerializedName("first")
  private Boolean first = null;

  @SerializedName("last")
  private Boolean last = null;

  @SerializedName("numberOfElements")
  private Integer numberOfElements = null;

  @SerializedName("pageable")
  private Pageable pageable = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("content")
  private List<PMSPipelineSummaryResponse> content = null;

  @SerializedName("number")
  private Integer number = null;

  @SerializedName("empty")
  private Boolean empty = null;

  public PagePMSPipelineSummaryResponse totalPages(Integer totalPages) {
    this.totalPages = totalPages;
    return this;
  }

   /**
   * Get totalPages
   * @return totalPages
  **/
  @Schema(description = "")
  public Integer getTotalPages() {
    return totalPages;
  }

  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }

  public PagePMSPipelineSummaryResponse totalElements(Long totalElements) {
    this.totalElements = totalElements;
    return this;
  }

   /**
   * Get totalElements
   * @return totalElements
  **/
  @Schema(description = "")
  public Long getTotalElements() {
    return totalElements;
  }

  public void setTotalElements(Long totalElements) {
    this.totalElements = totalElements;
  }

  public PagePMSPipelineSummaryResponse sort(Sort sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @Schema(description = "")
  public Sort getSort() {
    return sort;
  }

  public void setSort(Sort sort) {
    this.sort = sort;
  }

  public PagePMSPipelineSummaryResponse first(Boolean first) {
    this.first = first;
    return this;
  }

   /**
   * Get first
   * @return first
  **/
  @Schema(description = "")
  public Boolean isFirst() {
    return first;
  }

  public void setFirst(Boolean first) {
    this.first = first;
  }

  public PagePMSPipelineSummaryResponse last(Boolean last) {
    this.last = last;
    return this;
  }

   /**
   * Get last
   * @return last
  **/
  @Schema(description = "")
  public Boolean isLast() {
    return last;
  }

  public void setLast(Boolean last) {
    this.last = last;
  }

  public PagePMSPipelineSummaryResponse numberOfElements(Integer numberOfElements) {
    this.numberOfElements = numberOfElements;
    return this;
  }

   /**
   * Get numberOfElements
   * @return numberOfElements
  **/
  @Schema(description = "")
  public Integer getNumberOfElements() {
    return numberOfElements;
  }

  public void setNumberOfElements(Integer numberOfElements) {
    this.numberOfElements = numberOfElements;
  }

  public PagePMSPipelineSummaryResponse pageable(Pageable pageable) {
    this.pageable = pageable;
    return this;
  }

   /**
   * Get pageable
   * @return pageable
  **/
  @Schema(description = "")
  public Pageable getPageable() {
    return pageable;
  }

  public void setPageable(Pageable pageable) {
    this.pageable = pageable;
  }

  public PagePMSPipelineSummaryResponse size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public PagePMSPipelineSummaryResponse content(List<PMSPipelineSummaryResponse> content) {
    this.content = content;
    return this;
  }

  public PagePMSPipelineSummaryResponse addContentItem(PMSPipelineSummaryResponse contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<PMSPipelineSummaryResponse>();
    }
    this.content.add(contentItem);
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @Schema(description = "")
  public List<PMSPipelineSummaryResponse> getContent() {
    return content;
  }

  public void setContent(List<PMSPipelineSummaryResponse> content) {
    this.content = content;
  }

  public PagePMSPipelineSummaryResponse number(Integer number) {
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @Schema(description = "")
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }

  public PagePMSPipelineSummaryResponse empty(Boolean empty) {
    this.empty = empty;
    return this;
  }

   /**
   * Get empty
   * @return empty
  **/
  @Schema(description = "")
  public Boolean isEmpty() {
    return empty;
  }

  public void setEmpty(Boolean empty) {
    this.empty = empty;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagePMSPipelineSummaryResponse pagePMSPipelineSummaryResponse = (PagePMSPipelineSummaryResponse) o;
    return Objects.equals(this.totalPages, pagePMSPipelineSummaryResponse.totalPages) &&
        Objects.equals(this.totalElements, pagePMSPipelineSummaryResponse.totalElements) &&
        Objects.equals(this.sort, pagePMSPipelineSummaryResponse.sort) &&
        Objects.equals(this.first, pagePMSPipelineSummaryResponse.first) &&
        Objects.equals(this.last, pagePMSPipelineSummaryResponse.last) &&
        Objects.equals(this.numberOfElements, pagePMSPipelineSummaryResponse.numberOfElements) &&
        Objects.equals(this.pageable, pagePMSPipelineSummaryResponse.pageable) &&
        Objects.equals(this.size, pagePMSPipelineSummaryResponse.size) &&
        Objects.equals(this.content, pagePMSPipelineSummaryResponse.content) &&
        Objects.equals(this.number, pagePMSPipelineSummaryResponse.number) &&
        Objects.equals(this.empty, pagePMSPipelineSummaryResponse.empty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalPages, totalElements, sort, first, last, numberOfElements, pageable, size, content, number, empty);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagePMSPipelineSummaryResponse {\n");
    
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    numberOfElements: ").append(toIndentedString(numberOfElements)).append("\n");
    sb.append("    pageable: ").append(toIndentedString(pageable)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
