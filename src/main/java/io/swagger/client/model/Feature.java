/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FeatureEnvProperties;
import io.swagger.client.model.FeatureStatus;
import io.swagger.client.model.Prerequisite;
import io.swagger.client.model.Results;
import io.swagger.client.model.Tag;
import io.swagger.client.model.Variation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A Feature Flag response
 */
@Schema(description = "A Feature Flag response")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class Feature {
  @SerializedName("archived")
  private Boolean archived = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("defaultOffVariation")
  private String defaultOffVariation = null;

  @SerializedName("defaultOnVariation")
  private String defaultOnVariation = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("envProperties")
  private FeatureEnvProperties envProperties = null;

  @SerializedName("evaluation")
  private String evaluation = null;

  @SerializedName("evaluationIdentifier")
  private String evaluationIdentifier = null;

  @SerializedName("identifier")
  private String identifier = null;

  /**
   * The type of Feature flag
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    BOOLEAN("boolean"),
    INT("int"),
    STRING("string"),
    JSON("json");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static KindEnum fromValue(String input) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return KindEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("kind")
  private KindEnum kind = null;

  @SerializedName("modifiedAt")
  private Long modifiedAt = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("owner")
  private List<String> owner = null;

  @SerializedName("permanent")
  private Boolean permanent = null;

  @SerializedName("prerequisites")
  private List<Prerequisite> prerequisites = null;

  @SerializedName("project")
  private String project = null;

  @SerializedName("results")
  private List<Results> results = null;

  @SerializedName("status")
  private FeatureStatus status = null;

  @SerializedName("tags")
  private List<Tag> tags = null;

  @SerializedName("variations")
  private List<Variation> variations = new ArrayList<Variation>();

  public Feature archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

   /**
   * Indicates if the flag has been archived and is no longer used
   * @return archived
  **/
  @Schema(example = "false", required = true, description = "Indicates if the flag has been archived and is no longer used")
  public Boolean isArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }

  public Feature createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date the flag was created in milliseconds
   * @return createdAt
  **/
  @Schema(required = true, description = "The date the flag was created in milliseconds")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public Feature defaultOffVariation(String defaultOffVariation) {
    this.defaultOffVariation = defaultOffVariation;
    return this;
  }

   /**
   * The default value returned when a flag is off
   * @return defaultOffVariation
  **/
  @Schema(example = "true", required = true, description = "The default value returned when a flag is off")
  public String getDefaultOffVariation() {
    return defaultOffVariation;
  }

  public void setDefaultOffVariation(String defaultOffVariation) {
    this.defaultOffVariation = defaultOffVariation;
  }

  public Feature defaultOnVariation(String defaultOnVariation) {
    this.defaultOnVariation = defaultOnVariation;
    return this;
  }

   /**
   * The default value returned when a flag is on
   * @return defaultOnVariation
  **/
  @Schema(example = "true", required = true, description = "The default value returned when a flag is on")
  public String getDefaultOnVariation() {
    return defaultOnVariation;
  }

  public void setDefaultOnVariation(String defaultOnVariation) {
    this.defaultOnVariation = defaultOnVariation;
  }

  public Feature description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description for this flag
   * @return description
  **/
  @Schema(example = "A flag to control a new feature in production", description = "A description for this flag")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Feature envProperties(FeatureEnvProperties envProperties) {
    this.envProperties = envProperties;
    return this;
  }

   /**
   * Get envProperties
   * @return envProperties
  **/
  @Schema(description = "")
  public FeatureEnvProperties getEnvProperties() {
    return envProperties;
  }

  public void setEnvProperties(FeatureEnvProperties envProperties) {
    this.envProperties = envProperties;
  }

  public Feature evaluation(String evaluation) {
    this.evaluation = evaluation;
    return this;
  }

   /**
   * The value that the flag will return for the current user
   * @return evaluation
  **/
  @Schema(example = "true", description = "The value that the flag will return for the current user")
  public String getEvaluation() {
    return evaluation;
  }

  public void setEvaluation(String evaluation) {
    this.evaluation = evaluation;
  }

  public Feature evaluationIdentifier(String evaluationIdentifier) {
    this.evaluationIdentifier = evaluationIdentifier;
    return this;
  }

   /**
   * The identifier for the returned evaluation
   * @return evaluationIdentifier
  **/
  @Schema(example = "on-variation", description = "The identifier for the returned evaluation")
  public String getEvaluationIdentifier() {
    return evaluationIdentifier;
  }

  public void setEvaluationIdentifier(String evaluationIdentifier) {
    this.evaluationIdentifier = evaluationIdentifier;
  }

  public Feature identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The Feature Flag identifier
   * @return identifier
  **/
  @Schema(example = "bool-flag", required = true, description = "The Feature Flag identifier")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public Feature kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

   /**
   * The type of Feature flag
   * @return kind
  **/
  @Schema(example = "boolean", required = true, description = "The type of Feature flag")
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }

  public Feature modifiedAt(Long modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * The date the flag was last modified in milliseconds
   * @return modifiedAt
  **/
  @Schema(required = true, description = "The date the flag was last modified in milliseconds")
  public Long getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(Long modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public Feature name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the Feature Flag
   * @return name
  **/
  @Schema(example = "My Boolean Flag", required = true, description = "The name of the Feature Flag")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Feature owner(List<String> owner) {
    this.owner = owner;
    return this;
  }

  public Feature addOwnerItem(String ownerItem) {
    if (this.owner == null) {
      this.owner = new ArrayList<String>();
    }
    this.owner.add(ownerItem);
    return this;
  }

   /**
   * The user who created the flag
   * @return owner
  **/
  @Schema(example = "johndoe", description = "The user who created the flag")
  public List<String> getOwner() {
    return owner;
  }

  public void setOwner(List<String> owner) {
    this.owner = owner;
  }

  public Feature permanent(Boolean permanent) {
    this.permanent = permanent;
    return this;
  }

   /**
   * Indicates if this is a permanent flag, or one that should expire
   * @return permanent
  **/
  @Schema(example = "true", required = true, description = "Indicates if this is a permanent flag, or one that should expire")
  public Boolean isPermanent() {
    return permanent;
  }

  public void setPermanent(Boolean permanent) {
    this.permanent = permanent;
  }

  public Feature prerequisites(List<Prerequisite> prerequisites) {
    this.prerequisites = prerequisites;
    return this;
  }

  public Feature addPrerequisitesItem(Prerequisite prerequisitesItem) {
    if (this.prerequisites == null) {
      this.prerequisites = new ArrayList<Prerequisite>();
    }
    this.prerequisites.add(prerequisitesItem);
    return this;
  }

   /**
   * Get prerequisites
   * @return prerequisites
  **/
  @Schema(description = "")
  public List<Prerequisite> getPrerequisites() {
    return prerequisites;
  }

  public void setPrerequisites(List<Prerequisite> prerequisites) {
    this.prerequisites = prerequisites;
  }

  public Feature project(String project) {
    this.project = project;
    return this;
  }

   /**
   * The project this Feature belongs to
   * @return project
  **/
  @Schema(example = "test-project", required = true, description = "The project this Feature belongs to")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public Feature results(List<Results> results) {
    this.results = results;
    return this;
  }

  public Feature addResultsItem(Results resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<Results>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * The results shows which variations have been evaluated, and how many times each of these have been evaluated.
   * @return results
  **/
  @Schema(description = "The results shows which variations have been evaluated, and how many times each of these have been evaluated.")
  public List<Results> getResults() {
    return results;
  }

  public void setResults(List<Results> results) {
    this.results = results;
  }

  public Feature status(FeatureStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public FeatureStatus getStatus() {
    return status;
  }

  public void setStatus(FeatureStatus status) {
    this.status = status;
  }

  public Feature tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Feature addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * A list of tags for this Feature Flag
   * @return tags
  **/
  @Schema(description = "A list of tags for this Feature Flag")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  public Feature variations(List<Variation> variations) {
    this.variations = variations;
    return this;
  }

  public Feature addVariationsItem(Variation variationsItem) {
    this.variations.add(variationsItem);
    return this;
  }

   /**
   * The variations that can be returned for this flag
   * @return variations
  **/
  @Schema(required = true, description = "The variations that can be returned for this flag")
  public List<Variation> getVariations() {
    return variations;
  }

  public void setVariations(List<Variation> variations) {
    this.variations = variations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feature feature = (Feature) o;
    return Objects.equals(this.archived, feature.archived) &&
        Objects.equals(this.createdAt, feature.createdAt) &&
        Objects.equals(this.defaultOffVariation, feature.defaultOffVariation) &&
        Objects.equals(this.defaultOnVariation, feature.defaultOnVariation) &&
        Objects.equals(this.description, feature.description) &&
        Objects.equals(this.envProperties, feature.envProperties) &&
        Objects.equals(this.evaluation, feature.evaluation) &&
        Objects.equals(this.evaluationIdentifier, feature.evaluationIdentifier) &&
        Objects.equals(this.identifier, feature.identifier) &&
        Objects.equals(this.kind, feature.kind) &&
        Objects.equals(this.modifiedAt, feature.modifiedAt) &&
        Objects.equals(this.name, feature.name) &&
        Objects.equals(this.owner, feature.owner) &&
        Objects.equals(this.permanent, feature.permanent) &&
        Objects.equals(this.prerequisites, feature.prerequisites) &&
        Objects.equals(this.project, feature.project) &&
        Objects.equals(this.results, feature.results) &&
        Objects.equals(this.status, feature.status) &&
        Objects.equals(this.tags, feature.tags) &&
        Objects.equals(this.variations, feature.variations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, createdAt, defaultOffVariation, defaultOnVariation, description, envProperties, evaluation, evaluationIdentifier, identifier, kind, modifiedAt, name, owner, permanent, prerequisites, project, results, status, tags, variations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feature {\n");
    
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultOffVariation: ").append(toIndentedString(defaultOffVariation)).append("\n");
    sb.append("    defaultOnVariation: ").append(toIndentedString(defaultOnVariation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    envProperties: ").append(toIndentedString(envProperties)).append("\n");
    sb.append("    evaluation: ").append(toIndentedString(evaluation)).append("\n");
    sb.append("    evaluationIdentifier: ").append(toIndentedString(evaluationIdentifier)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permanent: ").append(toIndentedString(permanent)).append("\n");
    sb.append("    prerequisites: ").append(toIndentedString(prerequisites)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
