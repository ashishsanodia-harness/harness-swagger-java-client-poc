/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConnectorActivityDetails;
import io.swagger.client.model.ConnectorConnectivityDetails;
import io.swagger.client.model.ConnectorInfo;
import io.swagger.client.model.EntityGitDetails;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This has the Connector details along with its metadata.
 */
@Schema(description = "This has the Connector details along with its metadata.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class ConnectorResponse {
  @SerializedName("connector")
  private ConnectorInfo connector = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("lastModifiedAt")
  private Long lastModifiedAt = null;

  @SerializedName("status")
  private ConnectorConnectivityDetails status = null;

  @SerializedName("activityDetails")
  private ConnectorActivityDetails activityDetails = null;

  @SerializedName("harnessManaged")
  private Boolean harnessManaged = null;

  @SerializedName("gitDetails")
  private EntityGitDetails gitDetails = null;

  @SerializedName("entityValidityDetails")
  private EntityGitDetails entityValidityDetails = null;

  public ConnectorResponse connector(ConnectorInfo connector) {
    this.connector = connector;
    return this;
  }

   /**
   * Get connector
   * @return connector
  **/
  @Schema(description = "")
  public ConnectorInfo getConnector() {
    return connector;
  }

  public void setConnector(ConnectorInfo connector) {
    this.connector = connector;
  }

  public ConnectorResponse createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * This is the time at which the Connector was created.
   * @return createdAt
  **/
  @Schema(description = "This is the time at which the Connector was created.")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public ConnectorResponse lastModifiedAt(Long lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

   /**
   * This is the time at which the Connector was last modified.
   * @return lastModifiedAt
  **/
  @Schema(description = "This is the time at which the Connector was last modified.")
  public Long getLastModifiedAt() {
    return lastModifiedAt;
  }

  public void setLastModifiedAt(Long lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
  }

  public ConnectorResponse status(ConnectorConnectivityDetails status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public ConnectorConnectivityDetails getStatus() {
    return status;
  }

  public void setStatus(ConnectorConnectivityDetails status) {
    this.status = status;
  }

  public ConnectorResponse activityDetails(ConnectorActivityDetails activityDetails) {
    this.activityDetails = activityDetails;
    return this;
  }

   /**
   * Get activityDetails
   * @return activityDetails
  **/
  @Schema(description = "")
  public ConnectorActivityDetails getActivityDetails() {
    return activityDetails;
  }

  public void setActivityDetails(ConnectorActivityDetails activityDetails) {
    this.activityDetails = activityDetails;
  }

  public ConnectorResponse harnessManaged(Boolean harnessManaged) {
    this.harnessManaged = harnessManaged;
    return this;
  }

   /**
   * This indicates if this Connector is managed by Harness or not. If True, Harness can manage and modify this Connector.
   * @return harnessManaged
  **/
  @Schema(description = "This indicates if this Connector is managed by Harness or not. If True, Harness can manage and modify this Connector.")
  public Boolean isHarnessManaged() {
    return harnessManaged;
  }

  public void setHarnessManaged(Boolean harnessManaged) {
    this.harnessManaged = harnessManaged;
  }

  public ConnectorResponse gitDetails(EntityGitDetails gitDetails) {
    this.gitDetails = gitDetails;
    return this;
  }

   /**
   * Get gitDetails
   * @return gitDetails
  **/
  @Schema(description = "")
  public EntityGitDetails getGitDetails() {
    return gitDetails;
  }

  public void setGitDetails(EntityGitDetails gitDetails) {
    this.gitDetails = gitDetails;
  }

  public ConnectorResponse entityValidityDetails(EntityGitDetails entityValidityDetails) {
    this.entityValidityDetails = entityValidityDetails;
    return this;
  }

   /**
   * Get entityValidityDetails
   * @return entityValidityDetails
  **/
  @Schema(description = "")
  public EntityGitDetails getEntityValidityDetails() {
    return entityValidityDetails;
  }

  public void setEntityValidityDetails(EntityGitDetails entityValidityDetails) {
    this.entityValidityDetails = entityValidityDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorResponse connectorResponse = (ConnectorResponse) o;
    return Objects.equals(this.connector, connectorResponse.connector) &&
        Objects.equals(this.createdAt, connectorResponse.createdAt) &&
        Objects.equals(this.lastModifiedAt, connectorResponse.lastModifiedAt) &&
        Objects.equals(this.status, connectorResponse.status) &&
        Objects.equals(this.activityDetails, connectorResponse.activityDetails) &&
        Objects.equals(this.harnessManaged, connectorResponse.harnessManaged) &&
        Objects.equals(this.gitDetails, connectorResponse.gitDetails) &&
        Objects.equals(this.entityValidityDetails, connectorResponse.entityValidityDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connector, createdAt, lastModifiedAt, status, activityDetails, harnessManaged, gitDetails, entityValidityDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorResponse {\n");
    
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    activityDetails: ").append(toIndentedString(activityDetails)).append("\n");
    sb.append("    harnessManaged: ").append(toIndentedString(harnessManaged)).append("\n");
    sb.append("    gitDetails: ").append(toIndentedString(gitDetails)).append("\n");
    sb.append("    entityValidityDetails: ").append(toIndentedString(entityValidityDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
