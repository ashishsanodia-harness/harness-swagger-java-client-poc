/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.ExpressionBlock;
import io.swagger.client.model.ExpressionBlockOrBuilder;
import io.swagger.client.model.NodeRunInfo;
import io.swagger.client.model.ParserNodeRunInfo;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * NodeRunInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class NodeRunInfo {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  @SerializedName("whenCondition")
  private String whenCondition = null;

  @SerializedName("whenConditionBytes")
  private ByteString whenConditionBytes = null;

  @SerializedName("expressionsList")
  private List<ExpressionBlock> expressionsList = null;

  @SerializedName("expressionsOrBuilderList")
  private List<ExpressionBlockOrBuilder> expressionsOrBuilderList = null;

  @SerializedName("expressionsCount")
  private Integer expressionsCount = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserNodeRunInfo parserForType = null;

  @SerializedName("defaultInstanceForType")
  private NodeRunInfo defaultInstanceForType = null;

  @SerializedName("evaluatedCondition")
  private Boolean evaluatedCondition = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public NodeRunInfo unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public NodeRunInfo initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public NodeRunInfo whenCondition(String whenCondition) {
    this.whenCondition = whenCondition;
    return this;
  }

   /**
   * Get whenCondition
   * @return whenCondition
  **/
  @Schema(description = "")
  public String getWhenCondition() {
    return whenCondition;
  }

  public void setWhenCondition(String whenCondition) {
    this.whenCondition = whenCondition;
  }

  public NodeRunInfo whenConditionBytes(ByteString whenConditionBytes) {
    this.whenConditionBytes = whenConditionBytes;
    return this;
  }

   /**
   * Get whenConditionBytes
   * @return whenConditionBytes
  **/
  @Schema(description = "")
  public ByteString getWhenConditionBytes() {
    return whenConditionBytes;
  }

  public void setWhenConditionBytes(ByteString whenConditionBytes) {
    this.whenConditionBytes = whenConditionBytes;
  }

  public NodeRunInfo expressionsList(List<ExpressionBlock> expressionsList) {
    this.expressionsList = expressionsList;
    return this;
  }

  public NodeRunInfo addExpressionsListItem(ExpressionBlock expressionsListItem) {
    if (this.expressionsList == null) {
      this.expressionsList = new ArrayList<ExpressionBlock>();
    }
    this.expressionsList.add(expressionsListItem);
    return this;
  }

   /**
   * Get expressionsList
   * @return expressionsList
  **/
  @Schema(description = "")
  public List<ExpressionBlock> getExpressionsList() {
    return expressionsList;
  }

  public void setExpressionsList(List<ExpressionBlock> expressionsList) {
    this.expressionsList = expressionsList;
  }

  public NodeRunInfo expressionsOrBuilderList(List<ExpressionBlockOrBuilder> expressionsOrBuilderList) {
    this.expressionsOrBuilderList = expressionsOrBuilderList;
    return this;
  }

  public NodeRunInfo addExpressionsOrBuilderListItem(ExpressionBlockOrBuilder expressionsOrBuilderListItem) {
    if (this.expressionsOrBuilderList == null) {
      this.expressionsOrBuilderList = new ArrayList<ExpressionBlockOrBuilder>();
    }
    this.expressionsOrBuilderList.add(expressionsOrBuilderListItem);
    return this;
  }

   /**
   * Get expressionsOrBuilderList
   * @return expressionsOrBuilderList
  **/
  @Schema(description = "")
  public List<ExpressionBlockOrBuilder> getExpressionsOrBuilderList() {
    return expressionsOrBuilderList;
  }

  public void setExpressionsOrBuilderList(List<ExpressionBlockOrBuilder> expressionsOrBuilderList) {
    this.expressionsOrBuilderList = expressionsOrBuilderList;
  }

  public NodeRunInfo expressionsCount(Integer expressionsCount) {
    this.expressionsCount = expressionsCount;
    return this;
  }

   /**
   * Get expressionsCount
   * @return expressionsCount
  **/
  @Schema(description = "")
  public Integer getExpressionsCount() {
    return expressionsCount;
  }

  public void setExpressionsCount(Integer expressionsCount) {
    this.expressionsCount = expressionsCount;
  }

  public NodeRunInfo serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public NodeRunInfo parserForType(ParserNodeRunInfo parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserNodeRunInfo getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserNodeRunInfo parserForType) {
    this.parserForType = parserForType;
  }

  public NodeRunInfo defaultInstanceForType(NodeRunInfo defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public NodeRunInfo getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(NodeRunInfo defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public NodeRunInfo evaluatedCondition(Boolean evaluatedCondition) {
    this.evaluatedCondition = evaluatedCondition;
    return this;
  }

   /**
   * Get evaluatedCondition
   * @return evaluatedCondition
  **/
  @Schema(description = "")
  public Boolean isEvaluatedCondition() {
    return evaluatedCondition;
  }

  public void setEvaluatedCondition(Boolean evaluatedCondition) {
    this.evaluatedCondition = evaluatedCondition;
  }

  public NodeRunInfo allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public NodeRunInfo putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public NodeRunInfo initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public NodeRunInfo descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public NodeRunInfo memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeRunInfo nodeRunInfo = (NodeRunInfo) o;
    return Objects.equals(this.unknownFields, nodeRunInfo.unknownFields) &&
        Objects.equals(this.initialized, nodeRunInfo.initialized) &&
        Objects.equals(this.whenCondition, nodeRunInfo.whenCondition) &&
        Objects.equals(this.whenConditionBytes, nodeRunInfo.whenConditionBytes) &&
        Objects.equals(this.expressionsList, nodeRunInfo.expressionsList) &&
        Objects.equals(this.expressionsOrBuilderList, nodeRunInfo.expressionsOrBuilderList) &&
        Objects.equals(this.expressionsCount, nodeRunInfo.expressionsCount) &&
        Objects.equals(this.serializedSize, nodeRunInfo.serializedSize) &&
        Objects.equals(this.parserForType, nodeRunInfo.parserForType) &&
        Objects.equals(this.defaultInstanceForType, nodeRunInfo.defaultInstanceForType) &&
        Objects.equals(this.evaluatedCondition, nodeRunInfo.evaluatedCondition) &&
        Objects.equals(this.allFields, nodeRunInfo.allFields) &&
        Objects.equals(this.initializationErrorString, nodeRunInfo.initializationErrorString) &&
        Objects.equals(this.descriptorForType, nodeRunInfo.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, nodeRunInfo.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, whenCondition, whenConditionBytes, expressionsList, expressionsOrBuilderList, expressionsCount, serializedSize, parserForType, defaultInstanceForType, evaluatedCondition, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeRunInfo {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    whenCondition: ").append(toIndentedString(whenCondition)).append("\n");
    sb.append("    whenConditionBytes: ").append(toIndentedString(whenConditionBytes)).append("\n");
    sb.append("    expressionsList: ").append(toIndentedString(expressionsList)).append("\n");
    sb.append("    expressionsOrBuilderList: ").append(toIndentedString(expressionsOrBuilderList)).append("\n");
    sb.append("    expressionsCount: ").append(toIndentedString(expressionsCount)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    evaluatedCondition: ").append(toIndentedString(evaluatedCondition)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
