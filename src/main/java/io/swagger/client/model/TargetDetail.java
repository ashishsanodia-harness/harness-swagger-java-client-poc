/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.TargetDetailSegment;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Details of which Target Groups (Segments) a target is included in or excluded from
 */
@Schema(description = "Details of which Target Groups (Segments) a target is included in or excluded from")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class TargetDetail {
  @SerializedName("excludedSegments")
  private List<TargetDetailSegment> excludedSegments = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("includedSegments")
  private List<TargetDetailSegment> includedSegments = null;

  @SerializedName("ruleSegments")
  private List<TargetDetailSegment> ruleSegments = null;

  public TargetDetail excludedSegments(List<TargetDetailSegment> excludedSegments) {
    this.excludedSegments = excludedSegments;
    return this;
  }

  public TargetDetail addExcludedSegmentsItem(TargetDetailSegment excludedSegmentsItem) {
    if (this.excludedSegments == null) {
      this.excludedSegments = new ArrayList<TargetDetailSegment>();
    }
    this.excludedSegments.add(excludedSegmentsItem);
    return this;
  }

   /**
   * A list of target groups (segments) that the target is excluded from.
   * @return excludedSegments
  **/
  @Schema(description = "A list of target groups (segments) that the target is excluded from.")
  public List<TargetDetailSegment> getExcludedSegments() {
    return excludedSegments;
  }

  public void setExcludedSegments(List<TargetDetailSegment> excludedSegments) {
    this.excludedSegments = excludedSegments;
  }

  public TargetDetail identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The unique identifier for the target
   * @return identifier
  **/
  @Schema(required = true, description = "The unique identifier for the target")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public TargetDetail includedSegments(List<TargetDetailSegment> includedSegments) {
    this.includedSegments = includedSegments;
    return this;
  }

  public TargetDetail addIncludedSegmentsItem(TargetDetailSegment includedSegmentsItem) {
    if (this.includedSegments == null) {
      this.includedSegments = new ArrayList<TargetDetailSegment>();
    }
    this.includedSegments.add(includedSegmentsItem);
    return this;
  }

   /**
   * A list of target groups (segments) that the target is included in.
   * @return includedSegments
  **/
  @Schema(description = "A list of target groups (segments) that the target is included in.")
  public List<TargetDetailSegment> getIncludedSegments() {
    return includedSegments;
  }

  public void setIncludedSegments(List<TargetDetailSegment> includedSegments) {
    this.includedSegments = includedSegments;
  }

  public TargetDetail ruleSegments(List<TargetDetailSegment> ruleSegments) {
    this.ruleSegments = ruleSegments;
    return this;
  }

  public TargetDetail addRuleSegmentsItem(TargetDetailSegment ruleSegmentsItem) {
    if (this.ruleSegments == null) {
      this.ruleSegments = new ArrayList<TargetDetailSegment>();
    }
    this.ruleSegments.add(ruleSegmentsItem);
    return this;
  }

   /**
   * A list of target groups (segments) that the target is included in via group rules.
   * @return ruleSegments
  **/
  @Schema(description = "A list of target groups (segments) that the target is included in via group rules.")
  public List<TargetDetailSegment> getRuleSegments() {
    return ruleSegments;
  }

  public void setRuleSegments(List<TargetDetailSegment> ruleSegments) {
    this.ruleSegments = ruleSegments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetDetail targetDetail = (TargetDetail) o;
    return Objects.equals(this.excludedSegments, targetDetail.excludedSegments) &&
        Objects.equals(this.identifier, targetDetail.identifier) &&
        Objects.equals(this.includedSegments, targetDetail.includedSegments) &&
        Objects.equals(this.ruleSegments, targetDetail.ruleSegments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludedSegments, identifier, includedSegments, ruleSegments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetDetail {\n");
    
    sb.append("    excludedSegments: ").append(toIndentedString(excludedSegments)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    includedSegments: ").append(toIndentedString(includedSegments)).append("\n");
    sb.append("    ruleSegments: ").append(toIndentedString(ruleSegments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
