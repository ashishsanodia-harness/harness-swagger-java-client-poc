/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConnectorConfig;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AppDynamicsConnectorDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class AppDynamicsConnectorDTO extends ConnectorConfig {
  @SerializedName("username")
  private String username = null;

  @SerializedName("accountname")
  private String accountname = null;

  @SerializedName("controllerUrl")
  private String controllerUrl = null;

  @SerializedName("delegateSelectors")
  private List<String> delegateSelectors = null;

  @SerializedName("passwordRef")
  private String passwordRef = null;

  @SerializedName("clientSecretRef")
  private String clientSecretRef = null;

  @SerializedName("clientId")
  private String clientId = null;

  /**
   * Gets or Sets authType
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    USERNAME_PASSWORD("USERNAME_PASSWORD"),
    API_CLIENT_TOKEN("API_CLIENT_TOKEN");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuthTypeEnum fromValue(String input) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuthTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("authType")
  private AuthTypeEnum authType = null;

  public AppDynamicsConnectorDTO username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public AppDynamicsConnectorDTO accountname(String accountname) {
    this.accountname = accountname;
    return this;
  }

   /**
   * Get accountname
   * @return accountname
  **/
  @Schema(required = true, description = "")
  public String getAccountname() {
    return accountname;
  }

  public void setAccountname(String accountname) {
    this.accountname = accountname;
  }

  public AppDynamicsConnectorDTO controllerUrl(String controllerUrl) {
    this.controllerUrl = controllerUrl;
    return this;
  }

   /**
   * Get controllerUrl
   * @return controllerUrl
  **/
  @Schema(required = true, description = "")
  public String getControllerUrl() {
    return controllerUrl;
  }

  public void setControllerUrl(String controllerUrl) {
    this.controllerUrl = controllerUrl;
  }

  public AppDynamicsConnectorDTO delegateSelectors(List<String> delegateSelectors) {
    this.delegateSelectors = delegateSelectors;
    return this;
  }

  public AppDynamicsConnectorDTO addDelegateSelectorsItem(String delegateSelectorsItem) {
    if (this.delegateSelectors == null) {
      this.delegateSelectors = new ArrayList<String>();
    }
    this.delegateSelectors.add(delegateSelectorsItem);
    return this;
  }

   /**
   * Get delegateSelectors
   * @return delegateSelectors
  **/
  @Schema(description = "")
  public List<String> getDelegateSelectors() {
    return delegateSelectors;
  }

  public void setDelegateSelectors(List<String> delegateSelectors) {
    this.delegateSelectors = delegateSelectors;
  }

  public AppDynamicsConnectorDTO passwordRef(String passwordRef) {
    this.passwordRef = passwordRef;
    return this;
  }

   /**
   * Get passwordRef
   * @return passwordRef
  **/
  @Schema(description = "")
  public String getPasswordRef() {
    return passwordRef;
  }

  public void setPasswordRef(String passwordRef) {
    this.passwordRef = passwordRef;
  }

  public AppDynamicsConnectorDTO clientSecretRef(String clientSecretRef) {
    this.clientSecretRef = clientSecretRef;
    return this;
  }

   /**
   * Get clientSecretRef
   * @return clientSecretRef
  **/
  @Schema(description = "")
  public String getClientSecretRef() {
    return clientSecretRef;
  }

  public void setClientSecretRef(String clientSecretRef) {
    this.clientSecretRef = clientSecretRef;
  }

  public AppDynamicsConnectorDTO clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @Schema(description = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public AppDynamicsConnectorDTO authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @Schema(description = "")
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppDynamicsConnectorDTO appDynamicsConnectorDTO = (AppDynamicsConnectorDTO) o;
    return Objects.equals(this.username, appDynamicsConnectorDTO.username) &&
        Objects.equals(this.accountname, appDynamicsConnectorDTO.accountname) &&
        Objects.equals(this.controllerUrl, appDynamicsConnectorDTO.controllerUrl) &&
        Objects.equals(this.delegateSelectors, appDynamicsConnectorDTO.delegateSelectors) &&
        Objects.equals(this.passwordRef, appDynamicsConnectorDTO.passwordRef) &&
        Objects.equals(this.clientSecretRef, appDynamicsConnectorDTO.clientSecretRef) &&
        Objects.equals(this.clientId, appDynamicsConnectorDTO.clientId) &&
        Objects.equals(this.authType, appDynamicsConnectorDTO.authType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, accountname, controllerUrl, delegateSelectors, passwordRef, clientSecretRef, clientId, authType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppDynamicsConnectorDTO {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    accountname: ").append(toIndentedString(accountname)).append("\n");
    sb.append("    controllerUrl: ").append(toIndentedString(controllerUrl)).append("\n");
    sb.append("    delegateSelectors: ").append(toIndentedString(delegateSelectors)).append("\n");
    sb.append("    passwordRef: ").append(toIndentedString(passwordRef)).append("\n");
    sb.append("    clientSecretRef: ").append(toIndentedString(clientSecretRef)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
