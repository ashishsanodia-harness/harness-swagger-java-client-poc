/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.EnumDescriptor;
import io.swagger.client.model.FieldDescriptor;
import io.swagger.client.model.FileDescriptor;
import io.swagger.client.model.FileDescriptorProto;
import io.swagger.client.model.FileOptions;
import io.swagger.client.model.ServiceDescriptor;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FileDescriptor
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class FileDescriptor {
  @SerializedName("proto")
  private FileDescriptorProto proto = null;

  @SerializedName("messageTypes")
  private List<Descriptor> messageTypes = null;

  @SerializedName("enumTypes")
  private List<EnumDescriptor> enumTypes = null;

  @SerializedName("services")
  private List<ServiceDescriptor> services = null;

  @SerializedName("extensions")
  private List<FieldDescriptor> extensions = null;

  @SerializedName("dependencies")
  private List<FileDescriptor> dependencies = null;

  @SerializedName("publicDependencies")
  private List<FileDescriptor> publicDependencies = null;

  @SerializedName("fullName")
  private String fullName = null;

  @SerializedName("options")
  private FileOptions options = null;

  /**
   * Gets or Sets syntax
   */
  @JsonAdapter(SyntaxEnum.Adapter.class)
  public enum SyntaxEnum {
    UNKNOWN("UNKNOWN"),
    PROTO2("PROTO2"),
    PROTO3("PROTO3");

    private String value;

    SyntaxEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SyntaxEnum fromValue(String input) {
      for (SyntaxEnum b : SyntaxEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SyntaxEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyntaxEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SyntaxEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SyntaxEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("syntax")
  private SyntaxEnum syntax = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("package")
  private String _package = null;

  @SerializedName("file")
  private FileDescriptor file = null;

  public FileDescriptor proto(FileDescriptorProto proto) {
    this.proto = proto;
    return this;
  }

   /**
   * Get proto
   * @return proto
  **/
  @Schema(description = "")
  public FileDescriptorProto getProto() {
    return proto;
  }

  public void setProto(FileDescriptorProto proto) {
    this.proto = proto;
  }

  public FileDescriptor messageTypes(List<Descriptor> messageTypes) {
    this.messageTypes = messageTypes;
    return this;
  }

  public FileDescriptor addMessageTypesItem(Descriptor messageTypesItem) {
    if (this.messageTypes == null) {
      this.messageTypes = new ArrayList<Descriptor>();
    }
    this.messageTypes.add(messageTypesItem);
    return this;
  }

   /**
   * Get messageTypes
   * @return messageTypes
  **/
  @Schema(description = "")
  public List<Descriptor> getMessageTypes() {
    return messageTypes;
  }

  public void setMessageTypes(List<Descriptor> messageTypes) {
    this.messageTypes = messageTypes;
  }

  public FileDescriptor enumTypes(List<EnumDescriptor> enumTypes) {
    this.enumTypes = enumTypes;
    return this;
  }

  public FileDescriptor addEnumTypesItem(EnumDescriptor enumTypesItem) {
    if (this.enumTypes == null) {
      this.enumTypes = new ArrayList<EnumDescriptor>();
    }
    this.enumTypes.add(enumTypesItem);
    return this;
  }

   /**
   * Get enumTypes
   * @return enumTypes
  **/
  @Schema(description = "")
  public List<EnumDescriptor> getEnumTypes() {
    return enumTypes;
  }

  public void setEnumTypes(List<EnumDescriptor> enumTypes) {
    this.enumTypes = enumTypes;
  }

  public FileDescriptor services(List<ServiceDescriptor> services) {
    this.services = services;
    return this;
  }

  public FileDescriptor addServicesItem(ServiceDescriptor servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<ServiceDescriptor>();
    }
    this.services.add(servicesItem);
    return this;
  }

   /**
   * Get services
   * @return services
  **/
  @Schema(description = "")
  public List<ServiceDescriptor> getServices() {
    return services;
  }

  public void setServices(List<ServiceDescriptor> services) {
    this.services = services;
  }

  public FileDescriptor extensions(List<FieldDescriptor> extensions) {
    this.extensions = extensions;
    return this;
  }

  public FileDescriptor addExtensionsItem(FieldDescriptor extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<FieldDescriptor>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

   /**
   * Get extensions
   * @return extensions
  **/
  @Schema(description = "")
  public List<FieldDescriptor> getExtensions() {
    return extensions;
  }

  public void setExtensions(List<FieldDescriptor> extensions) {
    this.extensions = extensions;
  }

  public FileDescriptor dependencies(List<FileDescriptor> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public FileDescriptor addDependenciesItem(FileDescriptor dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<FileDescriptor>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Get dependencies
   * @return dependencies
  **/
  @Schema(description = "")
  public List<FileDescriptor> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<FileDescriptor> dependencies) {
    this.dependencies = dependencies;
  }

  public FileDescriptor publicDependencies(List<FileDescriptor> publicDependencies) {
    this.publicDependencies = publicDependencies;
    return this;
  }

  public FileDescriptor addPublicDependenciesItem(FileDescriptor publicDependenciesItem) {
    if (this.publicDependencies == null) {
      this.publicDependencies = new ArrayList<FileDescriptor>();
    }
    this.publicDependencies.add(publicDependenciesItem);
    return this;
  }

   /**
   * Get publicDependencies
   * @return publicDependencies
  **/
  @Schema(description = "")
  public List<FileDescriptor> getPublicDependencies() {
    return publicDependencies;
  }

  public void setPublicDependencies(List<FileDescriptor> publicDependencies) {
    this.publicDependencies = publicDependencies;
  }

  public FileDescriptor fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @Schema(description = "")
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  public FileDescriptor options(FileOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public FileOptions getOptions() {
    return options;
  }

  public void setOptions(FileOptions options) {
    this.options = options;
  }

  public FileDescriptor syntax(SyntaxEnum syntax) {
    this.syntax = syntax;
    return this;
  }

   /**
   * Get syntax
   * @return syntax
  **/
  @Schema(description = "")
  public SyntaxEnum getSyntax() {
    return syntax;
  }

  public void setSyntax(SyntaxEnum syntax) {
    this.syntax = syntax;
  }

  public FileDescriptor name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FileDescriptor _package(String _package) {
    this._package = _package;
    return this;
  }

   /**
   * Get _package
   * @return _package
  **/
  @Schema(description = "")
  public String getPackage() {
    return _package;
  }

  public void setPackage(String _package) {
    this._package = _package;
  }

  public FileDescriptor file(FileDescriptor file) {
    this.file = file;
    return this;
  }

   /**
   * Get file
   * @return file
  **/
  @Schema(description = "")
  public FileDescriptor getFile() {
    return file;
  }

  public void setFile(FileDescriptor file) {
    this.file = file;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileDescriptor fileDescriptor = (FileDescriptor) o;
    return Objects.equals(this.proto, fileDescriptor.proto) &&
        Objects.equals(this.messageTypes, fileDescriptor.messageTypes) &&
        Objects.equals(this.enumTypes, fileDescriptor.enumTypes) &&
        Objects.equals(this.services, fileDescriptor.services) &&
        Objects.equals(this.extensions, fileDescriptor.extensions) &&
        Objects.equals(this.dependencies, fileDescriptor.dependencies) &&
        Objects.equals(this.publicDependencies, fileDescriptor.publicDependencies) &&
        Objects.equals(this.fullName, fileDescriptor.fullName) &&
        Objects.equals(this.options, fileDescriptor.options) &&
        Objects.equals(this.syntax, fileDescriptor.syntax) &&
        Objects.equals(this.name, fileDescriptor.name) &&
        Objects.equals(this._package, fileDescriptor._package) &&
        Objects.equals(this.file, fileDescriptor.file);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proto, messageTypes, enumTypes, services, extensions, dependencies, publicDependencies, fullName, options, syntax, name, _package, file);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileDescriptor {\n");
    
    sb.append("    proto: ").append(toIndentedString(proto)).append("\n");
    sb.append("    messageTypes: ").append(toIndentedString(messageTypes)).append("\n");
    sb.append("    enumTypes: ").append(toIndentedString(enumTypes)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    publicDependencies: ").append(toIndentedString(publicDependencies)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    syntax: ").append(toIndentedString(syntax)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
