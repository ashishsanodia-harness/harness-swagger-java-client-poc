/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConnectorConfig;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Returns configuration details for the Azure Key Vault Secret Manager.
 */
@Schema(description = "Returns configuration details for the Azure Key Vault Secret Manager.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class AzureKeyVaultConnector extends ConnectorConfig {
  @SerializedName("clientId")
  private String clientId = null;

  @SerializedName("secretKey")
  private String secretKey = null;

  @SerializedName("tenantId")
  private String tenantId = null;

  @SerializedName("vaultName")
  private String vaultName = null;

  @SerializedName("subscription")
  private String subscription = null;

  @SerializedName("isDefault")
  private Boolean isDefault = null;

  /**
   * This specifies the Azure Environment type, which is AZURE by default.
   */
  @JsonAdapter(AzureEnvironmentTypeEnum.Adapter.class)
  public enum AzureEnvironmentTypeEnum {
    AZURE("AZURE"),
    AZURE_US_GOVERNMENT("AZURE_US_GOVERNMENT");

    private String value;

    AzureEnvironmentTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AzureEnvironmentTypeEnum fromValue(String input) {
      for (AzureEnvironmentTypeEnum b : AzureEnvironmentTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AzureEnvironmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzureEnvironmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AzureEnvironmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AzureEnvironmentTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("azureEnvironmentType")
  private AzureEnvironmentTypeEnum azureEnvironmentType = null;

  @SerializedName("delegateSelectors")
  private List<String> delegateSelectors = null;

  @SerializedName("default")
  private Boolean _default = null;

  public AzureKeyVaultConnector clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Application ID of the Azure App.
   * @return clientId
  **/
  @Schema(required = true, description = "Application ID of the Azure App.")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public AzureKeyVaultConnector secretKey(String secretKey) {
    this.secretKey = secretKey;
    return this;
  }

   /**
   * Get secretKey
   * @return secretKey
  **/
  @Schema(required = true, description = "")
  public String getSecretKey() {
    return secretKey;
  }

  public void setSecretKey(String secretKey) {
    this.secretKey = secretKey;
  }

  public AzureKeyVaultConnector tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * The Azure Active Directory (AAD) directory ID where you created your application.
   * @return tenantId
  **/
  @Schema(required = true, description = "The Azure Active Directory (AAD) directory ID where you created your application.")
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

  public AzureKeyVaultConnector vaultName(String vaultName) {
    this.vaultName = vaultName;
    return this;
  }

   /**
   * The Azure Active Directory (AAD) directory ID where you created your application.
   * @return vaultName
  **/
  @Schema(required = true, description = "The Azure Active Directory (AAD) directory ID where you created your application.")
  public String getVaultName() {
    return vaultName;
  }

  public void setVaultName(String vaultName) {
    this.vaultName = vaultName;
  }

  public AzureKeyVaultConnector subscription(String subscription) {
    this.subscription = subscription;
    return this;
  }

   /**
   * Azure Subscription ID.
   * @return subscription
  **/
  @Schema(required = true, description = "Azure Subscription ID.")
  public String getSubscription() {
    return subscription;
  }

  public void setSubscription(String subscription) {
    this.subscription = subscription;
  }

  public AzureKeyVaultConnector isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

   /**
   * Boolean value to indicate if the Secret Manager is your default Secret Manager.
   * @return isDefault
  **/
  @Schema(description = "Boolean value to indicate if the Secret Manager is your default Secret Manager.")
  public Boolean isIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }

  public AzureKeyVaultConnector azureEnvironmentType(AzureEnvironmentTypeEnum azureEnvironmentType) {
    this.azureEnvironmentType = azureEnvironmentType;
    return this;
  }

   /**
   * This specifies the Azure Environment type, which is AZURE by default.
   * @return azureEnvironmentType
  **/
  @Schema(description = "This specifies the Azure Environment type, which is AZURE by default.")
  public AzureEnvironmentTypeEnum getAzureEnvironmentType() {
    return azureEnvironmentType;
  }

  public void setAzureEnvironmentType(AzureEnvironmentTypeEnum azureEnvironmentType) {
    this.azureEnvironmentType = azureEnvironmentType;
  }

  public AzureKeyVaultConnector delegateSelectors(List<String> delegateSelectors) {
    this.delegateSelectors = delegateSelectors;
    return this;
  }

  public AzureKeyVaultConnector addDelegateSelectorsItem(String delegateSelectorsItem) {
    if (this.delegateSelectors == null) {
      this.delegateSelectors = new ArrayList<String>();
    }
    this.delegateSelectors.add(delegateSelectorsItem);
    return this;
  }

   /**
   * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
   * @return delegateSelectors
  **/
  @Schema(description = "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.")
  public List<String> getDelegateSelectors() {
    return delegateSelectors;
  }

  public void setDelegateSelectors(List<String> delegateSelectors) {
    this.delegateSelectors = delegateSelectors;
  }

  public AzureKeyVaultConnector _default(Boolean _default) {
    this._default = _default;
    return this;
  }

   /**
   * Get _default
   * @return _default
  **/
  @Schema(description = "")
  public Boolean isDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureKeyVaultConnector azureKeyVaultConnector = (AzureKeyVaultConnector) o;
    return Objects.equals(this.clientId, azureKeyVaultConnector.clientId) &&
        Objects.equals(this.secretKey, azureKeyVaultConnector.secretKey) &&
        Objects.equals(this.tenantId, azureKeyVaultConnector.tenantId) &&
        Objects.equals(this.vaultName, azureKeyVaultConnector.vaultName) &&
        Objects.equals(this.subscription, azureKeyVaultConnector.subscription) &&
        Objects.equals(this.isDefault, azureKeyVaultConnector.isDefault) &&
        Objects.equals(this.azureEnvironmentType, azureKeyVaultConnector.azureEnvironmentType) &&
        Objects.equals(this.delegateSelectors, azureKeyVaultConnector.delegateSelectors) &&
        Objects.equals(this._default, azureKeyVaultConnector._default) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, secretKey, tenantId, vaultName, subscription, isDefault, azureEnvironmentType, delegateSelectors, _default, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureKeyVaultConnector {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    secretKey: ").append(toIndentedString(secretKey)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    vaultName: ").append(toIndentedString(vaultName)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    azureEnvironmentType: ").append(toIndentedString(azureEnvironmentType)).append("\n");
    sb.append("    delegateSelectors: ").append(toIndentedString(delegateSelectors)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
