/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.GitSyncError;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * This contains a list of Git Sync Error details for a given Commit Id
 */
@Schema(description = "This contains a list of Git Sync Error details for a given Commit Id")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class GitSyncErrorAggregateByCommit {
  @SerializedName("gitCommitId")
  private String gitCommitId = null;

  @SerializedName("failedCount")
  private Integer failedCount = null;

  @SerializedName("repoId")
  private String repoId = null;

  @SerializedName("branchName")
  private String branchName = null;

  @SerializedName("commitMessage")
  private String commitMessage = null;

  @SerializedName("createdAt")
  private Long createdAt = null;

  @SerializedName("errorsForSummaryView")
  private List<GitSyncError> errorsForSummaryView = null;

  public GitSyncErrorAggregateByCommit gitCommitId(String gitCommitId) {
    this.gitCommitId = gitCommitId;
    return this;
  }

   /**
   * Commit Id
   * @return gitCommitId
  **/
  @Schema(description = "Commit Id")
  public String getGitCommitId() {
    return gitCommitId;
  }

  public void setGitCommitId(String gitCommitId) {
    this.gitCommitId = gitCommitId;
  }

  public GitSyncErrorAggregateByCommit failedCount(Integer failedCount) {
    this.failedCount = failedCount;
    return this;
  }

   /**
   * The number of active errors in a commit
   * @return failedCount
  **/
  @Schema(description = "The number of active errors in a commit")
  public Integer getFailedCount() {
    return failedCount;
  }

  public void setFailedCount(Integer failedCount) {
    this.failedCount = failedCount;
  }

  public GitSyncErrorAggregateByCommit repoId(String repoId) {
    this.repoId = repoId;
    return this;
  }

   /**
   * Git Sync Config Id
   * @return repoId
  **/
  @Schema(description = "Git Sync Config Id")
  public String getRepoId() {
    return repoId;
  }

  public void setRepoId(String repoId) {
    this.repoId = repoId;
  }

  public GitSyncErrorAggregateByCommit branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

   /**
   * Branch Name
   * @return branchName
  **/
  @Schema(description = "Branch Name")
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }

  public GitSyncErrorAggregateByCommit commitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
    return this;
  }

   /**
   * Commit Message
   * @return commitMessage
  **/
  @Schema(description = "Commit Message")
  public String getCommitMessage() {
    return commitMessage;
  }

  public void setCommitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
  }

  public GitSyncErrorAggregateByCommit createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * This is the time at which the Git Sync error was logged
   * @return createdAt
  **/
  @Schema(description = "This is the time at which the Git Sync error was logged")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public GitSyncErrorAggregateByCommit errorsForSummaryView(List<GitSyncError> errorsForSummaryView) {
    this.errorsForSummaryView = errorsForSummaryView;
    return this;
  }

  public GitSyncErrorAggregateByCommit addErrorsForSummaryViewItem(GitSyncError errorsForSummaryViewItem) {
    if (this.errorsForSummaryView == null) {
      this.errorsForSummaryView = new ArrayList<GitSyncError>();
    }
    this.errorsForSummaryView.add(errorsForSummaryViewItem);
    return this;
  }

   /**
   * This has the list of Git Sync errors corresponding to a specific Commit Id
   * @return errorsForSummaryView
  **/
  @Schema(description = "This has the list of Git Sync errors corresponding to a specific Commit Id")
  public List<GitSyncError> getErrorsForSummaryView() {
    return errorsForSummaryView;
  }

  public void setErrorsForSummaryView(List<GitSyncError> errorsForSummaryView) {
    this.errorsForSummaryView = errorsForSummaryView;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitSyncErrorAggregateByCommit gitSyncErrorAggregateByCommit = (GitSyncErrorAggregateByCommit) o;
    return Objects.equals(this.gitCommitId, gitSyncErrorAggregateByCommit.gitCommitId) &&
        Objects.equals(this.failedCount, gitSyncErrorAggregateByCommit.failedCount) &&
        Objects.equals(this.repoId, gitSyncErrorAggregateByCommit.repoId) &&
        Objects.equals(this.branchName, gitSyncErrorAggregateByCommit.branchName) &&
        Objects.equals(this.commitMessage, gitSyncErrorAggregateByCommit.commitMessage) &&
        Objects.equals(this.createdAt, gitSyncErrorAggregateByCommit.createdAt) &&
        Objects.equals(this.errorsForSummaryView, gitSyncErrorAggregateByCommit.errorsForSummaryView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gitCommitId, failedCount, repoId, branchName, commitMessage, createdAt, errorsForSummaryView);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitSyncErrorAggregateByCommit {\n");
    
    sb.append("    gitCommitId: ").append(toIndentedString(gitCommitId)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    repoId: ").append(toIndentedString(repoId)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    commitMessage: ").append(toIndentedString(commitMessage)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    errorsForSummaryView: ").append(toIndentedString(errorsForSummaryView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
