/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Details of a Feature Flag that has been included in a Target Group (Segment)
 */
@Schema(description = "Details of a Feature Flag that has been included in a Target Group (Segment)")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class SegmentFlag {
  @SerializedName("description")
  private String description = null;

  @SerializedName("environment")
  private String environment = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("project")
  private String project = null;

  /**
   * How the the flag has been included, either directly or via a custom rule
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DIRECT("DIRECT"),
    CONDITION("CONDITION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("variation")
  private String variation = null;

  public SegmentFlag description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the feature flag
   * @return description
  **/
  @Schema(description = "A description of the feature flag")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SegmentFlag environment(String environment) {
    this.environment = environment;
    return this;
  }

   /**
   * The environment identifier for the feature flag
   * @return environment
  **/
  @Schema(required = true, description = "The environment identifier for the feature flag")
  public String getEnvironment() {
    return environment;
  }

  public void setEnvironment(String environment) {
    this.environment = environment;
  }

  public SegmentFlag identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The identifier of the feature flag
   * @return identifier
  **/
  @Schema(example = "simple-bool", required = true, description = "The identifier of the feature flag")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public SegmentFlag name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the feature flag
   * @return name
  **/
  @Schema(example = "Simple Bool", required = true, description = "The name of the feature flag")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SegmentFlag project(String project) {
    this.project = project;
    return this;
  }

   /**
   * The project identifier for the feature flag
   * @return project
  **/
  @Schema(required = true, description = "The project identifier for the feature flag")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public SegmentFlag type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * How the the flag has been included, either directly or via a custom rule
   * @return type
  **/
  @Schema(required = true, description = "How the the flag has been included, either directly or via a custom rule")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SegmentFlag variation(String variation) {
    this.variation = variation;
    return this;
  }

   /**
   * The identifier for the variation of the flag that should be served to members of the group
   * @return variation
  **/
  @Schema(required = true, description = "The identifier for the variation of the flag that should be served to members of the group")
  public String getVariation() {
    return variation;
  }

  public void setVariation(String variation) {
    this.variation = variation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentFlag segmentFlag = (SegmentFlag) o;
    return Objects.equals(this.description, segmentFlag.description) &&
        Objects.equals(this.environment, segmentFlag.environment) &&
        Objects.equals(this.identifier, segmentFlag.identifier) &&
        Objects.equals(this.name, segmentFlag.name) &&
        Objects.equals(this.project, segmentFlag.project) &&
        Objects.equals(this.type, segmentFlag.type) &&
        Objects.equals(this.variation, segmentFlag.variation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, environment, identifier, name, project, type, variation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentFlag {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    variation: ").append(toIndentedString(variation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
