/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A description of a single Alert
 */
@Schema(description = "A description of a single Alert")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class AlertThreshold {
  @SerializedName("percentage")
  private Double percentage = null;

  /**
   * Whether the alert is based on Actual cost or next 30 days Forecasted Cost
   */
  @JsonAdapter(BasedOnEnum.Adapter.class)
  public enum BasedOnEnum {
    ACTUAL_COST("ACTUAL_COST"),
    FORECASTED_COST("FORECASTED_COST");

    private String value;

    BasedOnEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BasedOnEnum fromValue(String input) {
      for (BasedOnEnum b : BasedOnEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BasedOnEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BasedOnEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BasedOnEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BasedOnEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("basedOn")
  private BasedOnEnum basedOn = null;

  @SerializedName("emailAddresses")
  private List<String> emailAddresses = null;

  @SerializedName("userGroupIds")
  private List<String> userGroupIds = null;

  @SerializedName("slackWebhooks")
  private List<String> slackWebhooks = null;

  @SerializedName("alertsSent")
  private Integer alertsSent = null;

  @SerializedName("crossedAt")
  private Long crossedAt = null;

  public AlertThreshold percentage(Double percentage) {
    this.percentage = percentage;
    return this;
  }

   /**
   * Get percentage
   * @return percentage
  **/
  @Schema(description = "")
  public Double getPercentage() {
    return percentage;
  }

  public void setPercentage(Double percentage) {
    this.percentage = percentage;
  }

  public AlertThreshold basedOn(BasedOnEnum basedOn) {
    this.basedOn = basedOn;
    return this;
  }

   /**
   * Whether the alert is based on Actual cost or next 30 days Forecasted Cost
   * @return basedOn
  **/
  @Schema(description = "Whether the alert is based on Actual cost or next 30 days Forecasted Cost")
  public BasedOnEnum getBasedOn() {
    return basedOn;
  }

  public void setBasedOn(BasedOnEnum basedOn) {
    this.basedOn = basedOn;
  }

  public AlertThreshold emailAddresses(List<String> emailAddresses) {
    this.emailAddresses = emailAddresses;
    return this;
  }

  public AlertThreshold addEmailAddressesItem(String emailAddressesItem) {
    if (this.emailAddresses == null) {
      this.emailAddresses = new ArrayList<String>();
    }
    this.emailAddresses.add(emailAddressesItem);
    return this;
  }

   /**
   * Get emailAddresses
   * @return emailAddresses
  **/
  @Schema(description = "")
  public List<String> getEmailAddresses() {
    return emailAddresses;
  }

  public void setEmailAddresses(List<String> emailAddresses) {
    this.emailAddresses = emailAddresses;
  }

  public AlertThreshold userGroupIds(List<String> userGroupIds) {
    this.userGroupIds = userGroupIds;
    return this;
  }

  public AlertThreshold addUserGroupIdsItem(String userGroupIdsItem) {
    if (this.userGroupIds == null) {
      this.userGroupIds = new ArrayList<String>();
    }
    this.userGroupIds.add(userGroupIdsItem);
    return this;
  }

   /**
   * Get userGroupIds
   * @return userGroupIds
  **/
  @Schema(description = "")
  public List<String> getUserGroupIds() {
    return userGroupIds;
  }

  public void setUserGroupIds(List<String> userGroupIds) {
    this.userGroupIds = userGroupIds;
  }

  public AlertThreshold slackWebhooks(List<String> slackWebhooks) {
    this.slackWebhooks = slackWebhooks;
    return this;
  }

  public AlertThreshold addSlackWebhooksItem(String slackWebhooksItem) {
    if (this.slackWebhooks == null) {
      this.slackWebhooks = new ArrayList<String>();
    }
    this.slackWebhooks.add(slackWebhooksItem);
    return this;
  }

   /**
   * Get slackWebhooks
   * @return slackWebhooks
  **/
  @Schema(description = "")
  public List<String> getSlackWebhooks() {
    return slackWebhooks;
  }

  public void setSlackWebhooks(List<String> slackWebhooks) {
    this.slackWebhooks = slackWebhooks;
  }

  public AlertThreshold alertsSent(Integer alertsSent) {
    this.alertsSent = alertsSent;
    return this;
  }

   /**
   * Get alertsSent
   * @return alertsSent
  **/
  @Schema(description = "")
  public Integer getAlertsSent() {
    return alertsSent;
  }

  public void setAlertsSent(Integer alertsSent) {
    this.alertsSent = alertsSent;
  }

  public AlertThreshold crossedAt(Long crossedAt) {
    this.crossedAt = crossedAt;
    return this;
  }

   /**
   * Get crossedAt
   * @return crossedAt
  **/
  @Schema(description = "")
  public Long getCrossedAt() {
    return crossedAt;
  }

  public void setCrossedAt(Long crossedAt) {
    this.crossedAt = crossedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertThreshold alertThreshold = (AlertThreshold) o;
    return Objects.equals(this.percentage, alertThreshold.percentage) &&
        Objects.equals(this.basedOn, alertThreshold.basedOn) &&
        Objects.equals(this.emailAddresses, alertThreshold.emailAddresses) &&
        Objects.equals(this.userGroupIds, alertThreshold.userGroupIds) &&
        Objects.equals(this.slackWebhooks, alertThreshold.slackWebhooks) &&
        Objects.equals(this.alertsSent, alertThreshold.alertsSent) &&
        Objects.equals(this.crossedAt, alertThreshold.crossedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentage, basedOn, emailAddresses, userGroupIds, slackWebhooks, alertsSent, crossedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertThreshold {\n");
    
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    basedOn: ").append(toIndentedString(basedOn)).append("\n");
    sb.append("    emailAddresses: ").append(toIndentedString(emailAddresses)).append("\n");
    sb.append("    userGroupIds: ").append(toIndentedString(userGroupIds)).append("\n");
    sb.append("    slackWebhooks: ").append(toIndentedString(slackWebhooks)).append("\n");
    sb.append("    alertsSent: ").append(toIndentedString(alertsSent)).append("\n");
    sb.append("    crossedAt: ").append(toIndentedString(crossedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
