/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.Location;
import io.swagger.client.model.ParserLocation;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Location
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class Location {
  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  @SerializedName("serializedSize")
  private Integer serializedSize = null;

  @SerializedName("parserForType")
  private ParserLocation parserForType = null;

  @SerializedName("defaultInstanceForType")
  private Location defaultInstanceForType = null;

  @SerializedName("pathList")
  private List<Integer> pathList = null;

  @SerializedName("pathCount")
  private Integer pathCount = null;

  @SerializedName("spanList")
  private List<Integer> spanList = null;

  @SerializedName("spanCount")
  private Integer spanCount = null;

  @SerializedName("leadingComments")
  private String leadingComments = null;

  @SerializedName("leadingCommentsBytes")
  private ByteString leadingCommentsBytes = null;

  @SerializedName("trailingComments")
  private String trailingComments = null;

  @SerializedName("trailingCommentsBytes")
  private ByteString trailingCommentsBytes = null;

  @SerializedName("leadingDetachedCommentsList")
  private List<String> leadingDetachedCommentsList = null;

  @SerializedName("leadingDetachedCommentsCount")
  private Integer leadingDetachedCommentsCount = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("memoizedSerializedSize")
  private Integer memoizedSerializedSize = null;

  public Location unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public Location initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }

  public Location serializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
    return this;
  }

   /**
   * Get serializedSize
   * @return serializedSize
  **/
  @Schema(description = "")
  public Integer getSerializedSize() {
    return serializedSize;
  }

  public void setSerializedSize(Integer serializedSize) {
    this.serializedSize = serializedSize;
  }

  public Location parserForType(ParserLocation parserForType) {
    this.parserForType = parserForType;
    return this;
  }

   /**
   * Get parserForType
   * @return parserForType
  **/
  @Schema(description = "")
  public ParserLocation getParserForType() {
    return parserForType;
  }

  public void setParserForType(ParserLocation parserForType) {
    this.parserForType = parserForType;
  }

  public Location defaultInstanceForType(Location defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public Location getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(Location defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public Location pathList(List<Integer> pathList) {
    this.pathList = pathList;
    return this;
  }

  public Location addPathListItem(Integer pathListItem) {
    if (this.pathList == null) {
      this.pathList = new ArrayList<Integer>();
    }
    this.pathList.add(pathListItem);
    return this;
  }

   /**
   * Get pathList
   * @return pathList
  **/
  @Schema(description = "")
  public List<Integer> getPathList() {
    return pathList;
  }

  public void setPathList(List<Integer> pathList) {
    this.pathList = pathList;
  }

  public Location pathCount(Integer pathCount) {
    this.pathCount = pathCount;
    return this;
  }

   /**
   * Get pathCount
   * @return pathCount
  **/
  @Schema(description = "")
  public Integer getPathCount() {
    return pathCount;
  }

  public void setPathCount(Integer pathCount) {
    this.pathCount = pathCount;
  }

  public Location spanList(List<Integer> spanList) {
    this.spanList = spanList;
    return this;
  }

  public Location addSpanListItem(Integer spanListItem) {
    if (this.spanList == null) {
      this.spanList = new ArrayList<Integer>();
    }
    this.spanList.add(spanListItem);
    return this;
  }

   /**
   * Get spanList
   * @return spanList
  **/
  @Schema(description = "")
  public List<Integer> getSpanList() {
    return spanList;
  }

  public void setSpanList(List<Integer> spanList) {
    this.spanList = spanList;
  }

  public Location spanCount(Integer spanCount) {
    this.spanCount = spanCount;
    return this;
  }

   /**
   * Get spanCount
   * @return spanCount
  **/
  @Schema(description = "")
  public Integer getSpanCount() {
    return spanCount;
  }

  public void setSpanCount(Integer spanCount) {
    this.spanCount = spanCount;
  }

  public Location leadingComments(String leadingComments) {
    this.leadingComments = leadingComments;
    return this;
  }

   /**
   * Get leadingComments
   * @return leadingComments
  **/
  @Schema(description = "")
  public String getLeadingComments() {
    return leadingComments;
  }

  public void setLeadingComments(String leadingComments) {
    this.leadingComments = leadingComments;
  }

  public Location leadingCommentsBytes(ByteString leadingCommentsBytes) {
    this.leadingCommentsBytes = leadingCommentsBytes;
    return this;
  }

   /**
   * Get leadingCommentsBytes
   * @return leadingCommentsBytes
  **/
  @Schema(description = "")
  public ByteString getLeadingCommentsBytes() {
    return leadingCommentsBytes;
  }

  public void setLeadingCommentsBytes(ByteString leadingCommentsBytes) {
    this.leadingCommentsBytes = leadingCommentsBytes;
  }

  public Location trailingComments(String trailingComments) {
    this.trailingComments = trailingComments;
    return this;
  }

   /**
   * Get trailingComments
   * @return trailingComments
  **/
  @Schema(description = "")
  public String getTrailingComments() {
    return trailingComments;
  }

  public void setTrailingComments(String trailingComments) {
    this.trailingComments = trailingComments;
  }

  public Location trailingCommentsBytes(ByteString trailingCommentsBytes) {
    this.trailingCommentsBytes = trailingCommentsBytes;
    return this;
  }

   /**
   * Get trailingCommentsBytes
   * @return trailingCommentsBytes
  **/
  @Schema(description = "")
  public ByteString getTrailingCommentsBytes() {
    return trailingCommentsBytes;
  }

  public void setTrailingCommentsBytes(ByteString trailingCommentsBytes) {
    this.trailingCommentsBytes = trailingCommentsBytes;
  }

  public Location leadingDetachedCommentsList(List<String> leadingDetachedCommentsList) {
    this.leadingDetachedCommentsList = leadingDetachedCommentsList;
    return this;
  }

  public Location addLeadingDetachedCommentsListItem(String leadingDetachedCommentsListItem) {
    if (this.leadingDetachedCommentsList == null) {
      this.leadingDetachedCommentsList = new ArrayList<String>();
    }
    this.leadingDetachedCommentsList.add(leadingDetachedCommentsListItem);
    return this;
  }

   /**
   * Get leadingDetachedCommentsList
   * @return leadingDetachedCommentsList
  **/
  @Schema(description = "")
  public List<String> getLeadingDetachedCommentsList() {
    return leadingDetachedCommentsList;
  }

  public void setLeadingDetachedCommentsList(List<String> leadingDetachedCommentsList) {
    this.leadingDetachedCommentsList = leadingDetachedCommentsList;
  }

  public Location leadingDetachedCommentsCount(Integer leadingDetachedCommentsCount) {
    this.leadingDetachedCommentsCount = leadingDetachedCommentsCount;
    return this;
  }

   /**
   * Get leadingDetachedCommentsCount
   * @return leadingDetachedCommentsCount
  **/
  @Schema(description = "")
  public Integer getLeadingDetachedCommentsCount() {
    return leadingDetachedCommentsCount;
  }

  public void setLeadingDetachedCommentsCount(Integer leadingDetachedCommentsCount) {
    this.leadingDetachedCommentsCount = leadingDetachedCommentsCount;
  }

  public Location allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public Location putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public Location initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public Location descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public Location memoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
    return this;
  }

   /**
   * Get memoizedSerializedSize
   * @return memoizedSerializedSize
  **/
  @Schema(description = "")
  public Integer getMemoizedSerializedSize() {
    return memoizedSerializedSize;
  }

  public void setMemoizedSerializedSize(Integer memoizedSerializedSize) {
    this.memoizedSerializedSize = memoizedSerializedSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.unknownFields, location.unknownFields) &&
        Objects.equals(this.initialized, location.initialized) &&
        Objects.equals(this.serializedSize, location.serializedSize) &&
        Objects.equals(this.parserForType, location.parserForType) &&
        Objects.equals(this.defaultInstanceForType, location.defaultInstanceForType) &&
        Objects.equals(this.pathList, location.pathList) &&
        Objects.equals(this.pathCount, location.pathCount) &&
        Objects.equals(this.spanList, location.spanList) &&
        Objects.equals(this.spanCount, location.spanCount) &&
        Objects.equals(this.leadingComments, location.leadingComments) &&
        Objects.equals(this.leadingCommentsBytes, location.leadingCommentsBytes) &&
        Objects.equals(this.trailingComments, location.trailingComments) &&
        Objects.equals(this.trailingCommentsBytes, location.trailingCommentsBytes) &&
        Objects.equals(this.leadingDetachedCommentsList, location.leadingDetachedCommentsList) &&
        Objects.equals(this.leadingDetachedCommentsCount, location.leadingDetachedCommentsCount) &&
        Objects.equals(this.allFields, location.allFields) &&
        Objects.equals(this.initializationErrorString, location.initializationErrorString) &&
        Objects.equals(this.descriptorForType, location.descriptorForType) &&
        Objects.equals(this.memoizedSerializedSize, location.memoizedSerializedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unknownFields, initialized, serializedSize, parserForType, defaultInstanceForType, pathList, pathCount, spanList, spanCount, leadingComments, leadingCommentsBytes, trailingComments, trailingCommentsBytes, leadingDetachedCommentsList, leadingDetachedCommentsCount, allFields, initializationErrorString, descriptorForType, memoizedSerializedSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("    serializedSize: ").append(toIndentedString(serializedSize)).append("\n");
    sb.append("    parserForType: ").append(toIndentedString(parserForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    pathList: ").append(toIndentedString(pathList)).append("\n");
    sb.append("    pathCount: ").append(toIndentedString(pathCount)).append("\n");
    sb.append("    spanList: ").append(toIndentedString(spanList)).append("\n");
    sb.append("    spanCount: ").append(toIndentedString(spanCount)).append("\n");
    sb.append("    leadingComments: ").append(toIndentedString(leadingComments)).append("\n");
    sb.append("    leadingCommentsBytes: ").append(toIndentedString(leadingCommentsBytes)).append("\n");
    sb.append("    trailingComments: ").append(toIndentedString(trailingComments)).append("\n");
    sb.append("    trailingCommentsBytes: ").append(toIndentedString(trailingCommentsBytes)).append("\n");
    sb.append("    leadingDetachedCommentsList: ").append(toIndentedString(leadingDetachedCommentsList)).append("\n");
    sb.append("    leadingDetachedCommentsCount: ").append(toIndentedString(leadingDetachedCommentsCount)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    memoizedSerializedSize: ").append(toIndentedString(memoizedSerializedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
