/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ByteString;
import io.swagger.client.model.Descriptor;
import io.swagger.client.model.Message;
import io.swagger.client.model.UnknownFieldSet;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ExecutionPrincipalInfoOrBuilder
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class ExecutionPrincipalInfoOrBuilder {
  @SerializedName("principal")
  private String principal = null;

  @SerializedName("principalBytes")
  private ByteString principalBytes = null;

  @SerializedName("principalTypeValue")
  private Integer principalTypeValue = null;

  /**
   * Gets or Sets principalType
   */
  @JsonAdapter(PrincipalTypeEnum.Adapter.class)
  public enum PrincipalTypeEnum {
    UNKNOWN("UNKNOWN"),
    USER("USER"),
    USER_GROUP("USER_GROUP"),
    API_KEY("API_KEY"),
    SERVICE("SERVICE"),
    SERVICE_ACCOUNT("SERVICE_ACCOUNT"),
    UNRECOGNIZED("UNRECOGNIZED");

    private String value;

    PrincipalTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PrincipalTypeEnum fromValue(String input) {
      for (PrincipalTypeEnum b : PrincipalTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PrincipalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrincipalTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PrincipalTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PrincipalTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("principalType")
  private PrincipalTypeEnum principalType = null;

  @SerializedName("shouldValidateRbac")
  private Boolean shouldValidateRbac = null;

  @SerializedName("allFields")
  private Map<String, Object> allFields = null;

  @SerializedName("initializationErrorString")
  private String initializationErrorString = null;

  @SerializedName("descriptorForType")
  private Descriptor descriptorForType = null;

  @SerializedName("defaultInstanceForType")
  private Message defaultInstanceForType = null;

  @SerializedName("unknownFields")
  private UnknownFieldSet unknownFields = null;

  @SerializedName("initialized")
  private Boolean initialized = null;

  public ExecutionPrincipalInfoOrBuilder principal(String principal) {
    this.principal = principal;
    return this;
  }

   /**
   * Get principal
   * @return principal
  **/
  @Schema(description = "")
  public String getPrincipal() {
    return principal;
  }

  public void setPrincipal(String principal) {
    this.principal = principal;
  }

  public ExecutionPrincipalInfoOrBuilder principalBytes(ByteString principalBytes) {
    this.principalBytes = principalBytes;
    return this;
  }

   /**
   * Get principalBytes
   * @return principalBytes
  **/
  @Schema(description = "")
  public ByteString getPrincipalBytes() {
    return principalBytes;
  }

  public void setPrincipalBytes(ByteString principalBytes) {
    this.principalBytes = principalBytes;
  }

  public ExecutionPrincipalInfoOrBuilder principalTypeValue(Integer principalTypeValue) {
    this.principalTypeValue = principalTypeValue;
    return this;
  }

   /**
   * Get principalTypeValue
   * @return principalTypeValue
  **/
  @Schema(description = "")
  public Integer getPrincipalTypeValue() {
    return principalTypeValue;
  }

  public void setPrincipalTypeValue(Integer principalTypeValue) {
    this.principalTypeValue = principalTypeValue;
  }

  public ExecutionPrincipalInfoOrBuilder principalType(PrincipalTypeEnum principalType) {
    this.principalType = principalType;
    return this;
  }

   /**
   * Get principalType
   * @return principalType
  **/
  @Schema(description = "")
  public PrincipalTypeEnum getPrincipalType() {
    return principalType;
  }

  public void setPrincipalType(PrincipalTypeEnum principalType) {
    this.principalType = principalType;
  }

  public ExecutionPrincipalInfoOrBuilder shouldValidateRbac(Boolean shouldValidateRbac) {
    this.shouldValidateRbac = shouldValidateRbac;
    return this;
  }

   /**
   * Get shouldValidateRbac
   * @return shouldValidateRbac
  **/
  @Schema(description = "")
  public Boolean isShouldValidateRbac() {
    return shouldValidateRbac;
  }

  public void setShouldValidateRbac(Boolean shouldValidateRbac) {
    this.shouldValidateRbac = shouldValidateRbac;
  }

  public ExecutionPrincipalInfoOrBuilder allFields(Map<String, Object> allFields) {
    this.allFields = allFields;
    return this;
  }

  public ExecutionPrincipalInfoOrBuilder putAllFieldsItem(String key, Object allFieldsItem) {
    if (this.allFields == null) {
      this.allFields = new HashMap<String, Object>();
    }
    this.allFields.put(key, allFieldsItem);
    return this;
  }

   /**
   * Get allFields
   * @return allFields
  **/
  @Schema(description = "")
  public Map<String, Object> getAllFields() {
    return allFields;
  }

  public void setAllFields(Map<String, Object> allFields) {
    this.allFields = allFields;
  }

  public ExecutionPrincipalInfoOrBuilder initializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
    return this;
  }

   /**
   * Get initializationErrorString
   * @return initializationErrorString
  **/
  @Schema(description = "")
  public String getInitializationErrorString() {
    return initializationErrorString;
  }

  public void setInitializationErrorString(String initializationErrorString) {
    this.initializationErrorString = initializationErrorString;
  }

  public ExecutionPrincipalInfoOrBuilder descriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
    return this;
  }

   /**
   * Get descriptorForType
   * @return descriptorForType
  **/
  @Schema(description = "")
  public Descriptor getDescriptorForType() {
    return descriptorForType;
  }

  public void setDescriptorForType(Descriptor descriptorForType) {
    this.descriptorForType = descriptorForType;
  }

  public ExecutionPrincipalInfoOrBuilder defaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
    return this;
  }

   /**
   * Get defaultInstanceForType
   * @return defaultInstanceForType
  **/
  @Schema(description = "")
  public Message getDefaultInstanceForType() {
    return defaultInstanceForType;
  }

  public void setDefaultInstanceForType(Message defaultInstanceForType) {
    this.defaultInstanceForType = defaultInstanceForType;
  }

  public ExecutionPrincipalInfoOrBuilder unknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
    return this;
  }

   /**
   * Get unknownFields
   * @return unknownFields
  **/
  @Schema(description = "")
  public UnknownFieldSet getUnknownFields() {
    return unknownFields;
  }

  public void setUnknownFields(UnknownFieldSet unknownFields) {
    this.unknownFields = unknownFields;
  }

  public ExecutionPrincipalInfoOrBuilder initialized(Boolean initialized) {
    this.initialized = initialized;
    return this;
  }

   /**
   * Get initialized
   * @return initialized
  **/
  @Schema(description = "")
  public Boolean isInitialized() {
    return initialized;
  }

  public void setInitialized(Boolean initialized) {
    this.initialized = initialized;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionPrincipalInfoOrBuilder executionPrincipalInfoOrBuilder = (ExecutionPrincipalInfoOrBuilder) o;
    return Objects.equals(this.principal, executionPrincipalInfoOrBuilder.principal) &&
        Objects.equals(this.principalBytes, executionPrincipalInfoOrBuilder.principalBytes) &&
        Objects.equals(this.principalTypeValue, executionPrincipalInfoOrBuilder.principalTypeValue) &&
        Objects.equals(this.principalType, executionPrincipalInfoOrBuilder.principalType) &&
        Objects.equals(this.shouldValidateRbac, executionPrincipalInfoOrBuilder.shouldValidateRbac) &&
        Objects.equals(this.allFields, executionPrincipalInfoOrBuilder.allFields) &&
        Objects.equals(this.initializationErrorString, executionPrincipalInfoOrBuilder.initializationErrorString) &&
        Objects.equals(this.descriptorForType, executionPrincipalInfoOrBuilder.descriptorForType) &&
        Objects.equals(this.defaultInstanceForType, executionPrincipalInfoOrBuilder.defaultInstanceForType) &&
        Objects.equals(this.unknownFields, executionPrincipalInfoOrBuilder.unknownFields) &&
        Objects.equals(this.initialized, executionPrincipalInfoOrBuilder.initialized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(principal, principalBytes, principalTypeValue, principalType, shouldValidateRbac, allFields, initializationErrorString, descriptorForType, defaultInstanceForType, unknownFields, initialized);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionPrincipalInfoOrBuilder {\n");
    
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    principalBytes: ").append(toIndentedString(principalBytes)).append("\n");
    sb.append("    principalTypeValue: ").append(toIndentedString(principalTypeValue)).append("\n");
    sb.append("    principalType: ").append(toIndentedString(principalType)).append("\n");
    sb.append("    shouldValidateRbac: ").append(toIndentedString(shouldValidateRbac)).append("\n");
    sb.append("    allFields: ").append(toIndentedString(allFields)).append("\n");
    sb.append("    initializationErrorString: ").append(toIndentedString(initializationErrorString)).append("\n");
    sb.append("    descriptorForType: ").append(toIndentedString(descriptorForType)).append("\n");
    sb.append("    defaultInstanceForType: ").append(toIndentedString(defaultInstanceForType)).append("\n");
    sb.append("    unknownFields: ").append(toIndentedString(unknownFields)).append("\n");
    sb.append("    initialized: ").append(toIndentedString(initialized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
