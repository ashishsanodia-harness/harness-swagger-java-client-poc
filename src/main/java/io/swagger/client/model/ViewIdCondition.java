/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ViewCondition;
import io.swagger.client.model.ViewField;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ViewIdCondition
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class ViewIdCondition extends ViewCondition {
  @SerializedName("viewField")
  private ViewField viewField = null;

  /**
   * Gets or Sets viewOperator
   */
  @JsonAdapter(ViewOperatorEnum.Adapter.class)
  public enum ViewOperatorEnum {
    IN("IN"),
    NOT_IN("NOT_IN"),
    NOT_NULL("NOT_NULL"),
    NULL("NULL");

    private String value;

    ViewOperatorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ViewOperatorEnum fromValue(String input) {
      for (ViewOperatorEnum b : ViewOperatorEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ViewOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewOperatorEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ViewOperatorEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ViewOperatorEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("viewOperator")
  private ViewOperatorEnum viewOperator = null;

  @SerializedName("values")
  private List<String> values = null;

  public ViewIdCondition viewField(ViewField viewField) {
    this.viewField = viewField;
    return this;
  }

   /**
   * Get viewField
   * @return viewField
  **/
  @Schema(description = "")
  public ViewField getViewField() {
    return viewField;
  }

  public void setViewField(ViewField viewField) {
    this.viewField = viewField;
  }

  public ViewIdCondition viewOperator(ViewOperatorEnum viewOperator) {
    this.viewOperator = viewOperator;
    return this;
  }

   /**
   * Get viewOperator
   * @return viewOperator
  **/
  @Schema(description = "")
  public ViewOperatorEnum getViewOperator() {
    return viewOperator;
  }

  public void setViewOperator(ViewOperatorEnum viewOperator) {
    this.viewOperator = viewOperator;
  }

  public ViewIdCondition values(List<String> values) {
    this.values = values;
    return this;
  }

  public ViewIdCondition addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<String>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @Schema(description = "")
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewIdCondition viewIdCondition = (ViewIdCondition) o;
    return Objects.equals(this.viewField, viewIdCondition.viewField) &&
        Objects.equals(this.viewOperator, viewIdCondition.viewOperator) &&
        Objects.equals(this.values, viewIdCondition.values) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(viewField, viewOperator, values, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewIdCondition {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    viewField: ").append(toIndentedString(viewField)).append("\n");
    sb.append("    viewOperator: ").append(toIndentedString(viewOperator)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
