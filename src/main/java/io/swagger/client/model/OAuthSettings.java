/*
 * CD NextGen API Reference
 * This is the Open Api Spec 3 for the NextGen Manager. This is under active development. Beware of the breaking change with respect to the generated code stub  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 3.0
 * Contact: contact@harness.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * This contains the information about OAuth settings defined in Harness.
 */
@Schema(description = "This contains the information about OAuth settings defined in Harness.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-16T23:54:49.094+05:30[Asia/Kolkata]")
public class OAuthSettings {
  @SerializedName("filter")
  private String filter = null;

  /**
   * This is the list of OAuth Providers that are supported.
   */
  @JsonAdapter(AllowedProvidersEnum.Adapter.class)
  public enum AllowedProvidersEnum {
    AZURE("AZURE"),
    BITBUCKET("BITBUCKET"),
    GITHUB("GITHUB"),
    GITLAB("GITLAB"),
    GOOGLE("GOOGLE"),
    LINKEDIN("LINKEDIN");

    private String value;

    AllowedProvidersEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AllowedProvidersEnum fromValue(String input) {
      for (AllowedProvidersEnum b : AllowedProvidersEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AllowedProvidersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedProvidersEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AllowedProvidersEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AllowedProvidersEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("allowedProviders")
  private List<AllowedProvidersEnum> allowedProviders = null;

  /**
   * Gets or Sets settingsType
   */
  @JsonAdapter(SettingsTypeEnum.Adapter.class)
  public enum SettingsTypeEnum {
    USER_PASSWORD("USER_PASSWORD"),
    SAML("SAML"),
    LDAP("LDAP"),
    OAUTH("OAUTH");

    private String value;

    SettingsTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SettingsTypeEnum fromValue(String input) {
      for (SettingsTypeEnum b : SettingsTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SettingsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SettingsTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SettingsTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SettingsTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("settingsType")
  private SettingsTypeEnum settingsType = null;

  public OAuthSettings filter(String filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @Schema(description = "")
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }

  public OAuthSettings allowedProviders(List<AllowedProvidersEnum> allowedProviders) {
    this.allowedProviders = allowedProviders;
    return this;
  }

  public OAuthSettings addAllowedProvidersItem(AllowedProvidersEnum allowedProvidersItem) {
    if (this.allowedProviders == null) {
      this.allowedProviders = new ArrayList<AllowedProvidersEnum>();
    }
    this.allowedProviders.add(allowedProvidersItem);
    return this;
  }

   /**
   * This is the list of OAuth Providers that are supported.
   * @return allowedProviders
  **/
  @Schema(description = "This is the list of OAuth Providers that are supported.")
  public List<AllowedProvidersEnum> getAllowedProviders() {
    return allowedProviders;
  }

  public void setAllowedProviders(List<AllowedProvidersEnum> allowedProviders) {
    this.allowedProviders = allowedProviders;
  }

  public OAuthSettings settingsType(SettingsTypeEnum settingsType) {
    this.settingsType = settingsType;
    return this;
  }

   /**
   * Get settingsType
   * @return settingsType
  **/
  @Schema(description = "")
  public SettingsTypeEnum getSettingsType() {
    return settingsType;
  }

  public void setSettingsType(SettingsTypeEnum settingsType) {
    this.settingsType = settingsType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthSettings oauthSettings = (OAuthSettings) o;
    return Objects.equals(this.filter, oauthSettings.filter) &&
        Objects.equals(this.allowedProviders, oauthSettings.allowedProviders) &&
        Objects.equals(this.settingsType, oauthSettings.settingsType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, allowedProviders, settingsType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthSettings {\n");
    
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    allowedProviders: ").append(toIndentedString(allowedProviders)).append("\n");
    sb.append("    settingsType: ").append(toIndentedString(settingsType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
